{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/1. hexo博客构建.md","hash":"cea7c5c70883098af40c8785fbd9674bbdec5b6d","modified":1632984281348},{"_id":"source/_posts/10. Express+MySQL实现登陆界面.md","hash":"027a9a3316879912fed4376e5beee78e50233d89","modified":1632984355670},{"_id":"source/_posts/11. 如何实现一个轮播图.md","hash":"eb83a5bf0710a43fcedcacb4b6316c45be41af7a","modified":1632984359453},{"_id":"source/_posts/13. npm的一些简单整理.md","hash":"f3d287ec59dbcbf08224c308bbabeae2122b9f20","modified":1632984367357},{"_id":"source/_posts/12. background属性和img标签.md","hash":"ca20f4cc84b4c21e26be90482b12526840dd1c2a","modified":1632984363654},{"_id":"source/_posts/14. 动手写一个hexo主题（上）.md","hash":"473b754169790787feb686f5d6beb539c7f4b9b6","modified":1632984372311},{"_id":"source/_posts/15. gulp整理.md","hash":"077ac94dcc7291d9ad1ad7a81fb3bd0484f582a7","modified":1633766504231},{"_id":"source/_posts/16. 动手写一个hexo主题（下）.md","hash":"923c485246a6bed433d9ce140d88d08ee7704f58","modified":1632984385051},{"_id":"source/_posts/17. JS原型链.md","hash":"82a60ef8c6e900674adaeda9848dfd4acd5865cb","modified":1632984396604},{"_id":"source/_posts/18. 2018-9-6小结.md","hash":"649d1f08c994840dff54b322d051c7515194238a","modified":1632984402023},{"_id":"source/_posts/19. CSS-iScroll实现水平滚动实例.md","hash":"ff32b724a0033f398cd7e6b4f0b99d2848b8c853","modified":1632984409793},{"_id":"source/_posts/2. 页面常用布局整理.md","hash":"ad64af7af165c710c41d1d2a6a4285b05b038767","modified":1632984295890},{"_id":"source/_posts/20. DDA算法和Bresenham算法画线.md","hash":"d5a5010dd1541d4d8d91592265ce32e5b618d003","modified":1632984419542},{"_id":"source/_posts/21. CSS绘制三道杠和小圆点.md","hash":"71f78c8d21d74613fba84e48cd0d9d460124e42c","modified":1632984422879},{"_id":"source/_posts/22. 论文查询平台.md","hash":"f7c39ae240d1e2077c0fad3249cf3940fb5b6ca3","modified":1632984427069},{"_id":"source/_posts/23. 内联元素的一些探究.md","hash":"1410261da2eadfb5dff098f59762838013303c3e","modified":1632984431375},{"_id":"source/_posts/24. 解决回调地狱.md","hash":"91a5c204eccdc6ad22b8a6b155e3149b8ad0f3a0","modified":1632984436051},{"_id":"source/_posts/25. 使用webpack做一次项目优化.md","hash":"f461afe233a2839f4aa6b096ab7e296d5fc13ca5","modified":1632984446858},{"_id":"source/_posts/26. Git分支相关.md","hash":"b397c86274050add35f2430e821f842cc705a001","modified":1632984450435},{"_id":"source/_posts/27. vue-cli源码学习1.x.md","hash":"d4d1464f91dd1f85db86aa233e6dbf62fae8ac10","modified":1632984453386},{"_id":"source/_posts/28. vue-cli源码学习2.x.md","hash":"1abc4af35db36114fb0ec3c5fb8b6d83798687f4","modified":1632984467426},{"_id":"source/_posts/29. 浏览器重绘和requestAnimationFrame.md","hash":"5c8703eb0d44617a766d448eb889a02a0763d0f4","modified":1633766800743},{"_id":"source/_posts/3. DOM操作.md","hash":"1c83e41eb9aa88bddeb781e14f9486d55bf962ad","modified":1632984314267},{"_id":"source/_posts/30. 虚假的第一篇博客.md","hash":"35ae3fcec4294f4eba70dd741d58e455161ea9a6","modified":1632984476089},{"_id":"source/_posts/31. 改造icarus博客主题（一）.md","hash":"7cef4b225b58e15ac528e7a7685b528c616f9a2c","modified":1633766345019},{"_id":"source/_posts/4. jQuery和原生DOM操作对比.md","hash":"c44a45e4482276dbc37364e0647c53ecb534365c","modified":1632984318246},{"_id":"source/_posts/5. 如何实现一个导航栏.md","hash":"dc50e0170cbe82d6687ff7ef798fabca97216632","modified":1632984321611},{"_id":"source/_posts/6. 实现一个问卷平台.md","hash":"2c1008987e1492d3edde975fa26871652fa2e6f9","modified":1632984329773},{"_id":"source/_posts/7. JS对象整理.md","hash":"632fd5e8d1df11c0ce82a959081c10e58e560676","modified":1632984336073},{"_id":"source/_posts/8. 模板引擎ejs+gulp的使用.md","hash":"037b23907f738b27e7e6a79925b7e658c0004ab3","modified":1632984339004},{"_id":"source/_posts/9. 数字图像处理和PS.md","hash":"bc42fddacf696c91bf3e4a28f250aef7910e1a5d","modified":1632984346545},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"653d306a010f669192883483414da500d48cf592","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"74e438bb42619666050192d6f3dc39023777eee2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"2dd0997639a8cf8a83c69115de30afa858e3da96","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"16513ab1745533d0f4cdbdee323339ebab6d02c1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"5625c4040a885aaf150f35fe9d07d844d7f94a27","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/workflows/lint.yml","hash":"71f04b66e48f065285ba109939999876ef411598","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.github/workflows/test.yml","hash":"69046b3b5c3d12cdca26380b7458cebeb2546dae","modified":1632883650514},{"_id":"node_modules/hexo-theme-icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1632883650515},{"_id":"node_modules/hexo-theme-icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1632883650512},{"_id":"node_modules/hexo-theme-icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1632883650515},{"_id":"node_modules/hexo-theme-icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1632883650513},{"_id":"node_modules/hexo-theme-icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1632883650530},{"_id":"node_modules/hexo-theme-icarus/package-lock.json","hash":"c29edd01190693e24c173715c2c5aedbfa008801","modified":1632883740800},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1632971326426},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1632971326426},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1632971326426},{"_id":"public/content.json","hash":"75b5b97aa58a4c440702e3785f858ccf0ea24901","modified":1634111996064},{"_id":"public/manifest.json","hash":"3acbdaf19790c1e996a53c60459244e5353b7611","modified":1632971326426},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1632971326426},{"_id":"public/2021/09/29/31. 改造icarus博客主题（一）/index.html","hash":"1f4267e860994aeebe7a83e192af8d1563f92bed","modified":1632971326426},{"_id":"public/2020/05/07/29. 浏览器重绘和requestAnimationFrame/index.html","hash":"081c6075670a29e7637c24d6d4b3e7f4218187a0","modified":1632971326426},{"_id":"public/2019/08/03/28. vue-cli源码学习2.x/index.html","hash":"0dc60ee79d3662eaeb73c6ecee464a0598b95519","modified":1632971326426},{"_id":"public/2019/07/24/27. vue-cli源码学习1.x/index.html","hash":"3f5740a18b6ff440569cec7e574894ab42d30055","modified":1632971326426},{"_id":"public/2019/07/12/26. Git分支相关/index.html","hash":"d08b1e1d8f2410f3bbbf062ba9c3ce6ce73d02ca","modified":1632971326426},{"_id":"public/archives/page/4/index.html","hash":"7b724eb644f4563b0e2e63d82dd79dd48e89bea7","modified":1634111996064},{"_id":"public/archives/2017/09/index.html","hash":"671a2eec49d9c7c0699d1738a22e3a88740460ba","modified":1634111996064},{"_id":"public/archives/2017/10/index.html","hash":"8f30c597e77ed54d274f8ee9965312119006d28b","modified":1634111996064},{"_id":"public/archives/2018/04/index.html","hash":"8afeb32e7a717f3829fe2ebc4342ed65026a646b","modified":1634111996064},{"_id":"public/archives/2018/01/index.html","hash":"a6d4c6fdc044e25cdb53279e6c4068bcc3f931ac","modified":1634111996064},{"_id":"public/archives/2018/12/index.html","hash":"522e10c713ef1127978aaedd27111fcf79788b54","modified":1634111996064},{"_id":"public/archives/2019/01/index.html","hash":"519687c57f871195adf9992374deaef6d61ec938","modified":1634111996064},{"_id":"public/archives/2019/02/index.html","hash":"f8d7a71b21904c519ddb02592392ac97bacdcf2e","modified":1634111996064},{"_id":"public/archives/2019/07/index.html","hash":"29f1726536a21e3a56fdd962a03b82e8cbd40253","modified":1634111996064},{"_id":"public/archives/2019/08/index.html","hash":"d621239fac70f874dc228fa2a53bceed969b1048","modified":1634111996064},{"_id":"public/archives/2019/03/index.html","hash":"5f9be01c1d6c8318a71570cc3bd5644e2922499b","modified":1634111996064},{"_id":"public/archives/2021/index.html","hash":"fd4f599d2a1f613904b9683d2e3d59bdc3c40a18","modified":1634111996064},{"_id":"public/archives/2020/05/index.html","hash":"91cc406f2139c5cc04a9aebd1f7a68129b1b134f","modified":1634111996064},{"_id":"public/archives/2021/09/index.html","hash":"19b59f828da5652eb2d55abeaddbab60681ea768","modified":1634111996064},{"_id":"public/archives/2020/index.html","hash":"788bfc7e9a08ac47f2f553ecfc99d586f72d405f","modified":1634111996064},{"_id":"public/categories/index.html","hash":"a2f6e1018b872e9b81ef042cebdffe4d4ea76f23","modified":1634111996064},{"_id":"public/2019/02/18/24. 解决回调地狱/index.html","hash":"f86f3b8973f0d27f1f9b1f6a5815e1af81d0d849","modified":1632971326426},{"_id":"public/2019/01/19/23. 内联元素的一些探究/index.html","hash":"baca7e97dd388924f1561f3ba55136fb691f2b16","modified":1632971326426},{"_id":"public/2019/03/12/25. 使用webpack做一次项目优化/index.html","hash":"1c11351d2d0ceed8852327e7fc7a9d92e70489e3","modified":1632971326426},{"_id":"public/2018/09/18/21. CSS绘制三道杠和小圆点/index.html","hash":"6e7795ce434ab9cf86d0c46baef3a94beca084ad","modified":1632971326426},{"_id":"public/2018/09/10/20. DDA算法和Bresenham算法画线/index.html","hash":"63e2d17697873131c27735127625d7ff4f85d2e5","modified":1632971326426},{"_id":"public/2018/12/02/22. 论文查询平台/index.html","hash":"d606a466e645308094c0b38510fd8966f4cfdb74","modified":1632971326426},{"_id":"public/2018/09/06/18. 2018-9-6小结/index.html","hash":"6dd471855f4c3343c308e9836837389a20102ddf","modified":1632971326426},{"_id":"public/2018/04/24/17. JS原型链/index.html","hash":"4570e3b94a4e52aedf3e506fc3303a8a75ed773a","modified":1632971326426},{"_id":"public/2018/04/16/16. 动手写一个hexo主题（下）/index.html","hash":"b6f68d36f7a588d69ee76daed90c60ddb299141e","modified":1632971326426},{"_id":"public/2018/03/28/14. 动手写一个hexo主题（上）/index.html","hash":"e7b1ee2002ac3463c19f2b5639c94b1f61e73242","modified":1632971326426},{"_id":"public/2018/03/31/15. gulp整理/index.html","hash":"3d0fd29643bd77e5a19ab030e0775fd11d65f665","modified":1632971326426},{"_id":"public/2021/09/28/30. 虚假的第一篇博客/index.html","hash":"5ca59494055347d7ebb3a6211577685afa1f3d33","modified":1632971326426},{"_id":"public/2018/09/07/19. CSS-iScroll实现水平滚动实例/index.html","hash":"f0fa556166aca2e49a1db186a66e076c48f527e2","modified":1632971326426},{"_id":"public/2018/03/14/11. 如何实现一个轮播图/index.html","hash":"16be5ef38db8d6418360f9adcc850661817a6bd6","modified":1632971326426},{"_id":"public/2018/03/10/10. Express+MySQL实现登陆界面/index.html","hash":"b8e0cc545c8f7012614a76144cabca04f2134488","modified":1632971326426},{"_id":"public/2018/03/09/9. 数字图像处理和PS/index.html","hash":"a0923c2b61433c82f1753bb3545ad13315790328","modified":1632971326426},{"_id":"public/2018/03/06/8. 模板引擎ejs+gulp的使用/index.html","hash":"e0f5e4ce95133e701868398e0f63cd6bc74a3dda","modified":1632971326426},{"_id":"public/2018/01/21/7. JS对象整理/index.html","hash":"f4a7200e8e9cf214c7e98cf6feaf1cdd4b8986a4","modified":1632971326426},{"_id":"public/2018/03/24/13. npm的一些简单整理/index.html","hash":"e3bbc24fede1a1f3024e22906fc689c24088343d","modified":1632971326426},{"_id":"public/2018/01/11/6. 实现一个问卷平台/index.html","hash":"10a471284979db5e47164e36774f62eb95493114","modified":1632971326426},{"_id":"public/2017/10/10/3. DOM操作/index.html","hash":"94c5d148f4b0f2fd528e3301d29d0444507ae150","modified":1632971326426},{"_id":"public/2017/09/28/2. 页面常用布局整理/index.html","hash":"db8df12fd5237b2baac5b8f0f36c079e7db36228","modified":1632971326426},{"_id":"public/2017/09/21/1. hexo博客构建/index.html","hash":"14cbea7277b8e19e8565b2af76916e625d2581a3","modified":1632971326426},{"_id":"public/2018/03/17/12. background属性和img标签/index.html","hash":"199ff99494baee44ca85409556ac12a10ad3186f","modified":1632971326426},{"_id":"public/archives/index.html","hash":"1e5c3c23ee82f65ac07cfbb9ffaea9c898222a82","modified":1634111996064},{"_id":"public/2017/10/18/4. jQuery和原生DOM操作对比/index.html","hash":"d6237ba630d9f0aee06a5c1dc3edbda42bf47688","modified":1632971326426},{"_id":"public/archives/2017/index.html","hash":"8d69c7426d586ca8c25d64ef3eb43291d86aa1a5","modified":1634111996064},{"_id":"public/2017/10/24/5. 如何实现一个导航栏/index.html","hash":"20d25956fc8d0f1f41ea3ba306a004eb682ccfec","modified":1632971326426},{"_id":"public/archives/2018/index.html","hash":"04bfcec28eea7c3a3dafb82d34329300ec7061c7","modified":1634111996064},{"_id":"public/archives/2018/page/2/index.html","hash":"8b2e714d06444d8c807e4e44fb89a318b6860a08","modified":1634111996064},{"_id":"public/archives/2018/03/index.html","hash":"3ab3770f7b25a3fc006e939094b1ded747cd9ec5","modified":1634111996064},{"_id":"public/archives/2018/09/index.html","hash":"1252f56358bb50ad274182eeb6c9c95983863563","modified":1634111996064},{"_id":"public/archives/2019/index.html","hash":"8d8676483f5bf5c63f589506acb1dae19671e53b","modified":1634111996064},{"_id":"public/archives/page/2/index.html","hash":"9df5045ffd72e6f7e2ffdf5ea5face7de2f212c9","modified":1634111996064},{"_id":"public/archives/page/3/index.html","hash":"61dd9c88ad2982d91ca8c4332630a817d107939d","modified":1634111996064},{"_id":"public/index.html","hash":"418e2fb4247ab3e19b9e7e96c792ad98b60b6967","modified":1634111996064},{"_id":"public/page/4/index.html","hash":"2f0eacb689522f68d5e3e90cd08cc12fc405ad74","modified":1634111996064},{"_id":"public/tags/hexo/index.html","hash":"ef5fd084e99f72d92ee3826c2cd18abefac88c76","modified":1634111996064},{"_id":"public/tags/项目/index.html","hash":"7bb34c6240f11ac88926e9a645ac1a40c3bfa6ca","modified":1634111996064},{"_id":"public/tags/Express/index.html","hash":"28f0bf0f7258aba021e7a38152e3fb507f0b85b6","modified":1634111996064},{"_id":"public/page/2/index.html","hash":"49dddc727e30f91e800a6969773462887e56bc24","modified":1634111996064},{"_id":"public/tags/CSS/index.html","hash":"b266fb49812be0aab27c0efc105e57268cef875a","modified":1634111996064},{"_id":"public/tags/MySQL/index.html","hash":"7223612ab7479b15e42c86aeb908109aa4ccf79a","modified":1634111996064},{"_id":"public/page/3/index.html","hash":"86b3a4e9a26eafcea80adf18c25de7777a5f73a2","modified":1634111996064},{"_id":"public/tags/gulp/index.html","hash":"44b0333829f72373b2dfd5caf7ff341958162e24","modified":1634111996064},{"_id":"public/tags/jQuery/index.html","hash":"b5743e487ed82c75a8aa10ad808468ddf18cf0bc","modified":1634111996064},{"_id":"public/tags/P5JS/index.html","hash":"44b4a763a8ae3904348ea374f744866e2a271509","modified":1634111996064},{"_id":"public/tags/JS/index.html","hash":"0e9d06aac6b5555f41ee15cb5a9124c536a27eba","modified":1634111996064},{"_id":"public/tags/总结/index.html","hash":"fb719a875d3ac823168fba60ab0d24529fb00a46","modified":1634111996064},{"_id":"public/tags/npm/index.html","hash":"f9f4827d4c5ba3ff9272d35bc8b911dbd298d59c","modified":1634111996064},{"_id":"public/tags/优化/index.html","hash":"14aad797ede3530e5c082c6738ad3f33a8ed178e","modified":1634111996064},{"_id":"public/tags/webpack/index.html","hash":"82ff12a6c37788d87cfd5b1c9effe8ab2e2be19a","modified":1634111996064},{"_id":"public/tags/Promise/index.html","hash":"549c609fa91c376171ca751e203454c7721d8385","modified":1634111996064},{"_id":"public/tags/图形学/index.html","hash":"b77bc1015d1f1135d6fe1eeb49f20cdabc21b799","modified":1634111996064},{"_id":"public/tags/cli/index.html","hash":"15d2a4104a4e5ea1900ddd49533271aa685a0cba","modified":1634111996064},{"_id":"public/tags/Git/index.html","hash":"c9703b2dc7d257b8b7f8e5aef4ced751c2133909","modified":1634111996064},{"_id":"public/tags/性能/index.html","hash":"7af4f6b60321aa272e8af5b4e7c0fa48f4a7c483","modified":1634111996064},{"_id":"public/tags/vue/index.html","hash":"ce1ff85ab82113d2b89b062b7d1ddcd8b39d576d","modified":1634111996064},{"_id":"public/tags/浏览器/index.html","hash":"1e7f4d44e0a4c6ca24c1dc47fa3ed42feffef783","modified":1634111996064},{"_id":"public/tags/Vue/index.html","hash":"7c4a95694af8d6a7eb792adc4fdfb595bd16a5b2","modified":1634111996064},{"_id":"public/tags/ejs/index.html","hash":"8fbf0ff72ec2a90529d60a94de4de7c1292cd006","modified":1634111996064},{"_id":"public/tags/index.html","hash":"990e5a6ce7bf9a2cfc8a1dcf78f0b8b68bb44948","modified":1634111996064},{"_id":"public/tags/PS/index.html","hash":"52c7965753b3405bcb14ee198cbe3f98902eaa73","modified":1634111996064},{"_id":"source/_posts/33. hexo源码分析（二）.md","hash":"41752527f6fb7091668220971633370d326f503c","modified":1634111937866},{"_id":"source/_posts/32. hexo源码分析（一）.md","hash":"4cc83e9a1d6226252b52267fb1e1199f4fbc9dc2","modified":1634110715600},{"_id":"public/hexo源码分析（二）/index.html","hash":"559a001dc6e2e893841505e4d1a308fa4ebc3d71","modified":1634111996064},{"_id":"public/hexo源码分析（一）/index.html","hash":"789cd543ec757385bcbbbcf12d9ad5463bbfa3c1","modified":1634111996064},{"_id":"public/虚假的第一篇博客/index.html","hash":"c14e04d3a0d811718da7fa8c60c4415c7cf21b07","modified":1634111996064},{"_id":"public/改造icarus博客主题（一）/index.html","hash":"5529465c16ed2195d61c9f7573fbc52fda5327a1","modified":1634111996064},{"_id":"public/浏览器重绘和requestanimationframe/index.html","hash":"2fe455b1f213440a9c9dd15b0ebf6b748eb92a8d","modified":1634111996064},{"_id":"public/vue-cli源码学习2-x/index.html","hash":"cf6025cbc54b4bc794a7d2dfd2e4c69f462cd693","modified":1634111996064},{"_id":"public/vue-cli源码学习1-x/index.html","hash":"1e872edbe452999bd536988d350754e31e23e13f","modified":1634111996064},{"_id":"public/记一次项目的优化/index.html","hash":"9539e7b58578de9c520e7614ce84d001862af555","modified":1634111996064},{"_id":"public/git分支相关/index.html","hash":"d24fd393a1106127d5a3eac5bbf409e7aaa2fe9a","modified":1634111996064},{"_id":"public/解决回调地狱/index.html","hash":"a3a09bb805e1d56013f347834fdf63883d3cc6d8","modified":1634111996064},{"_id":"public/内联元素的一些探究/index.html","hash":"72f5e1900ea6f5a59dd3398faae6b27cce40fd9a","modified":1634111996064},{"_id":"public/论文查询平台/index.html","hash":"f31fea1bbef66c4e94081beb353444418ea96b1a","modified":1634111996064},{"_id":"public/css绘制三道杠和小圆点/index.html","hash":"5d19db0e6cdde984debbfe9b27946f9b53656d26","modified":1634111996064},{"_id":"public/dda算法和bresenham算法画线/index.html","hash":"f235bc86172844015f1cf34ecfa4668cefe7cc0c","modified":1634111996064},{"_id":"public/css-iscroll实现水平滚动实例/index.html","hash":"77c06282c8a416f45f58daed91062e2cbda686a8","modified":1634111996064},{"_id":"public/2018-9-6小结/index.html","hash":"fe4077965e2642094542894e063980a33f76eec7","modified":1634111996064},{"_id":"public/js原型链/index.html","hash":"f5f8aac1b28de62185dffd116a9d7606332697f4","modified":1634111996064},{"_id":"public/gulp整理/index.html","hash":"d04e477c6d76e8657668728b5d1b9d68353427e3","modified":1634111996064},{"_id":"public/动手写一个hexo主题（下）/index.html","hash":"b1b9e4723de90a3bf9b22aebc0a039afc0cd0a70","modified":1634111996064},{"_id":"public/动手写一个hexo主题（上）/index.html","hash":"5e448792d5aa007d92987a54eb08ba73fee6ad44","modified":1634111996064},{"_id":"public/npm的一些简单整理/index.html","hash":"abc9057e8489de45fa91b01301862238b291be32","modified":1634111996064},{"_id":"public/background属性和img标签/index.html","hash":"7e5dde448a0336debade335e57eb6aece58864e5","modified":1634111996064},{"_id":"public/如何实现一个轮播图/index.html","hash":"e78b64aee7c87fc0fd3100d522c4515ce3a99739","modified":1634111996064},{"_id":"public/express-mysql实现登陆界面/index.html","hash":"2dc9b7f7481517b44c2a97f6a75d8fc8ea93c495","modified":1634111996064},{"_id":"public/模板引擎ejs-gulp的使用/index.html","hash":"37b61ce5a8fdb3343014548260d6968f9033ccb4","modified":1634111996064},{"_id":"public/数字图像处理和ps/index.html","hash":"5345efde6c81d0b785ec7ed6f8766cf8c8e63316","modified":1634111996064},{"_id":"public/js对象整理/index.html","hash":"37e2c1fc8f93f0cee485901c9ac149d1c0ed5527","modified":1634111996064},{"_id":"public/实现一个问卷平台/index.html","hash":"9983c40e1838ec0b594be2611f41c517bb4f3565","modified":1634111996064},{"_id":"public/如何实现一个导航栏/index.html","hash":"cd9f8144df8a8f1b323db7bab783917df39c3944","modified":1634111996064},{"_id":"public/jquery和原生dom操作对比/index.html","hash":"4d970d2db1cf6a747e90fe02204a279e049a70e0","modified":1634111996064},{"_id":"public/dom操作/index.html","hash":"2ffe7ad2893cac51bba280d9f02cc230141fd674","modified":1634111996064},{"_id":"public/页面常用布局整理/index.html","hash":"0045092cc02127d7f896cd188314d1a5939f22ab","modified":1634111996064},{"_id":"public/hexo博客构建/index.html","hash":"8aefd838db512f7e5317c0d3ce0bfad6613e8538","modified":1634111996064},{"_id":"public/archives/2021/10/index.html","hash":"124850eb66b9f5a3cd42987d32d9fc862be1cdb0","modified":1634111996064},{"_id":"public/categories/前端/index.html","hash":"89c79d03bfa3e56721ad0b88162e97b7510c5a27","modified":1634111996064},{"_id":"public/categories/前端/page/2/index.html","hash":"df603d538c9c491660948989eb85fa0193fbfb05","modified":1634111996064},{"_id":"public/categories/hexo/index.html","hash":"a05fbd6b63bf0777f583c0a2a24be788ec61c5a0","modified":1634111996064},{"_id":"public/categories/PS/index.html","hash":"820ed89f3b06f44516d7e0f0ebc549838eaba118","modified":1634111996064},{"_id":"public/categories/项目/index.html","hash":"937cc0a21e6173bf9e15c905d7574ead6fc9fe03","modified":1634111996064},{"_id":"public/categories/总结/index.html","hash":"d71ee7dff5ab7fd539f134e3ef8c33f1adc2f038","modified":1634111996064},{"_id":"public/categories/图形学/index.html","hash":"75586e4a4105b919327d05d2a673f8c07abdf2ec","modified":1634111996064},{"_id":"public/tags/源码/index.html","hash":"8be9e766cf32a0694dff7f958f1d63cd6268d685","modified":1634111996064}],"Category":[{"name":"前端","_id":"cku6klnox0000hsp2dpjvao5h"},{"name":"hexo","parent":"cku6klnox0000hsp2dpjvao5h","_id":"cku6km4r20000jzp277uxhe0k"},{"name":"hexo","_id":"cku6kofvh0002jzp22i950neu"},{"name":"项目","_id":"cku6kph810008jzp29xq4h53r"},{"name":"PS","_id":"cku6kpu5x000cjzp2as3n8jtp"},{"name":"总结","_id":"cku6kr0yw000mjzp244cf5vyg"},{"name":"图形学","_id":"cku6krehj000pjzp262a7h87t"}],"Data":[],"Page":[],"Post":[{"title":"hexo博客构建","date":"2017-09-21T06:51:37.000Z","toc":true,"_content":"\n搭建博客花了我不少时间，由于各种原因，踩了很多坑，最终才将博客搭建起来，废话不多说。\n该文章是自搭建好博客后的第一篇博客，文章将整理博客管理、github上传项目等操作命令，便于以后查阅。\n注：该博客采用Github+hexo搭建而成\n\n<!--more-->\n\n## 一、hexo管理博客\n\n### 新建一篇博客\n\n``` bash\n$ hexo new [文件名]\n```\n\n### 生成静态页面\n\n``` bash\n$ hexo generate\n```\n使用该命令会在博客根目录下生成public文件（该文件即上传到github上的文件）\n\n### 清除缓存\n\n``` bash\n$ hexo clear\n```\n使用该命令会在博客根目录下删除public文件\n\n### 运行本地服务\n\n``` bash\n$ hexo server\n```\n\n使用该命令会在本地生成一个预览页面，浏览器输入localhost:4000，需要注意的是开启该服务后会占用4000端口，所以如果4000端口已经被占用的话会打不开页面，可使用命令\n\n```bash\n$ hexo server -p 5000\n```\n\n该命令可将端口4000换成端口5000\n\n### 部署页面\n\n```bash\n$ hexo deploy\n```\n\n使用该命令前根目录下_config.yml配置文件需将github地址等配置好,也可直接使用命令\n\n```bash\n$ hexo d -g\n```\n\n直接部署前生成静态页面\n\n## 二、github代码上传(最好在git bash中运行)\n\n### git初始化\n\n```bash\n$ git init\n```\n\n### 添加文件\n\n```bash\n$ git add *\n```\n\n此处\\*代表将该目录下所有文件上传，若要将某文件上传，则可换为该文件名\n\n### commit到仓库\n\n```bash\n$ git commit -m \"注释语句\"\n```\n\n注释语句可换成任意，例：第一次上传\n\n### 本地仓库关联到github\n\n```bash\n$ git remote add origin https://github.com/Qxiaoqi/HTML-task.git\n```\n\n此处地址为github代码仓库的地址，复制到上处即可。其中可能报错如下\n\n```\nfatal: remote origin already exists.\n```\n\n则可使用\n\n```bash\n$ git remote rm origin\n```\n\n删除原来的代码仓库地址\n\n### 上传代码\n\n```bash\n$ git push -u origin master\n```\n\n中间可能会输入账号密码\n","source":"_posts/1. hexo博客构建.md","raw":"---\ntitle: hexo博客构建\ndate: 2017-09-21 14:51:37\ntoc: true\ncategories:\n- hexo\ntags: \n- hexo\n---\n\n搭建博客花了我不少时间，由于各种原因，踩了很多坑，最终才将博客搭建起来，废话不多说。\n该文章是自搭建好博客后的第一篇博客，文章将整理博客管理、github上传项目等操作命令，便于以后查阅。\n注：该博客采用Github+hexo搭建而成\n\n<!--more-->\n\n## 一、hexo管理博客\n\n### 新建一篇博客\n\n``` bash\n$ hexo new [文件名]\n```\n\n### 生成静态页面\n\n``` bash\n$ hexo generate\n```\n使用该命令会在博客根目录下生成public文件（该文件即上传到github上的文件）\n\n### 清除缓存\n\n``` bash\n$ hexo clear\n```\n使用该命令会在博客根目录下删除public文件\n\n### 运行本地服务\n\n``` bash\n$ hexo server\n```\n\n使用该命令会在本地生成一个预览页面，浏览器输入localhost:4000，需要注意的是开启该服务后会占用4000端口，所以如果4000端口已经被占用的话会打不开页面，可使用命令\n\n```bash\n$ hexo server -p 5000\n```\n\n该命令可将端口4000换成端口5000\n\n### 部署页面\n\n```bash\n$ hexo deploy\n```\n\n使用该命令前根目录下_config.yml配置文件需将github地址等配置好,也可直接使用命令\n\n```bash\n$ hexo d -g\n```\n\n直接部署前生成静态页面\n\n## 二、github代码上传(最好在git bash中运行)\n\n### git初始化\n\n```bash\n$ git init\n```\n\n### 添加文件\n\n```bash\n$ git add *\n```\n\n此处\\*代表将该目录下所有文件上传，若要将某文件上传，则可换为该文件名\n\n### commit到仓库\n\n```bash\n$ git commit -m \"注释语句\"\n```\n\n注释语句可换成任意，例：第一次上传\n\n### 本地仓库关联到github\n\n```bash\n$ git remote add origin https://github.com/Qxiaoqi/HTML-task.git\n```\n\n此处地址为github代码仓库的地址，复制到上处即可。其中可能报错如下\n\n```\nfatal: remote origin already exists.\n```\n\n则可使用\n\n```bash\n$ git remote rm origin\n```\n\n删除原来的代码仓库地址\n\n### 上传代码\n\n```bash\n$ git push -u origin master\n```\n\n中间可能会输入账号密码\n","slug":"1. hexo博客构建","published":1,"updated":"2021-09-30T06:44:41.348Z","_id":"cku41le880000idp2074z7u24","comments":1,"layout":"post","photos":[],"link":"","content":"<p>搭建博客花了我不少时间，由于各种原因，踩了很多坑，最终才将博客搭建起来，废话不多说。<br>该文章是自搭建好博客后的第一篇博客，文章将整理博客管理、github上传项目等操作命令，便于以后查阅。<br>注：该博客采用Github+hexo搭建而成</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、hexo管理博客\"><a href=\"#一、hexo管理博客\" class=\"headerlink\" title=\"一、hexo管理博客\"></a>一、hexo管理博客</h2><h3 id=\"新建一篇博客\"><a href=\"#新建一篇博客\" class=\"headerlink\" title=\"新建一篇博客\"></a>新建一篇博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [文件名]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>使用该命令会在博客根目录下生成public文件（该文件即上传到github上的文件）</p>\n<h3 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clear</span><br></pre></td></tr></table></figure>\n<p>使用该命令会在博客根目录下删除public文件</p>\n<h3 id=\"运行本地服务\"><a href=\"#运行本地服务\" class=\"headerlink\" title=\"运行本地服务\"></a>运行本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令会在本地生成一个预览页面，浏览器输入localhost:4000，需要注意的是开启该服务后会占用4000端口，所以如果4000端口已经被占用的话会打不开页面，可使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n\n<p>该命令可将端口4000换成端口5000</p>\n<h3 id=\"部署页面\"><a href=\"#部署页面\" class=\"headerlink\" title=\"部署页面\"></a>部署页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令前根目录下_config.yml配置文件需将github地址等配置好,也可直接使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>直接部署前生成静态页面</p>\n<h2 id=\"二、github代码上传-最好在git-bash中运行\"><a href=\"#二、github代码上传-最好在git-bash中运行\" class=\"headerlink\" title=\"二、github代码上传(最好在git bash中运行)\"></a>二、github代码上传(最好在git bash中运行)</h2><h3 id=\"git初始化\"><a href=\"#git初始化\" class=\"headerlink\" title=\"git初始化\"></a>git初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加文件\"><a href=\"#添加文件\" class=\"headerlink\" title=\"添加文件\"></a>添加文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br></pre></td></tr></table></figure>\n\n<p>此处*代表将该目录下所有文件上传，若要将某文件上传，则可换为该文件名</p>\n<h3 id=\"commit到仓库\"><a href=\"#commit到仓库\" class=\"headerlink\" title=\"commit到仓库\"></a>commit到仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;注释语句&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注释语句可换成任意，例：第一次上传</p>\n<h3 id=\"本地仓库关联到github\"><a href=\"#本地仓库关联到github\" class=\"headerlink\" title=\"本地仓库关联到github\"></a>本地仓库关联到github</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin https://github.com/Qxiaoqi/HTML-task.git</span><br></pre></td></tr></table></figure>\n\n<p>此处地址为github代码仓库的地址，复制到上处即可。其中可能报错如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure>\n\n<p>则可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm origin</span><br></pre></td></tr></table></figure>\n\n<p>删除原来的代码仓库地址</p>\n<h3 id=\"上传代码\"><a href=\"#上传代码\" class=\"headerlink\" title=\"上传代码\"></a>上传代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>中间可能会输入账号密码</p>\n","site":{"data":{}},"excerpt":"<p>搭建博客花了我不少时间，由于各种原因，踩了很多坑，最终才将博客搭建起来，废话不多说。<br>该文章是自搭建好博客后的第一篇博客，文章将整理博客管理、github上传项目等操作命令，便于以后查阅。<br>注：该博客采用Github+hexo搭建而成</p>","more":"<h2 id=\"一、hexo管理博客\"><a href=\"#一、hexo管理博客\" class=\"headerlink\" title=\"一、hexo管理博客\"></a>一、hexo管理博客</h2><h3 id=\"新建一篇博客\"><a href=\"#新建一篇博客\" class=\"headerlink\" title=\"新建一篇博客\"></a>新建一篇博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [文件名]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>使用该命令会在博客根目录下生成public文件（该文件即上传到github上的文件）</p>\n<h3 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clear</span><br></pre></td></tr></table></figure>\n<p>使用该命令会在博客根目录下删除public文件</p>\n<h3 id=\"运行本地服务\"><a href=\"#运行本地服务\" class=\"headerlink\" title=\"运行本地服务\"></a>运行本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令会在本地生成一个预览页面，浏览器输入localhost:4000，需要注意的是开启该服务后会占用4000端口，所以如果4000端口已经被占用的话会打不开页面，可使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n\n<p>该命令可将端口4000换成端口5000</p>\n<h3 id=\"部署页面\"><a href=\"#部署页面\" class=\"headerlink\" title=\"部署页面\"></a>部署页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令前根目录下_config.yml配置文件需将github地址等配置好,也可直接使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>直接部署前生成静态页面</p>\n<h2 id=\"二、github代码上传-最好在git-bash中运行\"><a href=\"#二、github代码上传-最好在git-bash中运行\" class=\"headerlink\" title=\"二、github代码上传(最好在git bash中运行)\"></a>二、github代码上传(最好在git bash中运行)</h2><h3 id=\"git初始化\"><a href=\"#git初始化\" class=\"headerlink\" title=\"git初始化\"></a>git初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加文件\"><a href=\"#添加文件\" class=\"headerlink\" title=\"添加文件\"></a>添加文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br></pre></td></tr></table></figure>\n\n<p>此处*代表将该目录下所有文件上传，若要将某文件上传，则可换为该文件名</p>\n<h3 id=\"commit到仓库\"><a href=\"#commit到仓库\" class=\"headerlink\" title=\"commit到仓库\"></a>commit到仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;注释语句&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注释语句可换成任意，例：第一次上传</p>\n<h3 id=\"本地仓库关联到github\"><a href=\"#本地仓库关联到github\" class=\"headerlink\" title=\"本地仓库关联到github\"></a>本地仓库关联到github</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin https://github.com/Qxiaoqi/HTML-task.git</span><br></pre></td></tr></table></figure>\n\n<p>此处地址为github代码仓库的地址，复制到上处即可。其中可能报错如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure>\n\n<p>则可使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm origin</span><br></pre></td></tr></table></figure>\n\n<p>删除原来的代码仓库地址</p>\n<h3 id=\"上传代码\"><a href=\"#上传代码\" class=\"headerlink\" title=\"上传代码\"></a>上传代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>中间可能会输入账号密码</p>"},{"title":"Express+MySQL实现登陆界面","date":"2018-03-10T08:49:58.000Z","toc":true,"_content":"\n最近连着整理了好几篇博客，这些都是前一段时间做的东西，希望拿出来整理一下，加深印象。\n\n之前看了一些nodejs，然后希望做出来点东西来实践，然后刚好在掘金上看到一个很棒的登陆效果，于是把他复现的同时也顺手做了个和后端交互的部分，就是注册账号，和登陆账号这么个简单的功能。然后发现express框架真的很好用，nodejs这块就采用了express框架来写，数据库用了Mysql。\n\n<!--more-->\n\n## 页面展示\n\n感觉还是有点小炫酷的，登陆页面是一个动态效果，一个方块气泡上升的效果。\n\n登陆界面\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_1.jpg\" height=\"300px\">\n\n注册界面\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_2.jpg\" height=\"300px\">\n\n## 技术细节\n\n### 前端效果部分\n\n#### 气泡效果\n\n主要就是一层一层的往上压，使用z-index来控制谁在上面，该效果则是气泡在背景上面。\n\n```html\n<ul class=\"bg-bubbles\">\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n```\n\ncss代码选取部分，其他的可以自己定义\n```css \nul li {\n  position: absolute;\n  z-index: 5;\n  list-style: none;\n  position: absolute;\n  bottom: -160px;\n  width: 40px;\n  height: 40px;\n  background-color: rgba(255, 255, 255, 0.15);\n  animation: square 25s infinite;    //依次为动画名称，时间，播放次数（无限）\n  transition-timing-function: linear;  //速度曲线（从头到尾相同）\n  &:nth-child(1) {\n    left: 10%;\n  }\n  &:nth-child(2) {\n    left: 20%;\n    width: 90px;\n    height: 90px;\n    animation-delay: 2s;\n    animation-duration: 17s;\n  }\n  //以上自己定义\n\n\n  //动画执行\n  @keyframes square {\n    0% {\n      transform: translateY(-700px);\n    }\n        100% {\n          transform: translateY(-700px) rotate(600deg);\n        }\n  }\n```\n\n上面代码使用less写的，less语法很简单，相比于sass应该来说语法少了很多，可以使用Sublime Text的插件来实现自动编译成css的效果，或者也可以使用webpack，gulp等自动胡工具通过编写任务来实现编译。\n\n* 背景使用`background-image: linear-gradient( 135deg, #FFF6B7 10%, #F6416C 100%);`来分别控制颜色渐变方向，两个颜色\n\n* 气泡的上升是通过`translateY()`来控制的\n\n* 气泡的旋转是通过`rotate()`来控制的\n\n* 但是有一处不知道为什么，气泡为什么会在最上面疑似停留一会才消失的效果，倘若是因为`transition-timing-function: `控制速度曲线的原因的话，那么此处设置的是`linear`应该是一直平均速度运行，为什么在最后会很慢呢。暂未解决\n\n#### 弹窗效果\n\n原理很简单，当用户点击注册新账号的时候会调用一个函数，改函数会将一个之前写好的并用display:none隐藏的div块重新改为display:block使之重新显现。同时也可以在之前写好一个大的div并用z-index控制层叠位置来使整个背景遮罩变暗\n\n```html \n//背景遮罩\n<div class=\"overlay\"></div>\n\n//注册窗口\n<div class=\"register-box\">\n  <div class=\"close-box\"></div>\n  <div class=\"register-content\">\n    <div class=\"register-username\">\n      <input type=\"text\" placeholder=\"请输入用户名\" id=\"register-username\">\n    </div>\n    <div class=\"register-password\">\n      <input type=\"password\" placeholder=\"请输入密码\" id=\"register-password\">\n    </div>\n    <div  class=\"register-repassword\">\n      <input type=\"password\" placeholder=\"请再次输入密码\" id=\"register-repassword\">\n    </div>\n    <div class=\"register-button\">\n      <button>立即注册</button>\n    </div>\n  </div>\n</div>\n```\n\n```js \nvar showRegister = function() {\n  console.log(\"s\");\n  $(\".overlay\").css(\"display\",\"block\");\n  $(\".register-box\").css(\"display\",\"block\");\n}\n\nvar closeRegister = function() {\n  $(\".overlay\").css(\"display\",\"none\");\n  $(\".register-box\").css(\"display\",\"none\");\n}\n```\n\n\n\n### express框架部分\n\n#### 服务器运行\n\n首先，这一部分要想跑起来的代码\n\n```js\nvar server = app.listen(8888, function () {\n \n  var host = server.address().address\n  var port = server.address().port\n \n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n \n})\n```\n\n端口号为8888，同时输出对应访问地址\n\n#### 设置路由\n\n然后设置相应路由，即访问不同地址的时候返回给前端的内容不同\n\n\n```js\napp.get('/', function (req, res) {\n  res.sendFile(__dirname + \"/public/\" + \"index.html\");\n})\n\napp.post('/process_login',function (req, res) {\n \n   console.log(req.body.username);\n   console.log(req.body.password);\n   if(req.body.username === \"xiaoqi\" && req.body.password === \"1111\") {\n       res.end(JSON.stringify(dataSuccess));\n   } else {\n        res.end(JSON.stringify(dataError));\n   }   \n})\n\n//调用与数据库交互的方法\napp.post('/process_register',function (req, res) {\n \n   console.log(req.body.username);\n   console.log(req.body.password);\n   userDao.add(req, res);\n     \n})\n```\n\n* sendFile方法返回一个文件\n\n* get方法时要返回数据给前端需要使用req.query来获取URL的查询参数串 \n\n* post方法使用req.body获得请求主体 \n\n* 然后返回给前端的要是JSON格式转成字符串的格式\n\n* 此处还未使用mysql，所以假定了一个账号和密码方便此时的测试\n\n\n#### 设置静态文件\n\n当完成上述部分之后会发现相应的css与js内容并未配置到相应html文件中，在express提供了内置的中间件express.static来设置静态文件，例如将相应的文件都放在public目录下。\n\n```js\napp.use(express.static('public'));\n```\n\n使用一行简单的命令即可\n\n\n#### json解析\n\n当运行的时候会发现使用ajax提交的数据无法被解析，那么可以使用express中的一个bodyParser中间件来进行解析，简单的两行代码\n\n```js \n// 添加json解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n```\n\n* 使用之前要引入`var bodyParser = require('body-parser');`\n\n### 登陆逻辑\n\n这部分比较的没什么新的要整理的，主要就是ajax传值的时候记得用`JSON.stringify`把json格式转成字符串。\n\n\n### mysql数据库部分\n\n数据库部分为了使项目看起来更有层次，多添加了两个文件夹，conf用来放配置文件，dao用来放与数据库交互的部分\n\n#### 创建mysql表\n\n```sql\nSET NAMES utf8;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n--  Table structure for `websites`\n-- ----------------------------\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) NOT NULL DEFAULT '' COMMENT '用户名',\n  `password` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n--  Records of `websites`\n-- ----------------------------\nBEGIN;\nINSERT INTO `users` VALUES ('1', 'xiaoqi', '1111');\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n只有三个值，分别是id，username和password非常的简单\n\n#### conf中数据库配置文件\n\n```js \n// conf/db,js\n// MySQL数据库连接配置\n\nmodule.exports = {\n  mysql: {\n    host: 'localhost',\n    user: 'root',\n    password: '1111',\n    port: '3306',\n    database: 'login_information'\n  }\n};\n```\n\n#### dao中数据库命令编写\n\n```js\nvar user = {\n  insert: 'INSERT INTO users(id, username, password) VALUE(0,?,?)',\n  update: 'update users set username=?, password=? where id=?',\n  delete: 'delete form users where id=?',\n  queryById: 'select * from users where id=?',\n  queryAll: 'select * from users'\n};\n\nmodule.exports = user;\n```\n\n#### dao中与数据库交互\n\n```js \n//dao/userDao.js\n//实现与Mysql交互\nvar mysql = require('mysql');\nvar $conf = require('../conf/db');\nvar $sql = require('./userSql');\n\n// var connection = mysql.createConnection($conf.mysql);\nvar pool = mysql.createPool( $conf.mysql );\n//向前端返回结果\nvar jsonWrite = function(res, ret) {\n  if(typeof ret === 'undefined') {\n    console.log(\"ret === undefined\");\n    console.log(\"ret =\" + ret);\n    res.end(JSON.stringify({\n      status: '2',\n      msg: '操作失败'\n    }));\n  } else {\n    console.log(\"ret !== undefined\");\n    console.log(ret);\n    res.end(JSON.stringify(ret));\n  }\n};\n\nmodule.exports = {\n  add: function(req, res) {\n    console.log(\"add方法运行\");\n    pool.getConnection(function(err, connection) {\n      if(err) {\n        // console.log(\"pool报错\");\n        throw err;\n      }\n      var param = req.body;\n      connection.query($sql.insert, [param.username, param.password], function(err, result) {\n        if(result) {\n          result = {\n            status: 200,\n            msg: '增加成功'\n          };\n        }\n\n        //以json形式，把操作结果返回给前端\n        jsonWrite(res, result);\n\n        // 释放连接 \n        connection.release();\n      })\n    })\n  }\n}\n```\n\n* 数据库这部分代码整合了网上的代码，并加上了我自己的内容，但是对于其中数据库部分的一些原理可能不是很了解，比如说pool连接池\n\n* query方法就类似于直接在命令行中敲sql命令\n\n可以在数据库中查询，每当注册新用户之后，确实发现数据库中新增了相应的数据，那么这个项目的核心已经基本完成了。\n\n\n## 后记\n\n整理这篇文章的时候大概已经是做完这个项目一周之后的事情了，法相其中的一些小细节已经忘了，只能整理一些大概的内容，感觉效果并不是非常的好，所以以后在做完项目的时候一定要第一时间整理，才能达到最好的效果。","source":"_posts/10. Express+MySQL实现登陆界面.md","raw":"---\ntitle: Express+MySQL实现登陆界面\ndate: 2018-03-10 16:49:58\ntoc: true\ncategories:\n- 项目\ntags:\n- 项目\n- Express\n- MySQL\n---\n\n最近连着整理了好几篇博客，这些都是前一段时间做的东西，希望拿出来整理一下，加深印象。\n\n之前看了一些nodejs，然后希望做出来点东西来实践，然后刚好在掘金上看到一个很棒的登陆效果，于是把他复现的同时也顺手做了个和后端交互的部分，就是注册账号，和登陆账号这么个简单的功能。然后发现express框架真的很好用，nodejs这块就采用了express框架来写，数据库用了Mysql。\n\n<!--more-->\n\n## 页面展示\n\n感觉还是有点小炫酷的，登陆页面是一个动态效果，一个方块气泡上升的效果。\n\n登陆界面\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_1.jpg\" height=\"300px\">\n\n注册界面\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_2.jpg\" height=\"300px\">\n\n## 技术细节\n\n### 前端效果部分\n\n#### 气泡效果\n\n主要就是一层一层的往上压，使用z-index来控制谁在上面，该效果则是气泡在背景上面。\n\n```html\n<ul class=\"bg-bubbles\">\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n```\n\ncss代码选取部分，其他的可以自己定义\n```css \nul li {\n  position: absolute;\n  z-index: 5;\n  list-style: none;\n  position: absolute;\n  bottom: -160px;\n  width: 40px;\n  height: 40px;\n  background-color: rgba(255, 255, 255, 0.15);\n  animation: square 25s infinite;    //依次为动画名称，时间，播放次数（无限）\n  transition-timing-function: linear;  //速度曲线（从头到尾相同）\n  &:nth-child(1) {\n    left: 10%;\n  }\n  &:nth-child(2) {\n    left: 20%;\n    width: 90px;\n    height: 90px;\n    animation-delay: 2s;\n    animation-duration: 17s;\n  }\n  //以上自己定义\n\n\n  //动画执行\n  @keyframes square {\n    0% {\n      transform: translateY(-700px);\n    }\n        100% {\n          transform: translateY(-700px) rotate(600deg);\n        }\n  }\n```\n\n上面代码使用less写的，less语法很简单，相比于sass应该来说语法少了很多，可以使用Sublime Text的插件来实现自动编译成css的效果，或者也可以使用webpack，gulp等自动胡工具通过编写任务来实现编译。\n\n* 背景使用`background-image: linear-gradient( 135deg, #FFF6B7 10%, #F6416C 100%);`来分别控制颜色渐变方向，两个颜色\n\n* 气泡的上升是通过`translateY()`来控制的\n\n* 气泡的旋转是通过`rotate()`来控制的\n\n* 但是有一处不知道为什么，气泡为什么会在最上面疑似停留一会才消失的效果，倘若是因为`transition-timing-function: `控制速度曲线的原因的话，那么此处设置的是`linear`应该是一直平均速度运行，为什么在最后会很慢呢。暂未解决\n\n#### 弹窗效果\n\n原理很简单，当用户点击注册新账号的时候会调用一个函数，改函数会将一个之前写好的并用display:none隐藏的div块重新改为display:block使之重新显现。同时也可以在之前写好一个大的div并用z-index控制层叠位置来使整个背景遮罩变暗\n\n```html \n//背景遮罩\n<div class=\"overlay\"></div>\n\n//注册窗口\n<div class=\"register-box\">\n  <div class=\"close-box\"></div>\n  <div class=\"register-content\">\n    <div class=\"register-username\">\n      <input type=\"text\" placeholder=\"请输入用户名\" id=\"register-username\">\n    </div>\n    <div class=\"register-password\">\n      <input type=\"password\" placeholder=\"请输入密码\" id=\"register-password\">\n    </div>\n    <div  class=\"register-repassword\">\n      <input type=\"password\" placeholder=\"请再次输入密码\" id=\"register-repassword\">\n    </div>\n    <div class=\"register-button\">\n      <button>立即注册</button>\n    </div>\n  </div>\n</div>\n```\n\n```js \nvar showRegister = function() {\n  console.log(\"s\");\n  $(\".overlay\").css(\"display\",\"block\");\n  $(\".register-box\").css(\"display\",\"block\");\n}\n\nvar closeRegister = function() {\n  $(\".overlay\").css(\"display\",\"none\");\n  $(\".register-box\").css(\"display\",\"none\");\n}\n```\n\n\n\n### express框架部分\n\n#### 服务器运行\n\n首先，这一部分要想跑起来的代码\n\n```js\nvar server = app.listen(8888, function () {\n \n  var host = server.address().address\n  var port = server.address().port\n \n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n \n})\n```\n\n端口号为8888，同时输出对应访问地址\n\n#### 设置路由\n\n然后设置相应路由，即访问不同地址的时候返回给前端的内容不同\n\n\n```js\napp.get('/', function (req, res) {\n  res.sendFile(__dirname + \"/public/\" + \"index.html\");\n})\n\napp.post('/process_login',function (req, res) {\n \n   console.log(req.body.username);\n   console.log(req.body.password);\n   if(req.body.username === \"xiaoqi\" && req.body.password === \"1111\") {\n       res.end(JSON.stringify(dataSuccess));\n   } else {\n        res.end(JSON.stringify(dataError));\n   }   \n})\n\n//调用与数据库交互的方法\napp.post('/process_register',function (req, res) {\n \n   console.log(req.body.username);\n   console.log(req.body.password);\n   userDao.add(req, res);\n     \n})\n```\n\n* sendFile方法返回一个文件\n\n* get方法时要返回数据给前端需要使用req.query来获取URL的查询参数串 \n\n* post方法使用req.body获得请求主体 \n\n* 然后返回给前端的要是JSON格式转成字符串的格式\n\n* 此处还未使用mysql，所以假定了一个账号和密码方便此时的测试\n\n\n#### 设置静态文件\n\n当完成上述部分之后会发现相应的css与js内容并未配置到相应html文件中，在express提供了内置的中间件express.static来设置静态文件，例如将相应的文件都放在public目录下。\n\n```js\napp.use(express.static('public'));\n```\n\n使用一行简单的命令即可\n\n\n#### json解析\n\n当运行的时候会发现使用ajax提交的数据无法被解析，那么可以使用express中的一个bodyParser中间件来进行解析，简单的两行代码\n\n```js \n// 添加json解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n```\n\n* 使用之前要引入`var bodyParser = require('body-parser');`\n\n### 登陆逻辑\n\n这部分比较的没什么新的要整理的，主要就是ajax传值的时候记得用`JSON.stringify`把json格式转成字符串。\n\n\n### mysql数据库部分\n\n数据库部分为了使项目看起来更有层次，多添加了两个文件夹，conf用来放配置文件，dao用来放与数据库交互的部分\n\n#### 创建mysql表\n\n```sql\nSET NAMES utf8;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n--  Table structure for `websites`\n-- ----------------------------\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) NOT NULL DEFAULT '' COMMENT '用户名',\n  `password` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n--  Records of `websites`\n-- ----------------------------\nBEGIN;\nINSERT INTO `users` VALUES ('1', 'xiaoqi', '1111');\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n只有三个值，分别是id，username和password非常的简单\n\n#### conf中数据库配置文件\n\n```js \n// conf/db,js\n// MySQL数据库连接配置\n\nmodule.exports = {\n  mysql: {\n    host: 'localhost',\n    user: 'root',\n    password: '1111',\n    port: '3306',\n    database: 'login_information'\n  }\n};\n```\n\n#### dao中数据库命令编写\n\n```js\nvar user = {\n  insert: 'INSERT INTO users(id, username, password) VALUE(0,?,?)',\n  update: 'update users set username=?, password=? where id=?',\n  delete: 'delete form users where id=?',\n  queryById: 'select * from users where id=?',\n  queryAll: 'select * from users'\n};\n\nmodule.exports = user;\n```\n\n#### dao中与数据库交互\n\n```js \n//dao/userDao.js\n//实现与Mysql交互\nvar mysql = require('mysql');\nvar $conf = require('../conf/db');\nvar $sql = require('./userSql');\n\n// var connection = mysql.createConnection($conf.mysql);\nvar pool = mysql.createPool( $conf.mysql );\n//向前端返回结果\nvar jsonWrite = function(res, ret) {\n  if(typeof ret === 'undefined') {\n    console.log(\"ret === undefined\");\n    console.log(\"ret =\" + ret);\n    res.end(JSON.stringify({\n      status: '2',\n      msg: '操作失败'\n    }));\n  } else {\n    console.log(\"ret !== undefined\");\n    console.log(ret);\n    res.end(JSON.stringify(ret));\n  }\n};\n\nmodule.exports = {\n  add: function(req, res) {\n    console.log(\"add方法运行\");\n    pool.getConnection(function(err, connection) {\n      if(err) {\n        // console.log(\"pool报错\");\n        throw err;\n      }\n      var param = req.body;\n      connection.query($sql.insert, [param.username, param.password], function(err, result) {\n        if(result) {\n          result = {\n            status: 200,\n            msg: '增加成功'\n          };\n        }\n\n        //以json形式，把操作结果返回给前端\n        jsonWrite(res, result);\n\n        // 释放连接 \n        connection.release();\n      })\n    })\n  }\n}\n```\n\n* 数据库这部分代码整合了网上的代码，并加上了我自己的内容，但是对于其中数据库部分的一些原理可能不是很了解，比如说pool连接池\n\n* query方法就类似于直接在命令行中敲sql命令\n\n可以在数据库中查询，每当注册新用户之后，确实发现数据库中新增了相应的数据，那么这个项目的核心已经基本完成了。\n\n\n## 后记\n\n整理这篇文章的时候大概已经是做完这个项目一周之后的事情了，法相其中的一些小细节已经忘了，只能整理一些大概的内容，感觉效果并不是非常的好，所以以后在做完项目的时候一定要第一时间整理，才能达到最好的效果。","slug":"10. Express+MySQL实现登陆界面","published":1,"updated":"2021-09-30T06:45:55.670Z","_id":"cku41le8c0001idp2c6u17gsr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近连着整理了好几篇博客，这些都是前一段时间做的东西，希望拿出来整理一下，加深印象。</p>\n<p>之前看了一些nodejs，然后希望做出来点东西来实践，然后刚好在掘金上看到一个很棒的登陆效果，于是把他复现的同时也顺手做了个和后端交互的部分，就是注册账号，和登陆账号这么个简单的功能。然后发现express框架真的很好用，nodejs这块就采用了express框架来写，数据库用了Mysql。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"页面展示\"><a href=\"#页面展示\" class=\"headerlink\" title=\"页面展示\"></a>页面展示</h2><p>感觉还是有点小炫酷的，登陆页面是一个动态效果，一个方块气泡上升的效果。</p>\n<p>登陆界面<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_1.jpg\" height=\"300px\"></p>\n<p>注册界面<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_2.jpg\" height=\"300px\"></p>\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><h3 id=\"前端效果部分\"><a href=\"#前端效果部分\" class=\"headerlink\" title=\"前端效果部分\"></a>前端效果部分</h3><h4 id=\"气泡效果\"><a href=\"#气泡效果\" class=\"headerlink\" title=\"气泡效果\"></a>气泡效果</h4><p>主要就是一层一层的往上压，使用z-index来控制谁在上面，该效果则是气泡在背景上面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-bubbles&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码选取部分，其他的可以自己定义</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: -<span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: square <span class=\"number\">25s</span> infinite;    //依次为动画名称，时间，播放次数（无限）</span><br><span class=\"line\">  <span class=\"attribute\">transition-timing-function</span>: linear;  //速度曲线（从头到尾相同）</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">17s</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //以上自己定义</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //动画执行</span><br><span class=\"line\">  <span class=\"keyword\">@keyframes</span> square &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">700px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">700px</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">600deg</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码使用less写的，less语法很简单，相比于sass应该来说语法少了很多，可以使用Sublime Text的插件来实现自动编译成css的效果，或者也可以使用webpack，gulp等自动胡工具通过编写任务来实现编译。</p>\n<ul>\n<li><p>背景使用<code>background-image: linear-gradient( 135deg, #FFF6B7 10%, #F6416C 100%);</code>来分别控制颜色渐变方向，两个颜色</p>\n</li>\n<li><p>气泡的上升是通过<code>translateY()</code>来控制的</p>\n</li>\n<li><p>气泡的旋转是通过<code>rotate()</code>来控制的</p>\n</li>\n<li><p>但是有一处不知道为什么，气泡为什么会在最上面疑似停留一会才消失的效果，倘若是因为<code>transition-timing-function: </code>控制速度曲线的原因的话，那么此处设置的是<code>linear</code>应该是一直平均速度运行，为什么在最后会很慢呢。暂未解决</p>\n</li>\n</ul>\n<h4 id=\"弹窗效果\"><a href=\"#弹窗效果\" class=\"headerlink\" title=\"弹窗效果\"></a>弹窗效果</h4><p>原理很简单，当用户点击注册新账号的时候会调用一个函数，改函数会将一个之前写好的并用display:none隐藏的div块重新改为display:block使之重新显现。同时也可以在之前写好一个大的div并用z-index控制层叠位置来使整个背景遮罩变暗</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//背景遮罩</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;overlay&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//注册窗口</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-username&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入用户名&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-password&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入密码&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-repassword&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请再次输入密码&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-repassword&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-button&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>立即注册<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> showRegister = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.overlay&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;block&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.register-box&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;block&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> closeRegister = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.overlay&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.register-box&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"express框架部分\"><a href=\"#express框架部分\" class=\"headerlink\" title=\"express框架部分\"></a>express框架部分</h3><h4 id=\"服务器运行\"><a href=\"#服务器运行\" class=\"headerlink\" title=\"服务器运行\"></a>服务器运行</h4><p>首先，这一部分要想跑起来的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8888</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</span><br><span class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>端口号为8888，同时输出对应访问地址</p>\n<h4 id=\"设置路由\"><a href=\"#设置路由\" class=\"headerlink\" title=\"设置路由\"></a>设置路由</h4><p>然后设置相应路由，即访问不同地址的时候返回给前端的内容不同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.sendFile(__dirname + <span class=\"string\">&quot;/public/&quot;</span> + <span class=\"string\">&quot;index.html&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/process_login&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.username);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.password);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(req.body.username === <span class=\"string\">&quot;xiaoqi&quot;</span> &amp;&amp; req.body.password === <span class=\"string\">&quot;1111&quot;</span>) &#123;</span><br><span class=\"line\">       res.end(<span class=\"built_in\">JSON</span>.stringify(dataSuccess));</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end(<span class=\"built_in\">JSON</span>.stringify(dataError));</span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用与数据库交互的方法</span></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/process_register&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.username);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.password);</span><br><span class=\"line\">   userDao.add(req, res);</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>sendFile方法返回一个文件</p>\n</li>\n<li><p>get方法时要返回数据给前端需要使用req.query来获取URL的查询参数串 </p>\n</li>\n<li><p>post方法使用req.body获得请求主体 </p>\n</li>\n<li><p>然后返回给前端的要是JSON格式转成字符串的格式</p>\n</li>\n<li><p>此处还未使用mysql，所以假定了一个账号和密码方便此时的测试</p>\n</li>\n</ul>\n<h4 id=\"设置静态文件\"><a href=\"#设置静态文件\" class=\"headerlink\" title=\"设置静态文件\"></a>设置静态文件</h4><p>当完成上述部分之后会发现相应的css与js内容并未配置到相应html文件中，在express提供了内置的中间件express.static来设置静态文件，例如将相应的文件都放在public目录下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>使用一行简单的命令即可</p>\n<h4 id=\"json解析\"><a href=\"#json解析\" class=\"headerlink\" title=\"json解析\"></a>json解析</h4><p>当运行的时候会发现使用ajax提交的数据无法被解析，那么可以使用express中的一个bodyParser中间件来进行解析，简单的两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加json解析</span></span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">false</span>&#125;));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用之前要引入<code>var bodyParser = require(&#39;body-parser&#39;);</code></li>\n</ul>\n<h3 id=\"登陆逻辑\"><a href=\"#登陆逻辑\" class=\"headerlink\" title=\"登陆逻辑\"></a>登陆逻辑</h3><p>这部分比较的没什么新的要整理的，主要就是ajax传值的时候记得用<code>JSON.stringify</code>把json格式转成字符串。</p>\n<h3 id=\"mysql数据库部分\"><a href=\"#mysql数据库部分\" class=\"headerlink\" title=\"mysql数据库部分\"></a>mysql数据库部分</h3><p>数据库部分为了使项目看起来更有层次，多添加了两个文件夹，conf用来放配置文件，dao用来放与数据库交互的部分</p>\n<h4 id=\"创建mysql表\"><a href=\"#创建mysql表\" class=\"headerlink\" title=\"创建mysql表\"></a>创建mysql表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> NAMES utf8;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">--  Table structure for `websites`</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `users`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `users` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `username` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">--  Records of `websites`</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `users` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;xiaoqi&#x27;</span>, <span class=\"string\">&#x27;1111&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只有三个值，分别是id，username和password非常的简单</p>\n<h4 id=\"conf中数据库配置文件\"><a href=\"#conf中数据库配置文件\" class=\"headerlink\" title=\"conf中数据库配置文件\"></a>conf中数据库配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// conf/db,js</span></span><br><span class=\"line\"><span class=\"comment\">// MySQL数据库连接配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;1111&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">&#x27;login_information&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao中数据库命令编写\"><a href=\"#dao中数据库命令编写\" class=\"headerlink\" title=\"dao中数据库命令编写\"></a>dao中数据库命令编写</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">insert</span>: <span class=\"string\">&#x27;INSERT INTO users(id, username, password) VALUE(0,?,?)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">update</span>: <span class=\"string\">&#x27;update users set username=?, password=? where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">delete</span>: <span class=\"string\">&#x27;delete form users where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">queryById</span>: <span class=\"string\">&#x27;select * from users where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">queryAll</span>: <span class=\"string\">&#x27;select * from users&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = user;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao中与数据库交互\"><a href=\"#dao中与数据库交互\" class=\"headerlink\" title=\"dao中与数据库交互\"></a>dao中与数据库交互</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dao/userDao.js</span></span><br><span class=\"line\"><span class=\"comment\">//实现与Mysql交互</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $conf = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../conf/db&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $sql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./userSql&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var connection = mysql.createConnection($conf.mysql);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool( $conf.mysql );</span><br><span class=\"line\"><span class=\"comment\">//向前端返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonWrite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, ret</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret === undefined&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret =&quot;</span> + ret);</span><br><span class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>: <span class=\"string\">&#x27;2&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;操作失败&#x27;</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret !== undefined&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(ret));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;add方法运行&quot;</span>);</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;pool报错&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> param = req.body;</span><br><span class=\"line\">      connection.query($sql.insert, [param.username, param.password], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result) &#123;</span><br><span class=\"line\">          result = &#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;增加成功&#x27;</span></span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//以json形式，把操作结果返回给前端</span></span><br><span class=\"line\">        jsonWrite(res, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放连接 </span></span><br><span class=\"line\">        connection.release();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>数据库这部分代码整合了网上的代码，并加上了我自己的内容，但是对于其中数据库部分的一些原理可能不是很了解，比如说pool连接池</p>\n</li>\n<li><p>query方法就类似于直接在命令行中敲sql命令</p>\n</li>\n</ul>\n<p>可以在数据库中查询，每当注册新用户之后，确实发现数据库中新增了相应的数据，那么这个项目的核心已经基本完成了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>整理这篇文章的时候大概已经是做完这个项目一周之后的事情了，法相其中的一些小细节已经忘了，只能整理一些大概的内容，感觉效果并不是非常的好，所以以后在做完项目的时候一定要第一时间整理，才能达到最好的效果。</p>\n","site":{"data":{}},"excerpt":"<p>最近连着整理了好几篇博客，这些都是前一段时间做的东西，希望拿出来整理一下，加深印象。</p>\n<p>之前看了一些nodejs，然后希望做出来点东西来实践，然后刚好在掘金上看到一个很棒的登陆效果，于是把他复现的同时也顺手做了个和后端交互的部分，就是注册账号，和登陆账号这么个简单的功能。然后发现express框架真的很好用，nodejs这块就采用了express框架来写，数据库用了Mysql。</p>","more":"<h2 id=\"页面展示\"><a href=\"#页面展示\" class=\"headerlink\" title=\"页面展示\"></a>页面展示</h2><p>感觉还是有点小炫酷的，登陆页面是一个动态效果，一个方块气泡上升的效果。</p>\n<p>登陆界面<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_1.jpg\" height=\"300px\"></p>\n<p>注册界面<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-10/display_2.jpg\" height=\"300px\"></p>\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><h3 id=\"前端效果部分\"><a href=\"#前端效果部分\" class=\"headerlink\" title=\"前端效果部分\"></a>前端效果部分</h3><h4 id=\"气泡效果\"><a href=\"#气泡效果\" class=\"headerlink\" title=\"气泡效果\"></a>气泡效果</h4><p>主要就是一层一层的往上压，使用z-index来控制谁在上面，该效果则是气泡在背景上面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-bubbles&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码选取部分，其他的可以自己定义</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: -<span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: square <span class=\"number\">25s</span> infinite;    //依次为动画名称，时间，播放次数（无限）</span><br><span class=\"line\">  <span class=\"attribute\">transition-timing-function</span>: linear;  //速度曲线（从头到尾相同）</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">17s</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //以上自己定义</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //动画执行</span><br><span class=\"line\">  <span class=\"keyword\">@keyframes</span> square &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">700px</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">700px</span>) <span class=\"built_in\">rotate</span>(<span class=\"number\">600deg</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码使用less写的，less语法很简单，相比于sass应该来说语法少了很多，可以使用Sublime Text的插件来实现自动编译成css的效果，或者也可以使用webpack，gulp等自动胡工具通过编写任务来实现编译。</p>\n<ul>\n<li><p>背景使用<code>background-image: linear-gradient( 135deg, #FFF6B7 10%, #F6416C 100%);</code>来分别控制颜色渐变方向，两个颜色</p>\n</li>\n<li><p>气泡的上升是通过<code>translateY()</code>来控制的</p>\n</li>\n<li><p>气泡的旋转是通过<code>rotate()</code>来控制的</p>\n</li>\n<li><p>但是有一处不知道为什么，气泡为什么会在最上面疑似停留一会才消失的效果，倘若是因为<code>transition-timing-function: </code>控制速度曲线的原因的话，那么此处设置的是<code>linear</code>应该是一直平均速度运行，为什么在最后会很慢呢。暂未解决</p>\n</li>\n</ul>\n<h4 id=\"弹窗效果\"><a href=\"#弹窗效果\" class=\"headerlink\" title=\"弹窗效果\"></a>弹窗效果</h4><p>原理很简单，当用户点击注册新账号的时候会调用一个函数，改函数会将一个之前写好的并用display:none隐藏的div块重新改为display:block使之重新显现。同时也可以在之前写好一个大的div并用z-index控制层叠位置来使整个背景遮罩变暗</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//背景遮罩</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;overlay&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//注册窗口</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-username&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入用户名&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-username&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-password&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入密码&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-repassword&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请再次输入密码&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register-repassword&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;register-button&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>立即注册<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> showRegister = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.overlay&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;block&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.register-box&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;block&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> closeRegister = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.overlay&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.register-box&quot;</span>).css(<span class=\"string\">&quot;display&quot;</span>,<span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"express框架部分\"><a href=\"#express框架部分\" class=\"headerlink\" title=\"express框架部分\"></a>express框架部分</h3><h4 id=\"服务器运行\"><a href=\"#服务器运行\" class=\"headerlink\" title=\"服务器运行\"></a>服务器运行</h4><p>首先，这一部分要想跑起来的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8888</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</span><br><span class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>端口号为8888，同时输出对应访问地址</p>\n<h4 id=\"设置路由\"><a href=\"#设置路由\" class=\"headerlink\" title=\"设置路由\"></a>设置路由</h4><p>然后设置相应路由，即访问不同地址的时候返回给前端的内容不同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.sendFile(__dirname + <span class=\"string\">&quot;/public/&quot;</span> + <span class=\"string\">&quot;index.html&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/process_login&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.username);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.password);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(req.body.username === <span class=\"string\">&quot;xiaoqi&quot;</span> &amp;&amp; req.body.password === <span class=\"string\">&quot;1111&quot;</span>) &#123;</span><br><span class=\"line\">       res.end(<span class=\"built_in\">JSON</span>.stringify(dataSuccess));</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end(<span class=\"built_in\">JSON</span>.stringify(dataError));</span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用与数据库交互的方法</span></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/process_register&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.username);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(req.body.password);</span><br><span class=\"line\">   userDao.add(req, res);</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>sendFile方法返回一个文件</p>\n</li>\n<li><p>get方法时要返回数据给前端需要使用req.query来获取URL的查询参数串 </p>\n</li>\n<li><p>post方法使用req.body获得请求主体 </p>\n</li>\n<li><p>然后返回给前端的要是JSON格式转成字符串的格式</p>\n</li>\n<li><p>此处还未使用mysql，所以假定了一个账号和密码方便此时的测试</p>\n</li>\n</ul>\n<h4 id=\"设置静态文件\"><a href=\"#设置静态文件\" class=\"headerlink\" title=\"设置静态文件\"></a>设置静态文件</h4><p>当完成上述部分之后会发现相应的css与js内容并未配置到相应html文件中，在express提供了内置的中间件express.static来设置静态文件，例如将相应的文件都放在public目录下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>使用一行简单的命令即可</p>\n<h4 id=\"json解析\"><a href=\"#json解析\" class=\"headerlink\" title=\"json解析\"></a>json解析</h4><p>当运行的时候会发现使用ajax提交的数据无法被解析，那么可以使用express中的一个bodyParser中间件来进行解析，简单的两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加json解析</span></span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">false</span>&#125;));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用之前要引入<code>var bodyParser = require(&#39;body-parser&#39;);</code></li>\n</ul>\n<h3 id=\"登陆逻辑\"><a href=\"#登陆逻辑\" class=\"headerlink\" title=\"登陆逻辑\"></a>登陆逻辑</h3><p>这部分比较的没什么新的要整理的，主要就是ajax传值的时候记得用<code>JSON.stringify</code>把json格式转成字符串。</p>\n<h3 id=\"mysql数据库部分\"><a href=\"#mysql数据库部分\" class=\"headerlink\" title=\"mysql数据库部分\"></a>mysql数据库部分</h3><p>数据库部分为了使项目看起来更有层次，多添加了两个文件夹，conf用来放配置文件，dao用来放与数据库交互的部分</p>\n<h4 id=\"创建mysql表\"><a href=\"#创建mysql表\" class=\"headerlink\" title=\"创建mysql表\"></a>创建mysql表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> NAMES utf8;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">--  Table structure for `websites`</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `users`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `users` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `username` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">--  Records of `websites`</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `users` <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;xiaoqi&#x27;</span>, <span class=\"string\">&#x27;1111&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只有三个值，分别是id，username和password非常的简单</p>\n<h4 id=\"conf中数据库配置文件\"><a href=\"#conf中数据库配置文件\" class=\"headerlink\" title=\"conf中数据库配置文件\"></a>conf中数据库配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// conf/db,js</span></span><br><span class=\"line\"><span class=\"comment\">// MySQL数据库连接配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;1111&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">&#x27;login_information&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao中数据库命令编写\"><a href=\"#dao中数据库命令编写\" class=\"headerlink\" title=\"dao中数据库命令编写\"></a>dao中数据库命令编写</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">insert</span>: <span class=\"string\">&#x27;INSERT INTO users(id, username, password) VALUE(0,?,?)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">update</span>: <span class=\"string\">&#x27;update users set username=?, password=? where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">delete</span>: <span class=\"string\">&#x27;delete form users where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">queryById</span>: <span class=\"string\">&#x27;select * from users where id=?&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">queryAll</span>: <span class=\"string\">&#x27;select * from users&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = user;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao中与数据库交互\"><a href=\"#dao中与数据库交互\" class=\"headerlink\" title=\"dao中与数据库交互\"></a>dao中与数据库交互</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dao/userDao.js</span></span><br><span class=\"line\"><span class=\"comment\">//实现与Mysql交互</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mysql&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $conf = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../conf/db&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $sql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./userSql&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var connection = mysql.createConnection($conf.mysql);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool( $conf.mysql );</span><br><span class=\"line\"><span class=\"comment\">//向前端返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonWrite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, ret</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret === undefined&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret =&quot;</span> + ret);</span><br><span class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>: <span class=\"string\">&#x27;2&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;操作失败&#x27;</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ret !== undefined&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret);</span><br><span class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(ret));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;add方法运行&quot;</span>);</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, connection</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;pool报错&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> param = req.body;</span><br><span class=\"line\">      connection.query($sql.insert, [param.username, param.password], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(result) &#123;</span><br><span class=\"line\">          result = &#123;</span><br><span class=\"line\">            <span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;增加成功&#x27;</span></span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//以json形式，把操作结果返回给前端</span></span><br><span class=\"line\">        jsonWrite(res, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放连接 </span></span><br><span class=\"line\">        connection.release();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>数据库这部分代码整合了网上的代码，并加上了我自己的内容，但是对于其中数据库部分的一些原理可能不是很了解，比如说pool连接池</p>\n</li>\n<li><p>query方法就类似于直接在命令行中敲sql命令</p>\n</li>\n</ul>\n<p>可以在数据库中查询，每当注册新用户之后，确实发现数据库中新增了相应的数据，那么这个项目的核心已经基本完成了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>整理这篇文章的时候大概已经是做完这个项目一周之后的事情了，法相其中的一些小细节已经忘了，只能整理一些大概的内容，感觉效果并不是非常的好，所以以后在做完项目的时候一定要第一时间整理，才能达到最好的效果。</p>"},{"title":"如何实现一个轮播图","date":"2018-03-14T15:14:20.000Z","toc":true,"_content":"\n做项目的时候刚好要做轮播图，之前在微信小程序上做过，但是那个非常的简单，因为很多功能已经封装在了API里面，所以只需要指定几张图片就能达成效果。现在将使用JQuery来实现轮播图效果。\n\n<!--more-->\n\n## 轮播图技术实现\n\n### 轮播图效果\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/effect.jpg\" height=\"300px\">\n\n轮播图下方有每个图的按钮，鼠标放在上面即会跳转到相应页面，而且当鼠标停留在图片上的时候，轮播图将会暂停，以便当用户被某个图片吸引时不至于跳到另一张图片。\n\n### 原理\n\n轮播图就是将所有的图片使用float来将所有的图片都放成一行上，然后通过js控制图片的移动，原理图如下:\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/principle.jpg\" height=\"300px\">\n\n然后还有一处要注意的地方，就是当移动到最后一张图的时候，为了让其依然向左拉动，必须在最后加上复制的第一张图，使之连贯，动画结束后重新定位到起点，然后将最后一张删去\n\n### 代码部分\n\n#### html代码\n\n```html \n<div class=\"banner-wrapper\">\n  <!-- banner图像 -->\n  <div class=\"banner-focus\">\n    <ul>\n      <li><a href=\"#\"><div class=\"banner-img banner-img0\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img1\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img2\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img3\"></div></a></li>\n    </ul>\n  </div>\n\n  <!-- banner切换按钮 -->\n  <div class=\"banner-btn\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </div>\n</div>\n```\n\n这里图片并没有采用img标签，而是选择了div标签，然后使用background属性的url指定图片地址，这种方法的好处是不用指定图片的大小，通过设置background-size可以让图片达到充满目标而且多余的部分不显示。<s>因此以后尽量不要使用img标签。</s>应该根据实际情况选择，当图片不是内容的一部分时使用background\n\n#### less代码\n\n```css\n.banner-wrapper {\n  /*轮播图*/\n  padding-top: 80px;\n  height: 550px;\n  // background-color: #DB6A6A;\n  position: relative;\n\n  .banner-focus {\n    height: 550px;\n    width: 100%;\n    // background-color: #351818;\n    overflow: hidden;\n    position: relative;\n\n    ul {\n      position: absolute;\n      width: 100%;\n\n      li {\n        float: left;\n        width: 100%;\n        height: 550px;\n        list-style: none;\n\n        .banner-img {\n          width: 100%;\n          height: 550px;\n        }\n\n        .banner-img0 {\n          /*后面改路径*/\n          background: url(\"./test/images/0.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img1 {\n          /*后面改路径*/\n          background: url(\"./test/images/1.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img2 {\n          /*后面改路径*/\n          background: url(\"./test/images/2.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img3 {\n          /*后面改路径*/\n          background: url(\"./test/images/3.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n      }\n    }\n\n  }\n\n  .banner-btn {\n    position: absolute;\n    bottom: 30px;\n    left: 50%;\n    margin-left: -52px;\n\n    span {\n      // position: absolute;\n      float: left;\n      width: 6px;\n      height: 6px;\n      background-color: #E0DFE0;\n      border-radius: 50%;\n      margin-right: 20px;\n      cursor: pointer;\n\n      &:hover {\n        background-color: #595959;\n      }\n    }\n  }\n}\n```\n\ncss部分需要注意的是\n* 最外层banner-wrapper用`position:relative`来给内层banner-focus的`position:absolute`定位\n\n* banner-focus需要使用`overflow:relative`来将多余的部分隐藏\n\n* 若想将内层元素用width百分比来表示，必须指定其父元素宽度才能成功\n\n* 设置background来让其自动填充，省去了切图的麻烦\n\n#### js代码\n```js \n//============================轮播图部分函数=====================\n/*轮播图主函数*/\nvar bannerRolling = function() {\n    var sWidth = $(\".banner-focus\").width(); //获取焦点图的宽度（显示面积）  \n    var len = $(\".banner-focus ul li\").length; //获取焦点图个数  \n    var index = 0;  \n    var picTimer;  \n\n    console.log(sWidth);\n    console.log(len);\n\n    //为小按钮添加鼠标滑入事件，以显示相应的内容  \n    $(\".banner-btn span\").mouseenter(function() {  \n        index = $(\".banner-btn span\").index(this);  \n        showPics(index, sWidth);\n        console.log(index, sWidth);\n        // console.log(\"按钮滑入\");  \n    });  \n\n    /*\n    本例为左右滚动，即所有li元素都是在同一排向左浮动，\n    所以这里需要计算出外围ul元素的宽度\n    */  \n    $(\".banner-focus ul\").css(\"width\",sWidth * (len+1));  \n\n    /*\n    因为图片未设置固定宽度，所以之前设置的100%会随着父元素变宽而撑大，\n    所以此处应该相应设置为父元素的1/(len+1)\n    */    \n    $(\".banner-focus ul li\").css(\"width\",sWidth * (len+1) / 5);\n\n\n    /*直接自动播放*/\n    picTimer = setInterval(function() {  \n        if(index === len) { //如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  \n            index = 0;  \n            showFirstPic(len, sWidth);\n        } else { //如果索引值不等于li元素个数，按普通状态切换，调用showPics()  \n            showPics(index, sWidth);  \n        }  \n        index++;  \n    },4000); //此2000代表自动播放的间隔，单位：毫秒 \n\n    //鼠标滑上焦点图时停止自动播放，滑出时开始自动播放  \n    $(\".banner-focus\").hover(function() {  \n        clearInterval(picTimer);  \n    },function() {  \n        picTimer = setInterval(function() {  \n            if(index === len) { //如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  \n                index = 0;  \n                showFirstPic(len, sWidth);\n            } else { //如果索引值不等于li元素个数，按普通状态切换，调用showPics()  \n                showPics(index, sWidth);  \n            }  \n            index++;  \n        },4000); //此2000代表自动播放的间隔，单位：毫秒  \n    }); \n\n}\n\n\n//显示图片函数，根据接收的index值显示相应的内容  \nfunction showPics(index, sWidth) { //普通切换  \n    var nowLeft = - (index * sWidth); //根据index值计算ul元素的left值  \n    $(\".banner-focus ul\").stop(true,false).animate({\"left\":nowLeft},500); //通过animate()调整ul元素滚动到计算出的position  \n    // $(\"#focus div.btn span\").animate({\"opacity\":\"0.4\"},300).eq(index).animate({\"opacity\":\"1\"},100); //为当前的按钮切换到选中的效果  \n}  \n\n//最后一张图自动切换到第一张图时专用  \nfunction showFirstPic(len, sWidth) { \n    $(\".banner-focus ul\").append($(\".banner-focus ul li:first\").clone());//为了达到从最右边到最左边还是往左移动效果，而不是往右移动  \n    var nowLeft = - (len * sWidth); //通过li元素个数计算ul元素的left值，也就是最后一个li元素的右边  \n    $(\".banner-focus ul\").stop(true,false).animate({\"left\":nowLeft},500,function() {  \n        //通过callback，在动画结束后把ul元素重新定位到起点，然后删除最后一个复制过去的元素  \n        $(\".banner-focus ul\").css(\"left\",\"0\");  \n        $(\".banner-focus ul li:last\").remove();  \n    });   \n    // $(\"#focus div.btn span\").animate({\"opacity\":\"0.4\"},300).eq(index).animate({\"opacity\":\"1\"},100); //为当前的按钮切换到选中的效果  \n}  \n```\n\n* setInterval()函数用来不断调用内容，为了让一开始轮播图自动滚动，要直接用setInterval函数然后实现鼠标聚焦内容的时候停止滚动，使之hover用clearInterval使其停止，然后用callback回调函数继续滚动\n\n* 滚动原理是通过`position:absolute`然后使用left来指定展示哪一张图片\n\n* 由于我并没有指定图像大小，所以我在此处设置了图像宽度为`width:100%`来自动调整，那么此时li的父元素ul会是所有图片宽度之和，根据`width:100%`会参照其父元素的原因，我在此处指定了li的宽度，为ul宽度的1/(len+1),len+1是因为会复制一张图片\n\n\n## 后记\n\n还有一种轮播图是用纯CSS效果写的，目前还没有细读代码，纯css的局限性是似乎不能指定显示哪一张图片，而是让其自动滚动。","source":"_posts/11. 如何实现一个轮播图.md","raw":"---\ntitle: 如何实现一个轮播图\ndate: 2018-03-14 23:14:20\ntoc: true\ncategories:\n- 前端\ntags:\n- CSS\n- JS\n- jQuery\n---\n\n做项目的时候刚好要做轮播图，之前在微信小程序上做过，但是那个非常的简单，因为很多功能已经封装在了API里面，所以只需要指定几张图片就能达成效果。现在将使用JQuery来实现轮播图效果。\n\n<!--more-->\n\n## 轮播图技术实现\n\n### 轮播图效果\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/effect.jpg\" height=\"300px\">\n\n轮播图下方有每个图的按钮，鼠标放在上面即会跳转到相应页面，而且当鼠标停留在图片上的时候，轮播图将会暂停，以便当用户被某个图片吸引时不至于跳到另一张图片。\n\n### 原理\n\n轮播图就是将所有的图片使用float来将所有的图片都放成一行上，然后通过js控制图片的移动，原理图如下:\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/principle.jpg\" height=\"300px\">\n\n然后还有一处要注意的地方，就是当移动到最后一张图的时候，为了让其依然向左拉动，必须在最后加上复制的第一张图，使之连贯，动画结束后重新定位到起点，然后将最后一张删去\n\n### 代码部分\n\n#### html代码\n\n```html \n<div class=\"banner-wrapper\">\n  <!-- banner图像 -->\n  <div class=\"banner-focus\">\n    <ul>\n      <li><a href=\"#\"><div class=\"banner-img banner-img0\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img1\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img2\"></div></a></li>\n      <li><a href=\"#\"><div class=\"banner-img banner-img3\"></div></a></li>\n    </ul>\n  </div>\n\n  <!-- banner切换按钮 -->\n  <div class=\"banner-btn\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </div>\n</div>\n```\n\n这里图片并没有采用img标签，而是选择了div标签，然后使用background属性的url指定图片地址，这种方法的好处是不用指定图片的大小，通过设置background-size可以让图片达到充满目标而且多余的部分不显示。<s>因此以后尽量不要使用img标签。</s>应该根据实际情况选择，当图片不是内容的一部分时使用background\n\n#### less代码\n\n```css\n.banner-wrapper {\n  /*轮播图*/\n  padding-top: 80px;\n  height: 550px;\n  // background-color: #DB6A6A;\n  position: relative;\n\n  .banner-focus {\n    height: 550px;\n    width: 100%;\n    // background-color: #351818;\n    overflow: hidden;\n    position: relative;\n\n    ul {\n      position: absolute;\n      width: 100%;\n\n      li {\n        float: left;\n        width: 100%;\n        height: 550px;\n        list-style: none;\n\n        .banner-img {\n          width: 100%;\n          height: 550px;\n        }\n\n        .banner-img0 {\n          /*后面改路径*/\n          background: url(\"./test/images/0.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img1 {\n          /*后面改路径*/\n          background: url(\"./test/images/1.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img2 {\n          /*后面改路径*/\n          background: url(\"./test/images/2.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n        .banner-img3 {\n          /*后面改路径*/\n          background: url(\"./test/images/3.jpg\") no-repeat center;\n          background-size: 100%;\n        }\n\n      }\n    }\n\n  }\n\n  .banner-btn {\n    position: absolute;\n    bottom: 30px;\n    left: 50%;\n    margin-left: -52px;\n\n    span {\n      // position: absolute;\n      float: left;\n      width: 6px;\n      height: 6px;\n      background-color: #E0DFE0;\n      border-radius: 50%;\n      margin-right: 20px;\n      cursor: pointer;\n\n      &:hover {\n        background-color: #595959;\n      }\n    }\n  }\n}\n```\n\ncss部分需要注意的是\n* 最外层banner-wrapper用`position:relative`来给内层banner-focus的`position:absolute`定位\n\n* banner-focus需要使用`overflow:relative`来将多余的部分隐藏\n\n* 若想将内层元素用width百分比来表示，必须指定其父元素宽度才能成功\n\n* 设置background来让其自动填充，省去了切图的麻烦\n\n#### js代码\n```js \n//============================轮播图部分函数=====================\n/*轮播图主函数*/\nvar bannerRolling = function() {\n    var sWidth = $(\".banner-focus\").width(); //获取焦点图的宽度（显示面积）  \n    var len = $(\".banner-focus ul li\").length; //获取焦点图个数  \n    var index = 0;  \n    var picTimer;  \n\n    console.log(sWidth);\n    console.log(len);\n\n    //为小按钮添加鼠标滑入事件，以显示相应的内容  \n    $(\".banner-btn span\").mouseenter(function() {  \n        index = $(\".banner-btn span\").index(this);  \n        showPics(index, sWidth);\n        console.log(index, sWidth);\n        // console.log(\"按钮滑入\");  \n    });  \n\n    /*\n    本例为左右滚动，即所有li元素都是在同一排向左浮动，\n    所以这里需要计算出外围ul元素的宽度\n    */  \n    $(\".banner-focus ul\").css(\"width\",sWidth * (len+1));  \n\n    /*\n    因为图片未设置固定宽度，所以之前设置的100%会随着父元素变宽而撑大，\n    所以此处应该相应设置为父元素的1/(len+1)\n    */    \n    $(\".banner-focus ul li\").css(\"width\",sWidth * (len+1) / 5);\n\n\n    /*直接自动播放*/\n    picTimer = setInterval(function() {  \n        if(index === len) { //如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  \n            index = 0;  \n            showFirstPic(len, sWidth);\n        } else { //如果索引值不等于li元素个数，按普通状态切换，调用showPics()  \n            showPics(index, sWidth);  \n        }  \n        index++;  \n    },4000); //此2000代表自动播放的间隔，单位：毫秒 \n\n    //鼠标滑上焦点图时停止自动播放，滑出时开始自动播放  \n    $(\".banner-focus\").hover(function() {  \n        clearInterval(picTimer);  \n    },function() {  \n        picTimer = setInterval(function() {  \n            if(index === len) { //如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  \n                index = 0;  \n                showFirstPic(len, sWidth);\n            } else { //如果索引值不等于li元素个数，按普通状态切换，调用showPics()  \n                showPics(index, sWidth);  \n            }  \n            index++;  \n        },4000); //此2000代表自动播放的间隔，单位：毫秒  \n    }); \n\n}\n\n\n//显示图片函数，根据接收的index值显示相应的内容  \nfunction showPics(index, sWidth) { //普通切换  \n    var nowLeft = - (index * sWidth); //根据index值计算ul元素的left值  \n    $(\".banner-focus ul\").stop(true,false).animate({\"left\":nowLeft},500); //通过animate()调整ul元素滚动到计算出的position  \n    // $(\"#focus div.btn span\").animate({\"opacity\":\"0.4\"},300).eq(index).animate({\"opacity\":\"1\"},100); //为当前的按钮切换到选中的效果  \n}  \n\n//最后一张图自动切换到第一张图时专用  \nfunction showFirstPic(len, sWidth) { \n    $(\".banner-focus ul\").append($(\".banner-focus ul li:first\").clone());//为了达到从最右边到最左边还是往左移动效果，而不是往右移动  \n    var nowLeft = - (len * sWidth); //通过li元素个数计算ul元素的left值，也就是最后一个li元素的右边  \n    $(\".banner-focus ul\").stop(true,false).animate({\"left\":nowLeft},500,function() {  \n        //通过callback，在动画结束后把ul元素重新定位到起点，然后删除最后一个复制过去的元素  \n        $(\".banner-focus ul\").css(\"left\",\"0\");  \n        $(\".banner-focus ul li:last\").remove();  \n    });   \n    // $(\"#focus div.btn span\").animate({\"opacity\":\"0.4\"},300).eq(index).animate({\"opacity\":\"1\"},100); //为当前的按钮切换到选中的效果  \n}  \n```\n\n* setInterval()函数用来不断调用内容，为了让一开始轮播图自动滚动，要直接用setInterval函数然后实现鼠标聚焦内容的时候停止滚动，使之hover用clearInterval使其停止，然后用callback回调函数继续滚动\n\n* 滚动原理是通过`position:absolute`然后使用left来指定展示哪一张图片\n\n* 由于我并没有指定图像大小，所以我在此处设置了图像宽度为`width:100%`来自动调整，那么此时li的父元素ul会是所有图片宽度之和，根据`width:100%`会参照其父元素的原因，我在此处指定了li的宽度，为ul宽度的1/(len+1),len+1是因为会复制一张图片\n\n\n## 后记\n\n还有一种轮播图是用纯CSS效果写的，目前还没有细读代码，纯css的局限性是似乎不能指定显示哪一张图片，而是让其自动滚动。","slug":"11. 如何实现一个轮播图","published":1,"updated":"2021-09-30T06:45:59.453Z","_id":"cku41le8f0003idp2fcff881g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>做项目的时候刚好要做轮播图，之前在微信小程序上做过，但是那个非常的简单，因为很多功能已经封装在了API里面，所以只需要指定几张图片就能达成效果。现在将使用JQuery来实现轮播图效果。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"轮播图技术实现\"><a href=\"#轮播图技术实现\" class=\"headerlink\" title=\"轮播图技术实现\"></a>轮播图技术实现</h2><h3 id=\"轮播图效果\"><a href=\"#轮播图效果\" class=\"headerlink\" title=\"轮播图效果\"></a>轮播图效果</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/effect.jpg\" height=\"300px\">\n\n<p>轮播图下方有每个图的按钮，鼠标放在上面即会跳转到相应页面，而且当鼠标停留在图片上的时候，轮播图将会暂停，以便当用户被某个图片吸引时不至于跳到另一张图片。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>轮播图就是将所有的图片使用float来将所有的图片都放成一行上，然后通过js控制图片的移动，原理图如下:</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/principle.jpg\" height=\"300px\">\n\n<p>然后还有一处要注意的地方，就是当移动到最后一张图的时候，为了让其依然向左拉动，必须在最后加上复制的第一张图，使之连贯，动画结束后重新定位到起点，然后将最后一张删去</p>\n<h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><h4 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- banner图像 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-focus&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- banner切换按钮 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里图片并没有采用img标签，而是选择了div标签，然后使用background属性的url指定图片地址，这种方法的好处是不用指定图片的大小，通过设置background-size可以让图片达到充满目标而且多余的部分不显示。<s>因此以后尽量不要使用img标签。</s>应该根据实际情况选择，当图片不是内容的一部分时使用background</p>\n<h4 id=\"less代码\"><a href=\"#less代码\" class=\"headerlink\" title=\"less代码\"></a>less代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.banner-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*轮播图*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">  // <span class=\"attribute\">background-color</span>: <span class=\"number\">#DB6A6A</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.banner-focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    // <span class=\"attribute\">background-color</span>: <span class=\"number\">#351818</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">          <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img0</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/0.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img1</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/1.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img2</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/2.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img3</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/3.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.banner-btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">52px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">      // <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#E0DFE0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#595959</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>css部分需要注意的是</p>\n<ul>\n<li><p>最外层banner-wrapper用<code>position:relative</code>来给内层banner-focus的<code>position:absolute</code>定位</p>\n</li>\n<li><p>banner-focus需要使用<code>overflow:relative</code>来将多余的部分隐藏</p>\n</li>\n<li><p>若想将内层元素用width百分比来表示，必须指定其父元素宽度才能成功</p>\n</li>\n<li><p>设置background来让其自动填充，省去了切图的麻烦</p>\n</li>\n</ul>\n<h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//============================轮播图部分函数=====================</span></span><br><span class=\"line\"><span class=\"comment\">/*轮播图主函数*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bannerRolling = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sWidth = $(<span class=\"string\">&quot;.banner-focus&quot;</span>).width(); <span class=\"comment\">//获取焦点图的宽度（显示面积）  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = $(<span class=\"string\">&quot;.banner-focus ul li&quot;</span>).length; <span class=\"comment\">//获取焦点图个数  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> picTimer;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sWidth);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为小按钮添加鼠标滑入事件，以显示相应的内容  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-btn span&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        index = $(<span class=\"string\">&quot;.banner-btn span&quot;</span>).index(<span class=\"built_in\">this</span>);  </span><br><span class=\"line\">        showPics(index, sWidth);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(index, sWidth);</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;按钮滑入&quot;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    本例为左右滚动，即所有li元素都是在同一排向左浮动，</span></span><br><span class=\"line\"><span class=\"comment\">    所以这里需要计算出外围ul元素的宽度</span></span><br><span class=\"line\"><span class=\"comment\">    */</span>  </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).css(<span class=\"string\">&quot;width&quot;</span>,sWidth * (len+<span class=\"number\">1</span>));  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    因为图片未设置固定宽度，所以之前设置的100%会随着父元素变宽而撑大，</span></span><br><span class=\"line\"><span class=\"comment\">    所以此处应该相应设置为父元素的1/(len+1)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span>    </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul li&quot;</span>).css(<span class=\"string\">&quot;width&quot;</span>,sWidth * (len+<span class=\"number\">1</span>) / <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*直接自动播放*/</span></span><br><span class=\"line\">    picTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index === len) &#123; <span class=\"comment\">//如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  </span></span><br><span class=\"line\">            index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            showFirstPic(len, sWidth);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果索引值不等于li元素个数，按普通状态切换，调用showPics()  </span></span><br><span class=\"line\">            showPics(index, sWidth);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        index++;  </span><br><span class=\"line\">    &#125;,<span class=\"number\">4000</span>); <span class=\"comment\">//此2000代表自动播放的间隔，单位：毫秒 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//鼠标滑上焦点图时停止自动播放，滑出时开始自动播放  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus&quot;</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(picTimer);  </span><br><span class=\"line\">    &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        picTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index === len) &#123; <span class=\"comment\">//如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  </span></span><br><span class=\"line\">                index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">                showFirstPic(len, sWidth);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果索引值不等于li元素个数，按普通状态切换，调用showPics()  </span></span><br><span class=\"line\">                showPics(index, sWidth);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            index++;  </span><br><span class=\"line\">        &#125;,<span class=\"number\">4000</span>); <span class=\"comment\">//此2000代表自动播放的间隔，单位：毫秒  </span></span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示图片函数，根据接收的index值显示相应的内容  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showPics</span>(<span class=\"params\">index, sWidth</span>) </span>&#123; <span class=\"comment\">//普通切换  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowLeft = - (index * sWidth); <span class=\"comment\">//根据index值计算ul元素的left值  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">false</span>).animate(&#123;<span class=\"string\">&quot;left&quot;</span>:nowLeft&#125;,<span class=\"number\">500</span>); <span class=\"comment\">//通过animate()调整ul元素滚动到计算出的position  </span></span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;#focus div.btn span&quot;).animate(&#123;&quot;opacity&quot;:&quot;0.4&quot;&#125;,300).eq(index).animate(&#123;&quot;opacity&quot;:&quot;1&quot;&#125;,100); //为当前的按钮切换到选中的效果  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后一张图自动切换到第一张图时专用  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFirstPic</span>(<span class=\"params\">len, sWidth</span>) </span>&#123; </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).append($(<span class=\"string\">&quot;.banner-focus ul li:first&quot;</span>).clone());<span class=\"comment\">//为了达到从最右边到最左边还是往左移动效果，而不是往右移动  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowLeft = - (len * sWidth); <span class=\"comment\">//通过li元素个数计算ul元素的left值，也就是最后一个li元素的右边  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">false</span>).animate(&#123;<span class=\"string\">&quot;left&quot;</span>:nowLeft&#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//通过callback，在动画结束后把ul元素重新定位到起点，然后删除最后一个复制过去的元素  </span></span><br><span class=\"line\">        $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).css(<span class=\"string\">&quot;left&quot;</span>,<span class=\"string\">&quot;0&quot;</span>);  </span><br><span class=\"line\">        $(<span class=\"string\">&quot;.banner-focus ul li:last&quot;</span>).remove();  </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;#focus div.btn span&quot;).animate(&#123;&quot;opacity&quot;:&quot;0.4&quot;&#125;,300).eq(index).animate(&#123;&quot;opacity&quot;:&quot;1&quot;&#125;,100); //为当前的按钮切换到选中的效果  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>setInterval()函数用来不断调用内容，为了让一开始轮播图自动滚动，要直接用setInterval函数然后实现鼠标聚焦内容的时候停止滚动，使之hover用clearInterval使其停止，然后用callback回调函数继续滚动</p>\n</li>\n<li><p>滚动原理是通过<code>position:absolute</code>然后使用left来指定展示哪一张图片</p>\n</li>\n<li><p>由于我并没有指定图像大小，所以我在此处设置了图像宽度为<code>width:100%</code>来自动调整，那么此时li的父元素ul会是所有图片宽度之和，根据<code>width:100%</code>会参照其父元素的原因，我在此处指定了li的宽度，为ul宽度的1/(len+1),len+1是因为会复制一张图片</p>\n</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>还有一种轮播图是用纯CSS效果写的，目前还没有细读代码，纯css的局限性是似乎不能指定显示哪一张图片，而是让其自动滚动。</p>\n","site":{"data":{}},"excerpt":"<p>做项目的时候刚好要做轮播图，之前在微信小程序上做过，但是那个非常的简单，因为很多功能已经封装在了API里面，所以只需要指定几张图片就能达成效果。现在将使用JQuery来实现轮播图效果。</p>","more":"<h2 id=\"轮播图技术实现\"><a href=\"#轮播图技术实现\" class=\"headerlink\" title=\"轮播图技术实现\"></a>轮播图技术实现</h2><h3 id=\"轮播图效果\"><a href=\"#轮播图效果\" class=\"headerlink\" title=\"轮播图效果\"></a>轮播图效果</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/effect.jpg\" height=\"300px\">\n\n<p>轮播图下方有每个图的按钮，鼠标放在上面即会跳转到相应页面，而且当鼠标停留在图片上的时候，轮播图将会暂停，以便当用户被某个图片吸引时不至于跳到另一张图片。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>轮播图就是将所有的图片使用float来将所有的图片都放成一行上，然后通过js控制图片的移动，原理图如下:</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-14/principle.jpg\" height=\"300px\">\n\n<p>然后还有一处要注意的地方，就是当移动到最后一张图的时候，为了让其依然向左拉动，必须在最后加上复制的第一张图，使之连贯，动画结束后重新定位到起点，然后将最后一张删去</p>\n<h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><h4 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- banner图像 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-focus&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-img banner-img3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- banner切换按钮 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;banner-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里图片并没有采用img标签，而是选择了div标签，然后使用background属性的url指定图片地址，这种方法的好处是不用指定图片的大小，通过设置background-size可以让图片达到充满目标而且多余的部分不显示。<s>因此以后尽量不要使用img标签。</s>应该根据实际情况选择，当图片不是内容的一部分时使用background</p>\n<h4 id=\"less代码\"><a href=\"#less代码\" class=\"headerlink\" title=\"less代码\"></a>less代码</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.banner-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*轮播图*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">  // <span class=\"attribute\">background-color</span>: <span class=\"number\">#DB6A6A</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.banner-focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    // <span class=\"attribute\">background-color</span>: <span class=\"number\">#351818</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">          <span class=\"attribute\">height</span>: <span class=\"number\">550px</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img0</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/0.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img1</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/1.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img2</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/2.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"selector-class\">.banner-img3</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">/*后面改路径*/</span></span><br><span class=\"line\">          <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;./test/images/3.jpg&quot;</span>) no-repeat center;</span><br><span class=\"line\">          <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.banner-btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">52px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">      // <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#E0DFE0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#595959</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>css部分需要注意的是</p>\n<ul>\n<li><p>最外层banner-wrapper用<code>position:relative</code>来给内层banner-focus的<code>position:absolute</code>定位</p>\n</li>\n<li><p>banner-focus需要使用<code>overflow:relative</code>来将多余的部分隐藏</p>\n</li>\n<li><p>若想将内层元素用width百分比来表示，必须指定其父元素宽度才能成功</p>\n</li>\n<li><p>设置background来让其自动填充，省去了切图的麻烦</p>\n</li>\n</ul>\n<h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//============================轮播图部分函数=====================</span></span><br><span class=\"line\"><span class=\"comment\">/*轮播图主函数*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bannerRolling = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sWidth = $(<span class=\"string\">&quot;.banner-focus&quot;</span>).width(); <span class=\"comment\">//获取焦点图的宽度（显示面积）  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = $(<span class=\"string\">&quot;.banner-focus ul li&quot;</span>).length; <span class=\"comment\">//获取焦点图个数  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> picTimer;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(sWidth);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为小按钮添加鼠标滑入事件，以显示相应的内容  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-btn span&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        index = $(<span class=\"string\">&quot;.banner-btn span&quot;</span>).index(<span class=\"built_in\">this</span>);  </span><br><span class=\"line\">        showPics(index, sWidth);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(index, sWidth);</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;按钮滑入&quot;);  </span></span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    本例为左右滚动，即所有li元素都是在同一排向左浮动，</span></span><br><span class=\"line\"><span class=\"comment\">    所以这里需要计算出外围ul元素的宽度</span></span><br><span class=\"line\"><span class=\"comment\">    */</span>  </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).css(<span class=\"string\">&quot;width&quot;</span>,sWidth * (len+<span class=\"number\">1</span>));  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    因为图片未设置固定宽度，所以之前设置的100%会随着父元素变宽而撑大，</span></span><br><span class=\"line\"><span class=\"comment\">    所以此处应该相应设置为父元素的1/(len+1)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span>    </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul li&quot;</span>).css(<span class=\"string\">&quot;width&quot;</span>,sWidth * (len+<span class=\"number\">1</span>) / <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*直接自动播放*/</span></span><br><span class=\"line\">    picTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index === len) &#123; <span class=\"comment\">//如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  </span></span><br><span class=\"line\">            index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            showFirstPic(len, sWidth);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果索引值不等于li元素个数，按普通状态切换，调用showPics()  </span></span><br><span class=\"line\">            showPics(index, sWidth);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        index++;  </span><br><span class=\"line\">    &#125;,<span class=\"number\">4000</span>); <span class=\"comment\">//此2000代表自动播放的间隔，单位：毫秒 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//鼠标滑上焦点图时停止自动播放，滑出时开始自动播放  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus&quot;</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(picTimer);  </span><br><span class=\"line\">    &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        picTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index === len) &#123; <span class=\"comment\">//如果索引值等于li元素个数，说明最后一张图播放完毕，接下来要显示第一张图，即调用showFirPic()，然后将索引值清零  </span></span><br><span class=\"line\">                index = <span class=\"number\">0</span>;  </span><br><span class=\"line\">                showFirstPic(len, sWidth);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果索引值不等于li元素个数，按普通状态切换，调用showPics()  </span></span><br><span class=\"line\">                showPics(index, sWidth);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            index++;  </span><br><span class=\"line\">        &#125;,<span class=\"number\">4000</span>); <span class=\"comment\">//此2000代表自动播放的间隔，单位：毫秒  </span></span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示图片函数，根据接收的index值显示相应的内容  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showPics</span>(<span class=\"params\">index, sWidth</span>) </span>&#123; <span class=\"comment\">//普通切换  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowLeft = - (index * sWidth); <span class=\"comment\">//根据index值计算ul元素的left值  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">false</span>).animate(&#123;<span class=\"string\">&quot;left&quot;</span>:nowLeft&#125;,<span class=\"number\">500</span>); <span class=\"comment\">//通过animate()调整ul元素滚动到计算出的position  </span></span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;#focus div.btn span&quot;).animate(&#123;&quot;opacity&quot;:&quot;0.4&quot;&#125;,300).eq(index).animate(&#123;&quot;opacity&quot;:&quot;1&quot;&#125;,100); //为当前的按钮切换到选中的效果  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后一张图自动切换到第一张图时专用  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFirstPic</span>(<span class=\"params\">len, sWidth</span>) </span>&#123; </span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).append($(<span class=\"string\">&quot;.banner-focus ul li:first&quot;</span>).clone());<span class=\"comment\">//为了达到从最右边到最左边还是往左移动效果，而不是往右移动  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowLeft = - (len * sWidth); <span class=\"comment\">//通过li元素个数计算ul元素的left值，也就是最后一个li元素的右边  </span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">false</span>).animate(&#123;<span class=\"string\">&quot;left&quot;</span>:nowLeft&#125;,<span class=\"number\">500</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//通过callback，在动画结束后把ul元素重新定位到起点，然后删除最后一个复制过去的元素  </span></span><br><span class=\"line\">        $(<span class=\"string\">&quot;.banner-focus ul&quot;</span>).css(<span class=\"string\">&quot;left&quot;</span>,<span class=\"string\">&quot;0&quot;</span>);  </span><br><span class=\"line\">        $(<span class=\"string\">&quot;.banner-focus ul li:last&quot;</span>).remove();  </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;#focus div.btn span&quot;).animate(&#123;&quot;opacity&quot;:&quot;0.4&quot;&#125;,300).eq(index).animate(&#123;&quot;opacity&quot;:&quot;1&quot;&#125;,100); //为当前的按钮切换到选中的效果  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>setInterval()函数用来不断调用内容，为了让一开始轮播图自动滚动，要直接用setInterval函数然后实现鼠标聚焦内容的时候停止滚动，使之hover用clearInterval使其停止，然后用callback回调函数继续滚动</p>\n</li>\n<li><p>滚动原理是通过<code>position:absolute</code>然后使用left来指定展示哪一张图片</p>\n</li>\n<li><p>由于我并没有指定图像大小，所以我在此处设置了图像宽度为<code>width:100%</code>来自动调整，那么此时li的父元素ul会是所有图片宽度之和，根据<code>width:100%</code>会参照其父元素的原因，我在此处指定了li的宽度，为ul宽度的1/(len+1),len+1是因为会复制一张图片</p>\n</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>还有一种轮播图是用纯CSS效果写的，目前还没有细读代码，纯css的局限性是似乎不能指定显示哪一张图片，而是让其自动滚动。</p>"},{"title":"background属性和img标签","date":"2018-03-17T08:10:54.000Z","toc":true,"_content":"\nbackground这个属性可以说是很常见了，基本上是使用的非常频繁的一个属性，但是真说起来background属性，我又不能说是十分的清楚。本来说准备整理一下background属性，但是在整理的时候又发现了许多不清楚的地方，比如说和img区别？那么先把问题一个一个罗列下来，逐个解决。\n\n在此，我要更正一个错误。那就是，原来我认为能用background-image解决的就不用img标签(似乎img用不到了？)，但是详细了解之后认为这是不正确的，区别将在问题一进行介绍。\n\n<!--more-->\n\n## 问题\n\n1.background-image和img的区别？\n\n2.background-size各个属性功能？\n\n3.什么时候使用background什么时候使用img？\n\n4.使用background-image的时候可以使其自适应屏幕宽度（比如说做轮播图的时候，可以指定宽度为width:100%，然后再指定一个height，使用background-size来让其充满），但是若使用img的话如何来达到这种效果。在我的印象中，img若指定width:100%的话height也会相应的变化，意思就是成比例变化，如果说同时指定width和height的话，若比例不对，图像会变形（拉伸、压缩之类的）。那么这种情况下，如何适应用户的不同屏幕？这个问题也是整理这篇文章的最大原因。\n\n\n## 解答\n\n### 问题一：background-image和img的区别 && 问题三：什么时候使用background什么时候使用img？\n\n边整理区别的时候，再stack Overflow上看到了一个整理的很好的答案，感觉开启了新世界的大门。在此，我要推荐一下stack Overflow这个网站，除了全是英语阅读比较困难外，基本上很多问题都能在上面找到。果然对程序员来说stack Overflow和github两个网站就能解决大部分问题。比搜索引擎查的答案更加的全面，在此引用一下答案\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/answer.png\" alt=\"answer\">\n\n上面的答案可以说是很全面了，那么大概翻译一下，提取几个要点，如下\n\n##### 使用img的情况\n\n* 当你想让打印页面时，你想让图片被默认包含在你的页面上，请使用img标签\n\n* 当图像带有重要语义的时候，比如警告图标，请使用img标签（带有alt文本）因为这样的话即时因为一些问题而使图片没有加载出来，但是由于有alt属性，可以让文本代替图片，以至于重要信息不会因为图片无法加载而丢失。想象一下，如果使用background-image的话，倘若没法加载图片将会怎么样，也许就会错过一些重要的信息\n\n* 如果图像是内容的一部分，最好使用img+alt \n\n* 如果你想让图像成比例放大或缩小，请使用img标签。background-image只能制定宽和高，虽然可以指定background-size，但依然不是成比例的，必然有一部分内容会缺失。\n\n* 使用img而不是背景图像可以显著提高动画在后台的性能【这句话暂时并未理解】\n\n* 当你想你的图片能被搜索引擎搜索到时，或者说更便于做SEO【答案来自其他人】\n\n##### 使用backgroung-image的情况\n\n* 如果图像不是内容的一部分，请使用CSS背景图像\n\n* 使用CSS背景图像做图像替换的文本\n\n* 如果你需要提高下载时间，就像CSS sprites 【css sprites的一个特性是似乎能让所有图片合成一张加载，这样能改善下载时间，为什么呢，学过数字图像处理可以知道，每个图像的颜色表都不一样，每一张图都需要一个颜色表的话自然不如只有一个颜色表占用空间少。具体css sprites内容还不太清楚】\n\n* 使用backgroung-size，以拉伸背景图像填充整个窗口。\n\n#### 总结\n\n那么整理一下可以知道了，当使用不包含内容的图像，比如说背景的时候，那么完全可以使用background-image来让工作变得更加简单。但是倘若包含重要内容，应该使用img来作为一个HTML标签存在其中。\n\n### 问题二：background-size各个属性功能？\n\n引自MDN\n\n> background 是CSS简写属性，用来集中设置各种背景属性。background 可以用来设置一个或多个属性:background-color, background-image, background-position, background-repeat, background-size, background-attachment。\n\nbackground初始值：\n\n> background-image: none\n  background-position: 0% 0%\n  background-size: auto auto\n  background-repeat: repeat\n  background-origin: padding-box\n  background-clip: border-box\n  background-attachment: scroll\n  background-color: transparent\n\n* `background-color`用于设置背景色\n\n* `background-image`用于引入图片\n\n* `background-position`规定背景图像位置\n\n* `background-repeat`规定是否平铺\n\n* `background-size`规定图像尺寸\n\n* `background-attachment`设置背景图像是否固定或者随着页面的其余部分滚动\n\n##### background-position\n\n测试图700px,700px\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/demo.jpg\" height=\"200px\">\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>background-position</title>\n  <style type=\"text/css\">\n    .test {\n      width: 600px;\n      height: 600px;\n      background-image: url(\"demo.jpg\");\n      //background-position: 0% center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"test\"></div>\n</body>\n</html>\n```\n\n将position注释的时候，可以看到处于默认状态0% 0%的状态，那么注释之后原图变成了\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab1-1.jpg\" height=\"200px\">\n\n可以看到左边框的黑线仍能显示，而上边框的黑线已经没有了，那么得出结论，第一个值可以理解成左右位置，而第二个则可以理解成上下位置，center则代表上下居中。其他同理。\n\n##### background-repeat\n\n当图片宽或者高小于css指定的宽或者高时，空白的部分将被平铺，如图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-1.jpg\" height=\"200px\">\n\n```css \n.test {\n      width: 730px;\n      height: 730px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: repeat;\n    }\n```\n\n当设置成no-repeat时，可以看到有黑色背景透出，则可看出效果。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-2.jpg\" height=\"200px\">\n\n```css \nbackground-repeat: no-repeat;\n```\n\n\n##### background-size\n\n做一个测试，来说明具体工作情况\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n    }\n```\n\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-1.jpg\" height=\"200px\">\n\n可以看到不设置background-size时显示不全\n\n1.当都设置成100%时\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      background-repeat: no-repeat;\n      background-size: 100% 100%;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-2.jpg\" height=\"200px\">\n\n可以看到长和宽都被拉伸到了最大限度\n\n2.当第一个设置成100%时\n\n```css \nbackground-size: 100% auto;\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-3.jpg\" height=\"200px\">\n\n可以看到宽被拉到100%\n\n3.当第二个设置成100%时\n\n```css \nbackground-size: auto 100%;\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-4.jpg\" height=\"200px\">\n\n可以看到高被拉到了100%\n\n4.设置成cover\n\n> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-5.jpg\" height=\"200px\">\n\n改变width和height\n\n```css\n.test {\n      width: 300px;\n      height: 400px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-6.jpg\" height=\"200px\">\n\n可以看到结果不一样，即解释了什么叫做使背景完全覆盖背景区域,就是说将宽或者高大的哪一个拉到最大\n\n5.设置成contain \n\n> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。\n\n测试方法同上，第一个设置`width:400px;height:300px`第二个设置`width:300px;height:400px`，结果如下，第一个\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-7.jpg\" height=\"200px\">\n\n第二个\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-8.jpg\" height=\"200px\">\n\n则可以充分看出确实是高或者宽完全适应背景区域\n\n\n##### background-attachment \n\n> scroll  默认值。背景图像会随着页面其余部分的滚动而移动。\n> fixed  当页面的其余部分滚动时，背景图像不会移动。\n> inherit  规定应该从父元素继承 background-attachment 属性的设置。\n\n默认是会滚动的，当设置成fixed的时候，背景就会固定不动，可以借此做出比较炫酷的效果。\n\n\n### 问题四：关于轮播图\n\n关于这个问题，我想了想，倘若使用img标签的话（通过上面整理img应该更适合做轮播图，因为它在页面中可以说是比较重要的元素之一），那么就要从图片的大小上下手了，图片必须有一定的规范。首先轮播图的每个图片大小必须相同（或者说宽高比例相同），而且比例要适应浏览器，防止宽高比例不均的时候发生页面过大或过小的情况。我想这可能都是一些设计师的规范，而我对设计的领域了解并不深入，也许我想的是对的，也许是错的。但是这是我目前能想到的唯一解决方案。\n\n使用background确实方便，但是为了网站的规范，我觉得有必要使用img标签。\n\n## 结语\n\n没想到竟然整理了这么多，background元素属性虽然看起来简单，但整理之前真让我详细的说我并不能说出来十分确切的内容，整理之后觉得对这方面的内容了解得更加深入的许多。\n","source":"_posts/12. background属性和img标签.md","raw":"---\ntitle: background属性和img标签\ndate: 2018-03-17 16:10:54\ntoc: true\ncategories:\n- 前端\ntags:\n- CSS\n---\n\nbackground这个属性可以说是很常见了，基本上是使用的非常频繁的一个属性，但是真说起来background属性，我又不能说是十分的清楚。本来说准备整理一下background属性，但是在整理的时候又发现了许多不清楚的地方，比如说和img区别？那么先把问题一个一个罗列下来，逐个解决。\n\n在此，我要更正一个错误。那就是，原来我认为能用background-image解决的就不用img标签(似乎img用不到了？)，但是详细了解之后认为这是不正确的，区别将在问题一进行介绍。\n\n<!--more-->\n\n## 问题\n\n1.background-image和img的区别？\n\n2.background-size各个属性功能？\n\n3.什么时候使用background什么时候使用img？\n\n4.使用background-image的时候可以使其自适应屏幕宽度（比如说做轮播图的时候，可以指定宽度为width:100%，然后再指定一个height，使用background-size来让其充满），但是若使用img的话如何来达到这种效果。在我的印象中，img若指定width:100%的话height也会相应的变化，意思就是成比例变化，如果说同时指定width和height的话，若比例不对，图像会变形（拉伸、压缩之类的）。那么这种情况下，如何适应用户的不同屏幕？这个问题也是整理这篇文章的最大原因。\n\n\n## 解答\n\n### 问题一：background-image和img的区别 && 问题三：什么时候使用background什么时候使用img？\n\n边整理区别的时候，再stack Overflow上看到了一个整理的很好的答案，感觉开启了新世界的大门。在此，我要推荐一下stack Overflow这个网站，除了全是英语阅读比较困难外，基本上很多问题都能在上面找到。果然对程序员来说stack Overflow和github两个网站就能解决大部分问题。比搜索引擎查的答案更加的全面，在此引用一下答案\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/answer.png\" alt=\"answer\">\n\n上面的答案可以说是很全面了，那么大概翻译一下，提取几个要点，如下\n\n##### 使用img的情况\n\n* 当你想让打印页面时，你想让图片被默认包含在你的页面上，请使用img标签\n\n* 当图像带有重要语义的时候，比如警告图标，请使用img标签（带有alt文本）因为这样的话即时因为一些问题而使图片没有加载出来，但是由于有alt属性，可以让文本代替图片，以至于重要信息不会因为图片无法加载而丢失。想象一下，如果使用background-image的话，倘若没法加载图片将会怎么样，也许就会错过一些重要的信息\n\n* 如果图像是内容的一部分，最好使用img+alt \n\n* 如果你想让图像成比例放大或缩小，请使用img标签。background-image只能制定宽和高，虽然可以指定background-size，但依然不是成比例的，必然有一部分内容会缺失。\n\n* 使用img而不是背景图像可以显著提高动画在后台的性能【这句话暂时并未理解】\n\n* 当你想你的图片能被搜索引擎搜索到时，或者说更便于做SEO【答案来自其他人】\n\n##### 使用backgroung-image的情况\n\n* 如果图像不是内容的一部分，请使用CSS背景图像\n\n* 使用CSS背景图像做图像替换的文本\n\n* 如果你需要提高下载时间，就像CSS sprites 【css sprites的一个特性是似乎能让所有图片合成一张加载，这样能改善下载时间，为什么呢，学过数字图像处理可以知道，每个图像的颜色表都不一样，每一张图都需要一个颜色表的话自然不如只有一个颜色表占用空间少。具体css sprites内容还不太清楚】\n\n* 使用backgroung-size，以拉伸背景图像填充整个窗口。\n\n#### 总结\n\n那么整理一下可以知道了，当使用不包含内容的图像，比如说背景的时候，那么完全可以使用background-image来让工作变得更加简单。但是倘若包含重要内容，应该使用img来作为一个HTML标签存在其中。\n\n### 问题二：background-size各个属性功能？\n\n引自MDN\n\n> background 是CSS简写属性，用来集中设置各种背景属性。background 可以用来设置一个或多个属性:background-color, background-image, background-position, background-repeat, background-size, background-attachment。\n\nbackground初始值：\n\n> background-image: none\n  background-position: 0% 0%\n  background-size: auto auto\n  background-repeat: repeat\n  background-origin: padding-box\n  background-clip: border-box\n  background-attachment: scroll\n  background-color: transparent\n\n* `background-color`用于设置背景色\n\n* `background-image`用于引入图片\n\n* `background-position`规定背景图像位置\n\n* `background-repeat`规定是否平铺\n\n* `background-size`规定图像尺寸\n\n* `background-attachment`设置背景图像是否固定或者随着页面的其余部分滚动\n\n##### background-position\n\n测试图700px,700px\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/demo.jpg\" height=\"200px\">\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>background-position</title>\n  <style type=\"text/css\">\n    .test {\n      width: 600px;\n      height: 600px;\n      background-image: url(\"demo.jpg\");\n      //background-position: 0% center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"test\"></div>\n</body>\n</html>\n```\n\n将position注释的时候，可以看到处于默认状态0% 0%的状态，那么注释之后原图变成了\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab1-1.jpg\" height=\"200px\">\n\n可以看到左边框的黑线仍能显示，而上边框的黑线已经没有了，那么得出结论，第一个值可以理解成左右位置，而第二个则可以理解成上下位置，center则代表上下居中。其他同理。\n\n##### background-repeat\n\n当图片宽或者高小于css指定的宽或者高时，空白的部分将被平铺，如图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-1.jpg\" height=\"200px\">\n\n```css \n.test {\n      width: 730px;\n      height: 730px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: repeat;\n    }\n```\n\n当设置成no-repeat时，可以看到有黑色背景透出，则可看出效果。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-2.jpg\" height=\"200px\">\n\n```css \nbackground-repeat: no-repeat;\n```\n\n\n##### background-size\n\n做一个测试，来说明具体工作情况\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n    }\n```\n\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-1.jpg\" height=\"200px\">\n\n可以看到不设置background-size时显示不全\n\n1.当都设置成100%时\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      background-repeat: no-repeat;\n      background-size: 100% 100%;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-2.jpg\" height=\"200px\">\n\n可以看到长和宽都被拉伸到了最大限度\n\n2.当第一个设置成100%时\n\n```css \nbackground-size: 100% auto;\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-3.jpg\" height=\"200px\">\n\n可以看到宽被拉到100%\n\n3.当第二个设置成100%时\n\n```css \nbackground-size: auto 100%;\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-4.jpg\" height=\"200px\">\n\n可以看到高被拉到了100%\n\n4.设置成cover\n\n> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。\n\n```css \n.test {\n      width: 400px;\n      height: 300px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-5.jpg\" height=\"200px\">\n\n改变width和height\n\n```css\n.test {\n      width: 300px;\n      height: 400px;\n      background-image: url(\"demo.jpg\");\n      background-color: #000000;\n      /*background-position: 0% center;*/\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-6.jpg\" height=\"200px\">\n\n可以看到结果不一样，即解释了什么叫做使背景完全覆盖背景区域,就是说将宽或者高大的哪一个拉到最大\n\n5.设置成contain \n\n> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。\n\n测试方法同上，第一个设置`width:400px;height:300px`第二个设置`width:300px;height:400px`，结果如下，第一个\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-7.jpg\" height=\"200px\">\n\n第二个\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-8.jpg\" height=\"200px\">\n\n则可以充分看出确实是高或者宽完全适应背景区域\n\n\n##### background-attachment \n\n> scroll  默认值。背景图像会随着页面其余部分的滚动而移动。\n> fixed  当页面的其余部分滚动时，背景图像不会移动。\n> inherit  规定应该从父元素继承 background-attachment 属性的设置。\n\n默认是会滚动的，当设置成fixed的时候，背景就会固定不动，可以借此做出比较炫酷的效果。\n\n\n### 问题四：关于轮播图\n\n关于这个问题，我想了想，倘若使用img标签的话（通过上面整理img应该更适合做轮播图，因为它在页面中可以说是比较重要的元素之一），那么就要从图片的大小上下手了，图片必须有一定的规范。首先轮播图的每个图片大小必须相同（或者说宽高比例相同），而且比例要适应浏览器，防止宽高比例不均的时候发生页面过大或过小的情况。我想这可能都是一些设计师的规范，而我对设计的领域了解并不深入，也许我想的是对的，也许是错的。但是这是我目前能想到的唯一解决方案。\n\n使用background确实方便，但是为了网站的规范，我觉得有必要使用img标签。\n\n## 结语\n\n没想到竟然整理了这么多，background元素属性虽然看起来简单，但整理之前真让我详细的说我并不能说出来十分确切的内容，整理之后觉得对这方面的内容了解得更加深入的许多。\n","slug":"12. background属性和img标签","published":1,"updated":"2021-09-30T06:46:03.654Z","_id":"cku41le8g0004idp21i1g06i0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>background这个属性可以说是很常见了，基本上是使用的非常频繁的一个属性，但是真说起来background属性，我又不能说是十分的清楚。本来说准备整理一下background属性，但是在整理的时候又发现了许多不清楚的地方，比如说和img区别？那么先把问题一个一个罗列下来，逐个解决。</p>\n<p>在此，我要更正一个错误。那就是，原来我认为能用background-image解决的就不用img标签(似乎img用不到了？)，但是详细了解之后认为这是不正确的，区别将在问题一进行介绍。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>1.background-image和img的区别？</p>\n<p>2.background-size各个属性功能？</p>\n<p>3.什么时候使用background什么时候使用img？</p>\n<p>4.使用background-image的时候可以使其自适应屏幕宽度（比如说做轮播图的时候，可以指定宽度为width:100%，然后再指定一个height，使用background-size来让其充满），但是若使用img的话如何来达到这种效果。在我的印象中，img若指定width:100%的话height也会相应的变化，意思就是成比例变化，如果说同时指定width和height的话，若比例不对，图像会变形（拉伸、压缩之类的）。那么这种情况下，如何适应用户的不同屏幕？这个问题也是整理这篇文章的最大原因。</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><h3 id=\"问题一：background-image和img的区别-amp-amp-问题三：什么时候使用background什么时候使用img？\"><a href=\"#问题一：background-image和img的区别-amp-amp-问题三：什么时候使用background什么时候使用img？\" class=\"headerlink\" title=\"问题一：background-image和img的区别 &amp;&amp; 问题三：什么时候使用background什么时候使用img？\"></a>问题一：background-image和img的区别 &amp;&amp; 问题三：什么时候使用background什么时候使用img？</h3><p>边整理区别的时候，再stack Overflow上看到了一个整理的很好的答案，感觉开启了新世界的大门。在此，我要推荐一下stack Overflow这个网站，除了全是英语阅读比较困难外，基本上很多问题都能在上面找到。果然对程序员来说stack Overflow和github两个网站就能解决大部分问题。比搜索引擎查的答案更加的全面，在此引用一下答案</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/answer.png\" alt=\"answer\">\n\n<p>上面的答案可以说是很全面了，那么大概翻译一下，提取几个要点，如下</p>\n<h5 id=\"使用img的情况\"><a href=\"#使用img的情况\" class=\"headerlink\" title=\"使用img的情况\"></a>使用img的情况</h5><ul>\n<li><p>当你想让打印页面时，你想让图片被默认包含在你的页面上，请使用img标签</p>\n</li>\n<li><p>当图像带有重要语义的时候，比如警告图标，请使用img标签（带有alt文本）因为这样的话即时因为一些问题而使图片没有加载出来，但是由于有alt属性，可以让文本代替图片，以至于重要信息不会因为图片无法加载而丢失。想象一下，如果使用background-image的话，倘若没法加载图片将会怎么样，也许就会错过一些重要的信息</p>\n</li>\n<li><p>如果图像是内容的一部分，最好使用img+alt </p>\n</li>\n<li><p>如果你想让图像成比例放大或缩小，请使用img标签。background-image只能制定宽和高，虽然可以指定background-size，但依然不是成比例的，必然有一部分内容会缺失。</p>\n</li>\n<li><p>使用img而不是背景图像可以显著提高动画在后台的性能【这句话暂时并未理解】</p>\n</li>\n<li><p>当你想你的图片能被搜索引擎搜索到时，或者说更便于做SEO【答案来自其他人】</p>\n</li>\n</ul>\n<h5 id=\"使用backgroung-image的情况\"><a href=\"#使用backgroung-image的情况\" class=\"headerlink\" title=\"使用backgroung-image的情况\"></a>使用backgroung-image的情况</h5><ul>\n<li><p>如果图像不是内容的一部分，请使用CSS背景图像</p>\n</li>\n<li><p>使用CSS背景图像做图像替换的文本</p>\n</li>\n<li><p>如果你需要提高下载时间，就像CSS sprites 【css sprites的一个特性是似乎能让所有图片合成一张加载，这样能改善下载时间，为什么呢，学过数字图像处理可以知道，每个图像的颜色表都不一样，每一张图都需要一个颜色表的话自然不如只有一个颜色表占用空间少。具体css sprites内容还不太清楚】</p>\n</li>\n<li><p>使用backgroung-size，以拉伸背景图像填充整个窗口。</p>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>那么整理一下可以知道了，当使用不包含内容的图像，比如说背景的时候，那么完全可以使用background-image来让工作变得更加简单。但是倘若包含重要内容，应该使用img来作为一个HTML标签存在其中。</p>\n<h3 id=\"问题二：background-size各个属性功能？\"><a href=\"#问题二：background-size各个属性功能？\" class=\"headerlink\" title=\"问题二：background-size各个属性功能？\"></a>问题二：background-size各个属性功能？</h3><p>引自MDN</p>\n<blockquote>\n<p>background 是CSS简写属性，用来集中设置各种背景属性。background 可以用来设置一个或多个属性:background-color, background-image, background-position, background-repeat, background-size, background-attachment。</p>\n</blockquote>\n<p>background初始值：</p>\n<blockquote>\n<p>background-image: none<br>  background-position: 0% 0%<br>  background-size: auto auto<br>  background-repeat: repeat<br>  background-origin: padding-box<br>  background-clip: border-box<br>  background-attachment: scroll<br>  background-color: transparent</p>\n</blockquote>\n<ul>\n<li><p><code>background-color</code>用于设置背景色</p>\n</li>\n<li><p><code>background-image</code>用于引入图片</p>\n</li>\n<li><p><code>background-position</code>规定背景图像位置</p>\n</li>\n<li><p><code>background-repeat</code>规定是否平铺</p>\n</li>\n<li><p><code>background-size</code>规定图像尺寸</p>\n</li>\n<li><p><code>background-attachment</code>设置背景图像是否固定或者随着页面的其余部分滚动</p>\n</li>\n</ul>\n<h5 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h5><p>测试图700px,700px</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/demo.jpg\" height=\"200px\">\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>background-position<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span></span><br><span class=\"line\"><span class=\"css\">      //<span class=\"attribute\">background-position</span>: <span class=\"number\">0%</span> center;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将position注释的时候，可以看到处于默认状态0% 0%的状态，那么注释之后原图变成了</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab1-1.jpg\" height=\"200px\">\n\n<p>可以看到左边框的黑线仍能显示，而上边框的黑线已经没有了，那么得出结论，第一个值可以理解成左右位置，而第二个则可以理解成上下位置，center则代表上下居中。其他同理。</p>\n<h5 id=\"background-repeat\"><a href=\"#background-repeat\" class=\"headerlink\" title=\"background-repeat\"></a>background-repeat</h5><p>当图片宽或者高小于css指定的宽或者高时，空白的部分将被平铺，如图</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-1.jpg\" height=\"200px\">\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">730px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">730px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: repeat;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当设置成no-repeat时，可以看到有黑色背景透出，则可看出效果。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-2.jpg\" height=\"200px\">\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"background-size\"><a href=\"#background-size\" class=\"headerlink\" title=\"background-size\"></a>background-size</h5><p>做一个测试，来说明具体工作情况</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-1.jpg\" height=\"200px\">\n\n<p>可以看到不设置background-size时显示不全</p>\n<p>1.当都设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-2.jpg\" height=\"200px\">\n\n<p>可以看到长和宽都被拉伸到了最大限度</p>\n<p>2.当第一个设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> auto;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-3.jpg\" height=\"200px\">\n\n<p>可以看到宽被拉到100%</p>\n<p>3.当第二个设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-size</span>: auto <span class=\"number\">100%</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-4.jpg\" height=\"200px\">\n\n<p>可以看到高被拉到了100%</p>\n<p>4.设置成cover</p>\n<blockquote>\n<p>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-5.jpg\" height=\"200px\">\n\n<p>改变width和height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-6.jpg\" height=\"200px\">\n\n<p>可以看到结果不一样，即解释了什么叫做使背景完全覆盖背景区域,就是说将宽或者高大的哪一个拉到最大</p>\n<p>5.设置成contain </p>\n<blockquote>\n<p>把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</p>\n</blockquote>\n<p>测试方法同上，第一个设置<code>width:400px;height:300px</code>第二个设置<code>width:300px;height:400px</code>，结果如下，第一个</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-7.jpg\" height=\"200px\">\n\n<p>第二个</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-8.jpg\" height=\"200px\">\n\n<p>则可以充分看出确实是高或者宽完全适应背景区域</p>\n<h5 id=\"background-attachment\"><a href=\"#background-attachment\" class=\"headerlink\" title=\"background-attachment\"></a>background-attachment</h5><blockquote>\n<p>scroll  默认值。背景图像会随着页面其余部分的滚动而移动。<br>fixed  当页面的其余部分滚动时，背景图像不会移动。<br>inherit  规定应该从父元素继承 background-attachment 属性的设置。</p>\n</blockquote>\n<p>默认是会滚动的，当设置成fixed的时候，背景就会固定不动，可以借此做出比较炫酷的效果。</p>\n<h3 id=\"问题四：关于轮播图\"><a href=\"#问题四：关于轮播图\" class=\"headerlink\" title=\"问题四：关于轮播图\"></a>问题四：关于轮播图</h3><p>关于这个问题，我想了想，倘若使用img标签的话（通过上面整理img应该更适合做轮播图，因为它在页面中可以说是比较重要的元素之一），那么就要从图片的大小上下手了，图片必须有一定的规范。首先轮播图的每个图片大小必须相同（或者说宽高比例相同），而且比例要适应浏览器，防止宽高比例不均的时候发生页面过大或过小的情况。我想这可能都是一些设计师的规范，而我对设计的领域了解并不深入，也许我想的是对的，也许是错的。但是这是我目前能想到的唯一解决方案。</p>\n<p>使用background确实方便，但是为了网站的规范，我觉得有必要使用img标签。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>没想到竟然整理了这么多，background元素属性虽然看起来简单，但整理之前真让我详细的说我并不能说出来十分确切的内容，整理之后觉得对这方面的内容了解得更加深入的许多。</p>\n","site":{"data":{}},"excerpt":"<p>background这个属性可以说是很常见了，基本上是使用的非常频繁的一个属性，但是真说起来background属性，我又不能说是十分的清楚。本来说准备整理一下background属性，但是在整理的时候又发现了许多不清楚的地方，比如说和img区别？那么先把问题一个一个罗列下来，逐个解决。</p>\n<p>在此，我要更正一个错误。那就是，原来我认为能用background-image解决的就不用img标签(似乎img用不到了？)，但是详细了解之后认为这是不正确的，区别将在问题一进行介绍。</p>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>1.background-image和img的区别？</p>\n<p>2.background-size各个属性功能？</p>\n<p>3.什么时候使用background什么时候使用img？</p>\n<p>4.使用background-image的时候可以使其自适应屏幕宽度（比如说做轮播图的时候，可以指定宽度为width:100%，然后再指定一个height，使用background-size来让其充满），但是若使用img的话如何来达到这种效果。在我的印象中，img若指定width:100%的话height也会相应的变化，意思就是成比例变化，如果说同时指定width和height的话，若比例不对，图像会变形（拉伸、压缩之类的）。那么这种情况下，如何适应用户的不同屏幕？这个问题也是整理这篇文章的最大原因。</p>\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><h3 id=\"问题一：background-image和img的区别-amp-amp-问题三：什么时候使用background什么时候使用img？\"><a href=\"#问题一：background-image和img的区别-amp-amp-问题三：什么时候使用background什么时候使用img？\" class=\"headerlink\" title=\"问题一：background-image和img的区别 &amp;&amp; 问题三：什么时候使用background什么时候使用img？\"></a>问题一：background-image和img的区别 &amp;&amp; 问题三：什么时候使用background什么时候使用img？</h3><p>边整理区别的时候，再stack Overflow上看到了一个整理的很好的答案，感觉开启了新世界的大门。在此，我要推荐一下stack Overflow这个网站，除了全是英语阅读比较困难外，基本上很多问题都能在上面找到。果然对程序员来说stack Overflow和github两个网站就能解决大部分问题。比搜索引擎查的答案更加的全面，在此引用一下答案</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/answer.png\" alt=\"answer\">\n\n<p>上面的答案可以说是很全面了，那么大概翻译一下，提取几个要点，如下</p>\n<h5 id=\"使用img的情况\"><a href=\"#使用img的情况\" class=\"headerlink\" title=\"使用img的情况\"></a>使用img的情况</h5><ul>\n<li><p>当你想让打印页面时，你想让图片被默认包含在你的页面上，请使用img标签</p>\n</li>\n<li><p>当图像带有重要语义的时候，比如警告图标，请使用img标签（带有alt文本）因为这样的话即时因为一些问题而使图片没有加载出来，但是由于有alt属性，可以让文本代替图片，以至于重要信息不会因为图片无法加载而丢失。想象一下，如果使用background-image的话，倘若没法加载图片将会怎么样，也许就会错过一些重要的信息</p>\n</li>\n<li><p>如果图像是内容的一部分，最好使用img+alt </p>\n</li>\n<li><p>如果你想让图像成比例放大或缩小，请使用img标签。background-image只能制定宽和高，虽然可以指定background-size，但依然不是成比例的，必然有一部分内容会缺失。</p>\n</li>\n<li><p>使用img而不是背景图像可以显著提高动画在后台的性能【这句话暂时并未理解】</p>\n</li>\n<li><p>当你想你的图片能被搜索引擎搜索到时，或者说更便于做SEO【答案来自其他人】</p>\n</li>\n</ul>\n<h5 id=\"使用backgroung-image的情况\"><a href=\"#使用backgroung-image的情况\" class=\"headerlink\" title=\"使用backgroung-image的情况\"></a>使用backgroung-image的情况</h5><ul>\n<li><p>如果图像不是内容的一部分，请使用CSS背景图像</p>\n</li>\n<li><p>使用CSS背景图像做图像替换的文本</p>\n</li>\n<li><p>如果你需要提高下载时间，就像CSS sprites 【css sprites的一个特性是似乎能让所有图片合成一张加载，这样能改善下载时间，为什么呢，学过数字图像处理可以知道，每个图像的颜色表都不一样，每一张图都需要一个颜色表的话自然不如只有一个颜色表占用空间少。具体css sprites内容还不太清楚】</p>\n</li>\n<li><p>使用backgroung-size，以拉伸背景图像填充整个窗口。</p>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>那么整理一下可以知道了，当使用不包含内容的图像，比如说背景的时候，那么完全可以使用background-image来让工作变得更加简单。但是倘若包含重要内容，应该使用img来作为一个HTML标签存在其中。</p>\n<h3 id=\"问题二：background-size各个属性功能？\"><a href=\"#问题二：background-size各个属性功能？\" class=\"headerlink\" title=\"问题二：background-size各个属性功能？\"></a>问题二：background-size各个属性功能？</h3><p>引自MDN</p>\n<blockquote>\n<p>background 是CSS简写属性，用来集中设置各种背景属性。background 可以用来设置一个或多个属性:background-color, background-image, background-position, background-repeat, background-size, background-attachment。</p>\n</blockquote>\n<p>background初始值：</p>\n<blockquote>\n<p>background-image: none<br>  background-position: 0% 0%<br>  background-size: auto auto<br>  background-repeat: repeat<br>  background-origin: padding-box<br>  background-clip: border-box<br>  background-attachment: scroll<br>  background-color: transparent</p>\n</blockquote>\n<ul>\n<li><p><code>background-color</code>用于设置背景色</p>\n</li>\n<li><p><code>background-image</code>用于引入图片</p>\n</li>\n<li><p><code>background-position</code>规定背景图像位置</p>\n</li>\n<li><p><code>background-repeat</code>规定是否平铺</p>\n</li>\n<li><p><code>background-size</code>规定图像尺寸</p>\n</li>\n<li><p><code>background-attachment</code>设置背景图像是否固定或者随着页面的其余部分滚动</p>\n</li>\n</ul>\n<h5 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h5><p>测试图700px,700px</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/demo.jpg\" height=\"200px\">\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>background-position<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span></span><br><span class=\"line\"><span class=\"css\">      //<span class=\"attribute\">background-position</span>: <span class=\"number\">0%</span> center;</span></span><br><span class=\"line\"><span class=\"css\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将position注释的时候，可以看到处于默认状态0% 0%的状态，那么注释之后原图变成了</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab1-1.jpg\" height=\"200px\">\n\n<p>可以看到左边框的黑线仍能显示，而上边框的黑线已经没有了，那么得出结论，第一个值可以理解成左右位置，而第二个则可以理解成上下位置，center则代表上下居中。其他同理。</p>\n<h5 id=\"background-repeat\"><a href=\"#background-repeat\" class=\"headerlink\" title=\"background-repeat\"></a>background-repeat</h5><p>当图片宽或者高小于css指定的宽或者高时，空白的部分将被平铺，如图</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-1.jpg\" height=\"200px\">\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">730px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">730px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: repeat;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当设置成no-repeat时，可以看到有黑色背景透出，则可看出效果。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab2-2.jpg\" height=\"200px\">\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"background-size\"><a href=\"#background-size\" class=\"headerlink\" title=\"background-size\"></a>background-size</h5><p>做一个测试，来说明具体工作情况</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-1.jpg\" height=\"200px\">\n\n<p>可以看到不设置background-size时显示不全</p>\n<p>1.当都设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-2.jpg\" height=\"200px\">\n\n<p>可以看到长和宽都被拉伸到了最大限度</p>\n<p>2.当第一个设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> auto;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-3.jpg\" height=\"200px\">\n\n<p>可以看到宽被拉到100%</p>\n<p>3.当第二个设置成100%时</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-size</span>: auto <span class=\"number\">100%</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-4.jpg\" height=\"200px\">\n\n<p>可以看到高被拉到了100%</p>\n<p>4.设置成cover</p>\n<blockquote>\n<p>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-5.jpg\" height=\"200px\">\n\n<p>改变width和height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;demo.jpg&quot;</span>);</span><br><span class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">      <span class=\"comment\">/*background-position: 0% center;*/</span></span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-6.jpg\" height=\"200px\">\n\n<p>可以看到结果不一样，即解释了什么叫做使背景完全覆盖背景区域,就是说将宽或者高大的哪一个拉到最大</p>\n<p>5.设置成contain </p>\n<blockquote>\n<p>把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</p>\n</blockquote>\n<p>测试方法同上，第一个设置<code>width:400px;height:300px</code>第二个设置<code>width:300px;height:400px</code>，结果如下，第一个</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-7.jpg\" height=\"200px\">\n\n<p>第二个</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-17/Lab3-8.jpg\" height=\"200px\">\n\n<p>则可以充分看出确实是高或者宽完全适应背景区域</p>\n<h5 id=\"background-attachment\"><a href=\"#background-attachment\" class=\"headerlink\" title=\"background-attachment\"></a>background-attachment</h5><blockquote>\n<p>scroll  默认值。背景图像会随着页面其余部分的滚动而移动。<br>fixed  当页面的其余部分滚动时，背景图像不会移动。<br>inherit  规定应该从父元素继承 background-attachment 属性的设置。</p>\n</blockquote>\n<p>默认是会滚动的，当设置成fixed的时候，背景就会固定不动，可以借此做出比较炫酷的效果。</p>\n<h3 id=\"问题四：关于轮播图\"><a href=\"#问题四：关于轮播图\" class=\"headerlink\" title=\"问题四：关于轮播图\"></a>问题四：关于轮播图</h3><p>关于这个问题，我想了想，倘若使用img标签的话（通过上面整理img应该更适合做轮播图，因为它在页面中可以说是比较重要的元素之一），那么就要从图片的大小上下手了，图片必须有一定的规范。首先轮播图的每个图片大小必须相同（或者说宽高比例相同），而且比例要适应浏览器，防止宽高比例不均的时候发生页面过大或过小的情况。我想这可能都是一些设计师的规范，而我对设计的领域了解并不深入，也许我想的是对的，也许是错的。但是这是我目前能想到的唯一解决方案。</p>\n<p>使用background确实方便，但是为了网站的规范，我觉得有必要使用img标签。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>没想到竟然整理了这么多，background元素属性虽然看起来简单，但整理之前真让我详细的说我并不能说出来十分确切的内容，整理之后觉得对这方面的内容了解得更加深入的许多。</p>"},{"title":"npm的一些简单整理","date":"2018-03-24T08:09:11.000Z","toc":true,"_content":"\n关于npm的使用一直不是很熟练，想要操作一些东西的时候总要查一下，觉得太麻烦了，所以这次就准备整理一下使用npm过程中的一些命令，以方便日后快速查询\n\n<!--more-->\n\n## 全局安装和本地安装\n\n```bash \nnpm install module-name # 本地安装\nnpm install -g module-name # 全局安装 \n```\n\n### 全局安装和本地安装区别\n\n> 本地安装\n> 1. 将安装包放在 ./node_modules 下（运行npm时所在的目录）\n> 2. 可以通过 require() 来引入本地安装的包\n\n> 全局安装\n> 1. 将安装包放在 /usr/local 下\n> 2. 可以直接在命令行里使用\n\n## 删除依赖模块\n\n```bash \nnpm uninstall module-name # 删除模块，但不会删除dependencies中信息\nnpm uninstall module-name --save # 同时删除模块留在dependencies下的对应信息\nnpm uninstall 模块 --save-dev 同时删除模块留在devDependencies下的对应信息\n```\n\n## pockage.json\n\n### 介绍\n\n> 每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。\n\n那么可以看出来package.json在项目中是很重要的，是一些配置信息，那么实际运行过程中可能需要一些包的支持，使用`npm install`即可完成安装。\n\n### 将依赖模块添加到package.json中\n\n使用`--save`和`--save -dev`可以省掉手动修改package.json文件的部分，这里面就涉及到二者的区别了。\n\n```bash \nnpm install module-name --save\n```\n\n自动把模块和版本号添加到`dependencies`部分。而\n\n```bash \nnpm install module-name --save-dev #现在会报错，已被遗弃？\n\nnpm install mudule-name --save --only=dev #新\n```\n\n自动把模块和版本号添加到`devdependencies`部分。\n\n那么`dependencies`和`devdependencies`有什么区别呢？\n\n前者是项目运行时的依赖模块，后者则是项目开发时的模块。那么什么意思呢？项目运行意思就是在实际运行时候依赖的模块，而开发时候依赖的模块可以理解为开发时候依赖的模块，**开发时候依赖的模块实际运行时未必需要**。举个例子，比如说我使用less来写样式，最后编译成css，那么less就是我在开发时候依赖的模块，但是实际运行时侯并不需要less模块。\n\n\n\n---------------------2019.7.17-----------------\n\n## npm发布相关\n\n这个发布真的是花了不少时间。依次整理一下遇到的问题。\n\n### 1. 2FA验证问题\n\n双重验证有三个模式，分别是只在登陆删除package的时候需要验证（较严格），还有发布等等时候也要验证（最严格），以及最后的无需验证。[如何使用双因素身份验证](https://cloud.tencent.com/developer/section/1490246)\n\n这里需要手机装个App，不过需要Google服务，最后手机直接下了个谷歌空间了事。\n\n### 2. 发布仓库地址\n\n```bash\nnpm config set registry http://registry.npmjs.org \n```\n\n后面可以根据需要自行改动，不过nrm可以管理npm仓库地址\n\n```bash\nnrm     #展示nrm可用命令\nnrm ls  #列出已经配置的所有仓库\nnrm test  #测试所有仓库的响应时间\nnrm add <registry> <url> #新增仓库\nnrm use <registry> #切换仓库\n```\n\n### 3. publish Failed PUT 401\n\n发布的是已经存在的包，且不是发布者，就会报这个错，解决方法：加作用域。\n\n即在package.json文件的name前面加上`@用户名/`，也可以使用命令行\n\n```bash\nnpm init --scope=@qxiaoqi -y\n```\n\n注意这里一定要是自己的用户名，不正确的话，会报403错误。\n\n### 4. publish Failed PUT 402\n\nnpm默认是私有发布，需要收费。公共发布命令行\n\n```bash\nnpm publish --access public\n```\n\n## 发布小结\n\n搞了半天终于搞好了，以致于发布成功之后收到邮件还有点小激动。。。","source":"_posts/13. npm的一些简单整理.md","raw":"---\ntitle: npm的一些简单整理\ndate: 2018-03-24 16:09:11\ntoc: true\ncategories:\n- 前端\ntags:\n- npm \n---\n\n关于npm的使用一直不是很熟练，想要操作一些东西的时候总要查一下，觉得太麻烦了，所以这次就准备整理一下使用npm过程中的一些命令，以方便日后快速查询\n\n<!--more-->\n\n## 全局安装和本地安装\n\n```bash \nnpm install module-name # 本地安装\nnpm install -g module-name # 全局安装 \n```\n\n### 全局安装和本地安装区别\n\n> 本地安装\n> 1. 将安装包放在 ./node_modules 下（运行npm时所在的目录）\n> 2. 可以通过 require() 来引入本地安装的包\n\n> 全局安装\n> 1. 将安装包放在 /usr/local 下\n> 2. 可以直接在命令行里使用\n\n## 删除依赖模块\n\n```bash \nnpm uninstall module-name # 删除模块，但不会删除dependencies中信息\nnpm uninstall module-name --save # 同时删除模块留在dependencies下的对应信息\nnpm uninstall 模块 --save-dev 同时删除模块留在devDependencies下的对应信息\n```\n\n## pockage.json\n\n### 介绍\n\n> 每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。\n\n那么可以看出来package.json在项目中是很重要的，是一些配置信息，那么实际运行过程中可能需要一些包的支持，使用`npm install`即可完成安装。\n\n### 将依赖模块添加到package.json中\n\n使用`--save`和`--save -dev`可以省掉手动修改package.json文件的部分，这里面就涉及到二者的区别了。\n\n```bash \nnpm install module-name --save\n```\n\n自动把模块和版本号添加到`dependencies`部分。而\n\n```bash \nnpm install module-name --save-dev #现在会报错，已被遗弃？\n\nnpm install mudule-name --save --only=dev #新\n```\n\n自动把模块和版本号添加到`devdependencies`部分。\n\n那么`dependencies`和`devdependencies`有什么区别呢？\n\n前者是项目运行时的依赖模块，后者则是项目开发时的模块。那么什么意思呢？项目运行意思就是在实际运行时候依赖的模块，而开发时候依赖的模块可以理解为开发时候依赖的模块，**开发时候依赖的模块实际运行时未必需要**。举个例子，比如说我使用less来写样式，最后编译成css，那么less就是我在开发时候依赖的模块，但是实际运行时侯并不需要less模块。\n\n\n\n---------------------2019.7.17-----------------\n\n## npm发布相关\n\n这个发布真的是花了不少时间。依次整理一下遇到的问题。\n\n### 1. 2FA验证问题\n\n双重验证有三个模式，分别是只在登陆删除package的时候需要验证（较严格），还有发布等等时候也要验证（最严格），以及最后的无需验证。[如何使用双因素身份验证](https://cloud.tencent.com/developer/section/1490246)\n\n这里需要手机装个App，不过需要Google服务，最后手机直接下了个谷歌空间了事。\n\n### 2. 发布仓库地址\n\n```bash\nnpm config set registry http://registry.npmjs.org \n```\n\n后面可以根据需要自行改动，不过nrm可以管理npm仓库地址\n\n```bash\nnrm     #展示nrm可用命令\nnrm ls  #列出已经配置的所有仓库\nnrm test  #测试所有仓库的响应时间\nnrm add <registry> <url> #新增仓库\nnrm use <registry> #切换仓库\n```\n\n### 3. publish Failed PUT 401\n\n发布的是已经存在的包，且不是发布者，就会报这个错，解决方法：加作用域。\n\n即在package.json文件的name前面加上`@用户名/`，也可以使用命令行\n\n```bash\nnpm init --scope=@qxiaoqi -y\n```\n\n注意这里一定要是自己的用户名，不正确的话，会报403错误。\n\n### 4. publish Failed PUT 402\n\nnpm默认是私有发布，需要收费。公共发布命令行\n\n```bash\nnpm publish --access public\n```\n\n## 发布小结\n\n搞了半天终于搞好了，以致于发布成功之后收到邮件还有点小激动。。。","slug":"13. npm的一些简单整理","published":1,"updated":"2021-09-30T06:46:07.357Z","_id":"cku41le8h0005idp27xy77zqr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>关于npm的使用一直不是很熟练，想要操作一些东西的时候总要查一下，觉得太麻烦了，所以这次就准备整理一下使用npm过程中的一些命令，以方便日后快速查询</p>\n<span id=\"more\"></span>\n\n<h2 id=\"全局安装和本地安装\"><a href=\"#全局安装和本地安装\" class=\"headerlink\" title=\"全局安装和本地安装\"></a>全局安装和本地安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name <span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">npm install -g module-name <span class=\"comment\"># 全局安装 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局安装和本地安装区别\"><a href=\"#全局安装和本地安装区别\" class=\"headerlink\" title=\"全局安装和本地安装区别\"></a>全局安装和本地安装区别</h3><blockquote>\n<p>本地安装</p>\n<ol>\n<li>将安装包放在 ./node_modules 下（运行npm时所在的目录）</li>\n<li>可以通过 require() 来引入本地安装的包</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>全局安装</p>\n<ol>\n<li>将安装包放在 /usr/local 下</li>\n<li>可以直接在命令行里使用</li>\n</ol>\n</blockquote>\n<h2 id=\"删除依赖模块\"><a href=\"#删除依赖模块\" class=\"headerlink\" title=\"删除依赖模块\"></a>删除依赖模块</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall module-name <span class=\"comment\"># 删除模块，但不会删除dependencies中信息</span></span><br><span class=\"line\">npm uninstall module-name --save <span class=\"comment\"># 同时删除模块留在dependencies下的对应信息</span></span><br><span class=\"line\">npm uninstall 模块 --save-dev 同时删除模块留在devDependencies下的对应信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pockage-json\"><a href=\"#pockage-json\" class=\"headerlink\" title=\"pockage.json\"></a>pockage.json</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>\n</blockquote>\n<p>那么可以看出来package.json在项目中是很重要的，是一些配置信息，那么实际运行过程中可能需要一些包的支持，使用<code>npm install</code>即可完成安装。</p>\n<h3 id=\"将依赖模块添加到package-json中\"><a href=\"#将依赖模块添加到package-json中\" class=\"headerlink\" title=\"将依赖模块添加到package.json中\"></a>将依赖模块添加到package.json中</h3><p>使用<code>--save</code>和<code>--save -dev</code>可以省掉手动修改package.json文件的部分，这里面就涉及到二者的区别了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name --save</span><br></pre></td></tr></table></figure>\n\n<p>自动把模块和版本号添加到<code>dependencies</code>部分。而</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name --save-dev <span class=\"comment\">#现在会报错，已被遗弃？</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install mudule-name --save --only=dev <span class=\"comment\">#新</span></span><br></pre></td></tr></table></figure>\n\n<p>自动把模块和版本号添加到<code>devdependencies</code>部分。</p>\n<p>那么<code>dependencies</code>和<code>devdependencies</code>有什么区别呢？</p>\n<p>前者是项目运行时的依赖模块，后者则是项目开发时的模块。那么什么意思呢？项目运行意思就是在实际运行时候依赖的模块，而开发时候依赖的模块可以理解为开发时候依赖的模块，<strong>开发时候依赖的模块实际运行时未必需要</strong>。举个例子，比如说我使用less来写样式，最后编译成css，那么less就是我在开发时候依赖的模块，但是实际运行时侯并不需要less模块。</p>\n<p>———————2019.7.17—————–</p>\n<h2 id=\"npm发布相关\"><a href=\"#npm发布相关\" class=\"headerlink\" title=\"npm发布相关\"></a>npm发布相关</h2><p>这个发布真的是花了不少时间。依次整理一下遇到的问题。</p>\n<h3 id=\"1-2FA验证问题\"><a href=\"#1-2FA验证问题\" class=\"headerlink\" title=\"1. 2FA验证问题\"></a>1. 2FA验证问题</h3><p>双重验证有三个模式，分别是只在登陆删除package的时候需要验证（较严格），还有发布等等时候也要验证（最严格），以及最后的无需验证。<a href=\"https://cloud.tencent.com/developer/section/1490246\">如何使用双因素身份验证</a></p>\n<p>这里需要手机装个App，不过需要Google服务，最后手机直接下了个谷歌空间了事。</p>\n<h3 id=\"2-发布仓库地址\"><a href=\"#2-发布仓库地址\" class=\"headerlink\" title=\"2. 发布仓库地址\"></a>2. 发布仓库地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://registry.npmjs.org </span><br></pre></td></tr></table></figure>\n\n<p>后面可以根据需要自行改动，不过nrm可以管理npm仓库地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm     <span class=\"comment\">#展示nrm可用命令</span></span><br><span class=\"line\">nrm ls  <span class=\"comment\">#列出已经配置的所有仓库</span></span><br><span class=\"line\">nrm <span class=\"built_in\">test</span>  <span class=\"comment\">#测试所有仓库的响应时间</span></span><br><span class=\"line\">nrm add &lt;registry&gt; &lt;url&gt; <span class=\"comment\">#新增仓库</span></span><br><span class=\"line\">nrm use &lt;registry&gt; <span class=\"comment\">#切换仓库</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-publish-Failed-PUT-401\"><a href=\"#3-publish-Failed-PUT-401\" class=\"headerlink\" title=\"3. publish Failed PUT 401\"></a>3. publish Failed PUT 401</h3><p>发布的是已经存在的包，且不是发布者，就会报这个错，解决方法：加作用域。</p>\n<p>即在package.json文件的name前面加上<code>@用户名/</code>，也可以使用命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init --scope=@qxiaoqi -y</span><br></pre></td></tr></table></figure>\n\n<p>注意这里一定要是自己的用户名，不正确的话，会报403错误。</p>\n<h3 id=\"4-publish-Failed-PUT-402\"><a href=\"#4-publish-Failed-PUT-402\" class=\"headerlink\" title=\"4. publish Failed PUT 402\"></a>4. publish Failed PUT 402</h3><p>npm默认是私有发布，需要收费。公共发布命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish --access public</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布小结\"><a href=\"#发布小结\" class=\"headerlink\" title=\"发布小结\"></a>发布小结</h2><p>搞了半天终于搞好了，以致于发布成功之后收到邮件还有点小激动。。。</p>\n","site":{"data":{}},"excerpt":"<p>关于npm的使用一直不是很熟练，想要操作一些东西的时候总要查一下，觉得太麻烦了，所以这次就准备整理一下使用npm过程中的一些命令，以方便日后快速查询</p>","more":"<h2 id=\"全局安装和本地安装\"><a href=\"#全局安装和本地安装\" class=\"headerlink\" title=\"全局安装和本地安装\"></a>全局安装和本地安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name <span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">npm install -g module-name <span class=\"comment\"># 全局安装 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局安装和本地安装区别\"><a href=\"#全局安装和本地安装区别\" class=\"headerlink\" title=\"全局安装和本地安装区别\"></a>全局安装和本地安装区别</h3><blockquote>\n<p>本地安装</p>\n<ol>\n<li>将安装包放在 ./node_modules 下（运行npm时所在的目录）</li>\n<li>可以通过 require() 来引入本地安装的包</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>全局安装</p>\n<ol>\n<li>将安装包放在 /usr/local 下</li>\n<li>可以直接在命令行里使用</li>\n</ol>\n</blockquote>\n<h2 id=\"删除依赖模块\"><a href=\"#删除依赖模块\" class=\"headerlink\" title=\"删除依赖模块\"></a>删除依赖模块</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall module-name <span class=\"comment\"># 删除模块，但不会删除dependencies中信息</span></span><br><span class=\"line\">npm uninstall module-name --save <span class=\"comment\"># 同时删除模块留在dependencies下的对应信息</span></span><br><span class=\"line\">npm uninstall 模块 --save-dev 同时删除模块留在devDependencies下的对应信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pockage-json\"><a href=\"#pockage-json\" class=\"headerlink\" title=\"pockage.json\"></a>pockage.json</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>\n</blockquote>\n<p>那么可以看出来package.json在项目中是很重要的，是一些配置信息，那么实际运行过程中可能需要一些包的支持，使用<code>npm install</code>即可完成安装。</p>\n<h3 id=\"将依赖模块添加到package-json中\"><a href=\"#将依赖模块添加到package-json中\" class=\"headerlink\" title=\"将依赖模块添加到package.json中\"></a>将依赖模块添加到package.json中</h3><p>使用<code>--save</code>和<code>--save -dev</code>可以省掉手动修改package.json文件的部分，这里面就涉及到二者的区别了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name --save</span><br></pre></td></tr></table></figure>\n\n<p>自动把模块和版本号添加到<code>dependencies</code>部分。而</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install module-name --save-dev <span class=\"comment\">#现在会报错，已被遗弃？</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install mudule-name --save --only=dev <span class=\"comment\">#新</span></span><br></pre></td></tr></table></figure>\n\n<p>自动把模块和版本号添加到<code>devdependencies</code>部分。</p>\n<p>那么<code>dependencies</code>和<code>devdependencies</code>有什么区别呢？</p>\n<p>前者是项目运行时的依赖模块，后者则是项目开发时的模块。那么什么意思呢？项目运行意思就是在实际运行时候依赖的模块，而开发时候依赖的模块可以理解为开发时候依赖的模块，<strong>开发时候依赖的模块实际运行时未必需要</strong>。举个例子，比如说我使用less来写样式，最后编译成css，那么less就是我在开发时候依赖的模块，但是实际运行时侯并不需要less模块。</p>\n<p>———————2019.7.17—————–</p>\n<h2 id=\"npm发布相关\"><a href=\"#npm发布相关\" class=\"headerlink\" title=\"npm发布相关\"></a>npm发布相关</h2><p>这个发布真的是花了不少时间。依次整理一下遇到的问题。</p>\n<h3 id=\"1-2FA验证问题\"><a href=\"#1-2FA验证问题\" class=\"headerlink\" title=\"1. 2FA验证问题\"></a>1. 2FA验证问题</h3><p>双重验证有三个模式，分别是只在登陆删除package的时候需要验证（较严格），还有发布等等时候也要验证（最严格），以及最后的无需验证。<a href=\"https://cloud.tencent.com/developer/section/1490246\">如何使用双因素身份验证</a></p>\n<p>这里需要手机装个App，不过需要Google服务，最后手机直接下了个谷歌空间了事。</p>\n<h3 id=\"2-发布仓库地址\"><a href=\"#2-发布仓库地址\" class=\"headerlink\" title=\"2. 发布仓库地址\"></a>2. 发布仓库地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://registry.npmjs.org </span><br></pre></td></tr></table></figure>\n\n<p>后面可以根据需要自行改动，不过nrm可以管理npm仓库地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm     <span class=\"comment\">#展示nrm可用命令</span></span><br><span class=\"line\">nrm ls  <span class=\"comment\">#列出已经配置的所有仓库</span></span><br><span class=\"line\">nrm <span class=\"built_in\">test</span>  <span class=\"comment\">#测试所有仓库的响应时间</span></span><br><span class=\"line\">nrm add &lt;registry&gt; &lt;url&gt; <span class=\"comment\">#新增仓库</span></span><br><span class=\"line\">nrm use &lt;registry&gt; <span class=\"comment\">#切换仓库</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-publish-Failed-PUT-401\"><a href=\"#3-publish-Failed-PUT-401\" class=\"headerlink\" title=\"3. publish Failed PUT 401\"></a>3. publish Failed PUT 401</h3><p>发布的是已经存在的包，且不是发布者，就会报这个错，解决方法：加作用域。</p>\n<p>即在package.json文件的name前面加上<code>@用户名/</code>，也可以使用命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init --scope=@qxiaoqi -y</span><br></pre></td></tr></table></figure>\n\n<p>注意这里一定要是自己的用户名，不正确的话，会报403错误。</p>\n<h3 id=\"4-publish-Failed-PUT-402\"><a href=\"#4-publish-Failed-PUT-402\" class=\"headerlink\" title=\"4. publish Failed PUT 402\"></a>4. publish Failed PUT 402</h3><p>npm默认是私有发布，需要收费。公共发布命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish --access public</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布小结\"><a href=\"#发布小结\" class=\"headerlink\" title=\"发布小结\"></a>发布小结</h2><p>搞了半天终于搞好了，以致于发布成功之后收到邮件还有点小激动。。。</p>"},{"title":"动手写一个hexo主题（上）","date":"2018-03-28T08:18:31.000Z","toc":true,"_content":"\n自己写一个博客主题的想法已经很久了，而且加上想在找工作的时候能有一些拿得出手而且能体现我个人特点的作品出来，能体现出来具有代码能力+一点设计能力。感觉博客主题就是一个很好的作品。刚好之前用了一下ejs，了解了一下模板引擎的内容，觉得技术上已经具备的差不多了，于是开始动手实现了。在这里要感谢一下我的第一个博客主题yilia的作者，和indigo主题的作者，经常有一些不知道如何写的地方，查看了它们的主题源码。\n\n<!--more-->\n\n## 前期准备\n\n首先确定技术栈：ejs+less+Jquery\n\n基本的技术栈就是上面所说的内容了，hexo提供了很多方便的变量和辅助函数，更方便我们自己实现一个自己的博客内容。\n\n### 项目结构\n\n主要介绍一下themes里面的结构，外面需要注意的就是一个`_config.yml`的文件，这个文件放了一些配置内容，yml文件即YAML语言，是一种用来写配置文件的语言，比JSON要更加的方便。\n\n+ languages    //语言文件夹，可放置一些语言（比如英语、法语之类的）\n+ layout    //布局文件夹,用于存放主题的模板文件\n  + \\_partial  //放一些ejs和less的模板文件\n  + archive.ejs   //归档页面模板\n  + index.ejs   //主页页面模板\n  + layout.ejs   //整体模板，本目录下的其他的ejs会显示在body中\n  + post.ejs     //文章模板\n  + tag.ejs     //选中一个tag后的模板\n  + tags.ejs    //tags页面归档模板，这个是自己定义的\n+ script     //脚本文件夹，在启动时，Hexo 会载入此文件夹内的 JavaScript 文件\n+ source     //资源文件夹，例如 CSS、JavaScript 文件等\n+ \\_config.yml   //主题配置文件，有很多变量和辅助函数可方便博客内容的调用\n\n## 设计主题\n\n由于我个人其实还是挺喜欢艺术的，之前也学了不少美术之类的东西，所以想把博客主题设计的有一些涂鸦的气息，想给人一种就写博客就像一种涂鸦的感觉。整个主题也构思了大概三天吧，大概讲一下我的设计思路，虽然不是说非常满意最后的设计，但是也基本满意了。\n\n### 设计思路\n\n首先，是确定博客页面的整体结构，我看了很多博客。布局上主要分为两种，一种就是类似网站官网的那种直接从上到下的结构，还有一种就是类似yilia主题的这种左侧导航栏，右边是博客内容的这种。\n\n这两种结构到底选择哪一种我也犹豫了好久，从艺术效果上考虑，我个人更倾向于第一种布局，因为这种布局给人发挥的空间很大，比如说banner部分可以提供一些炫酷的画面，留给我设计的空间很大。但是从功能上考虑，这次是要设计一个博客的主题，那么博客的作用是什么呢？方便查阅，方便阅读，文字优先，这些都是博客的功能。\n\n作为一个博客，当然应该是功能优先，我在想，假如我是一个想查一些技术的用户，那么假设我打开第一种布局，可能我的第一印象是，哇这个网站好炫酷，好有感觉之类，但是多次进入之后可能就会觉得有点厌烦了，每次查东西都要往下拉，感觉很麻烦。假设我打开第二种布局，可能第一感觉并没有很惊艳的感觉，但是多次进入查阅技术的时候可能就会觉得很方便，每次进入都能很迅速的查到想查的内容。\n\n然后就是确定整体基调了，有了上面的分析，那么基调也能很快确定下来了。简洁，涂鸦这两个词就是博客的主题。所以说留给我整体设计的可以说主要就是左侧的导航栏部分了，为了有涂鸦的感觉，当然就要找一些涂鸦的背景了，还有字体上要有感觉一些。还有一处，为了体现出来我的个性，我决定用鼠标画一个头像。\n\n上面是从设计的内容考虑，但是作为一个技术人员，当然还要考虑实现了。设计完之后主要的问题就是两点。\n* 第一点就是由于我使用github pages（买不起服务器\\_(:3」∠❀)\\_）所以这个页面的加载速度就成了一个问题，使用过多的图片会造成加载速度上的一些问题，以至于好长时间加载不出来页面。\n* 第二个问题就是我在导航栏部分使用了网上下载的字体，倘若用户电脑里面没有（基本可以确定没有）用别的字体代替的话感觉会影响整体效果。那么解决方案目前想到两个，第一个就是使用font-face(还没用过),第二个就是使用图片了，但是第二个方案感觉最好还是不要使用了，加载速度太慢，而且导航栏部分是非常重要的内容，加载不出来的话很影响体验。\n\n### 效果\n\n整体效果（PS设计稿）\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-28/hexo-style.jpg\">\n\n## 构建\n\n### 脚手架\n\n之前不是很了解什么是脚手架，现在懂了，脚手架可以简单理解为快速的生成某种结构，可以大大减少工作量。那么这次就使用了`yo`这个工具，并使用`generator-hexo-theme`来快速构建项目。\n\n注意，这里我遇到了一个坑，使用`git bash`的话会在选择技术栈的时候会出现选择错误的问题，改用`cmd`才成功。\n\n### hexo工作\n\nhexo提供了很多便利，在source文件夹下面写的css文件和js文件最终会编译到public文件夹的里面，然后在主题的config文件里面写上相应的public根目录下相应文件，然后在html中引入即可。然后ejs会自动编译，但是需要按照相应的名称命名。\n\n### gulp自动编译\n\n在写less的时候又遇到了一个问题，就是引入的css文件位置在`/public/css/`里面，然而我如果写在source里面写less的话每次都要`hexo g`一下，来生成静态页面（less会自动编译到public/css/graffiti.css里面），这样就很麻烦了。\n\n解决方法，使用gulp来自动编译，每次监听less文件改动，然后自动编译到`public/css/graffiti.css`这里，这样就能在`hexo server`服务器开启的情况下f5刷新了，方便了很多。\n\n但是这里又遇到一个问题，那就是我在很多博客的package.json配置里面看到比如说webpack这个包，都写在了`/themes/[主题名称]/package.json`里面，然而如果在主题文件夹里面使用npm安装相应的npm包的话，在`hexo server`时候会报错，原因就是这个node_modules文件夹不能在主题文件夹里面，那么问题来了，我究竟该怎么做？\n\n很明显，按道理讲webpack这个工具作为开发时候使用的，而在运行时并不需要，那就是说写在themes文件里面的devDependencies里面比较好。\n\n**gulpfile.js文件如下**\n```js\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar plumber = require('gulp-plumber');  //处理管道崩溃问题\nvar notify = require('gulp-notify');  //报错与不中断当前任务\n\n//less编译\ngulp.task('less',function(){\n    return gulp.src('source/css/graffiti.less')  //找到需要编译的less文件\n        .pipe(plumber({errorHandler: notify.onError('Error:<%= error.message %>;')}))  //如果less文件中有语法错误，用notify插件报错，用plumber保证任务不会停止\n        .pipe(less())  //如果没错误，就编译less\n        .pipe(gulp.dest('../../public/css/'))  //把css文件放到hexo引用的css文件夹下\n});\n\n\ngulp.task('watchLess',function(){\n//监听所有less文件，如果有变化，则执行less编译方法\n    gulp.watch(['source/css/graffiti.less'],['less']);\n});\n\n\n//新建一个任务列表，把监听任务与服务器任务都放在列表中\n\ngulp.task('taskList', ['watchLess']);\n\n//修改默认任务\ngulp.task('default', function() {\n    gulp.start('taskList');  //执行任务列表\n});\n```\n\n那么动手写主题的前期准备基本完成了，下面就开始写主题了\n\n## 主题部分\n\n### 整体左右两栏布局问题\n\n左侧栏用了`position:fixed`定位,脱离了文档流，并且固定左侧。这时候，如果右侧不使用`absolute`定位的话，当设置`margin-top`属性的时候，上面会被分裂，~~具体原因暂时还没研究，之前就出现过这个问题，等下一定要研究一下。~~可以使用BFC来处理。\n\n那么右侧也要脱离文档流了，这时候，按照我原来的思路使用`margin-left`把左侧撑开，然后右侧使用`width:calc(100% - 300px)`来把右边固定宽度（因为不固定宽度的话，宽度会由其内部元素决定，但是内部元素不够宽的话会撑不起来整个屏幕）。\n\n但是`calc(100% - 300px)`竟然失效，计算的结果竟然是-200%，我也很是懵逼，我还特意写了个小demo来测试，测试结果是成功的，但是这里竟然失效。那么，我做一个大胆的猜测，应该是hexo内部的一些代码的问题。\n\n上面的方案行不通，那就另一个方案，使用`border-box`模型，来使用`padding-left`把左侧撑开，并设置`width: 100%`,完美成功了。\n\n```css \n.content-outer {\n  position: absolute;\n  // margin: 0 0 0 300px;\n  padding-left: 300px;\n  // width: calc(100% - 300px);\n  width: 100%;\n  z-index: -10;\n}\n```\n\n### 侧边导航栏\n\n导航栏的设计主要是一个大背景，然后从上到下分别是头像，昵称，导航菜单。然后会有一个选中效果。\n\n#### 悬停效果\n\n由于我想让选中后出现涂鸦的效果，涂鸦必然会显示到其他的li标签部分，所以在li处设置background明显不可以。为了达成这个效果，要写一个和a标签的兄弟元素，这个部分设置成绝对定位，通过js控制选中后显示出来。\n\nhover伪类并不能达成这个效果，因为我的结构是选中a标签时其兄弟元素div显示，但是hover要么控制自身，要么控制其子元素，对其他并不支持（其实当为兄弟元素时，可以使用+号来控制，但是父元素就不行了，尽量还是js控制简单一点）。\n\n同时，为了控制背景显示的位置，可以把其父元素li标签设置成relative来定位。然后就是计算图像的大小写width和height了。\n\n**HTML**\n```html\n<% Object.keys(theme.menu).forEach(function(key) { %>\n    <li>\n      <div class=\"menu-hover <%-key%>-hover\"></div>\n      <a id=\"<%=key%>\" href=\"<%=theme.menu[key]%>\"><%=key%></a>\n    </li>\n<% }); %>\n```\n\n\n**CSS**\n```css \n//其中的一部分\n.Home-hover {\n  position: absolute;\n  width: 120px;\n  height: 132px;\n  left: 50%;\n  margin-left: -60px;\n  top: -30px;\n\n  display: none;\n  z-index: -5;\n  background: url('../img/hover-1.png') no-repeat;\n  background-size: 100%;\n}\n```\n\n**JS**\n```js\n//其中一部分\n$(\"#Home\").mouseenter(function() {\n    // $(\".Home-hover\").css(\"display\",\"block\");\n    $(\".Home-hover\").fadeIn(100);\n  });\n  $(\"#Home\").mouseleave(function() {\n    // $(\".Home-hover\").css(\"display\",\"none\");\n    $(\".Home-hover\").fadeOut(100);\n  });\n```\n\n以上就能实现悬停效果\n\n#### 非web安全字体\n\n这里我使用了一个网上下载的字体Yank，那么这个字体只是在我的电脑上能看见效果，在其它的电脑上就看不到了，那么如何解决这个问题呢。\n\n在css3之前，那么程序员只能使用安全字体（就是说使用一连串的字体，其中一定有用户电脑自带的字体，比如说微软雅黑），这样字体就很局限，想用艺术的字体就只能用图片了。\n\n那么现在css3有一个新的属性@font-face属性，这个属性能把字体放到服务器上，然后引入即可，例如：\n\n在css中写上\n\n```css \n@font-face {\n  font-family: navfont;\n  src: url('fonts/Yank.ttf');\n}\n```\n\n那么想引入的时候`font-family: navfont;`即可，由于我使用的github pages + hexo，所以把字体放入合适的位置就行了。\n\n除此之外，google还提供一个Google Font Api来提供这么一个效果，上这么网站，然后找一款好看的字体，引入即可，比如说我想用Do Hyeon这么一个字体，用link引入即可，后面可直接使用\n\n```html \n<link href=\"https://fonts.googleapis.com/css?family=Do+Hyeon\" rel=\"stylesheet\">\n```\n\n[动手写一个hexo主题（下）](/2018/04/16/动手写一个hexo主题（下）)\n\n\n\n\n\n","source":"_posts/14. 动手写一个hexo主题（上）.md","raw":"---\ntitle: 动手写一个hexo主题（上）\ndate: 2018-03-28 16:18:31\ntoc: true\ncategories:\n- hexo\ntags:\n- 项目\n- hexo\n---\n\n自己写一个博客主题的想法已经很久了，而且加上想在找工作的时候能有一些拿得出手而且能体现我个人特点的作品出来，能体现出来具有代码能力+一点设计能力。感觉博客主题就是一个很好的作品。刚好之前用了一下ejs，了解了一下模板引擎的内容，觉得技术上已经具备的差不多了，于是开始动手实现了。在这里要感谢一下我的第一个博客主题yilia的作者，和indigo主题的作者，经常有一些不知道如何写的地方，查看了它们的主题源码。\n\n<!--more-->\n\n## 前期准备\n\n首先确定技术栈：ejs+less+Jquery\n\n基本的技术栈就是上面所说的内容了，hexo提供了很多方便的变量和辅助函数，更方便我们自己实现一个自己的博客内容。\n\n### 项目结构\n\n主要介绍一下themes里面的结构，外面需要注意的就是一个`_config.yml`的文件，这个文件放了一些配置内容，yml文件即YAML语言，是一种用来写配置文件的语言，比JSON要更加的方便。\n\n+ languages    //语言文件夹，可放置一些语言（比如英语、法语之类的）\n+ layout    //布局文件夹,用于存放主题的模板文件\n  + \\_partial  //放一些ejs和less的模板文件\n  + archive.ejs   //归档页面模板\n  + index.ejs   //主页页面模板\n  + layout.ejs   //整体模板，本目录下的其他的ejs会显示在body中\n  + post.ejs     //文章模板\n  + tag.ejs     //选中一个tag后的模板\n  + tags.ejs    //tags页面归档模板，这个是自己定义的\n+ script     //脚本文件夹，在启动时，Hexo 会载入此文件夹内的 JavaScript 文件\n+ source     //资源文件夹，例如 CSS、JavaScript 文件等\n+ \\_config.yml   //主题配置文件，有很多变量和辅助函数可方便博客内容的调用\n\n## 设计主题\n\n由于我个人其实还是挺喜欢艺术的，之前也学了不少美术之类的东西，所以想把博客主题设计的有一些涂鸦的气息，想给人一种就写博客就像一种涂鸦的感觉。整个主题也构思了大概三天吧，大概讲一下我的设计思路，虽然不是说非常满意最后的设计，但是也基本满意了。\n\n### 设计思路\n\n首先，是确定博客页面的整体结构，我看了很多博客。布局上主要分为两种，一种就是类似网站官网的那种直接从上到下的结构，还有一种就是类似yilia主题的这种左侧导航栏，右边是博客内容的这种。\n\n这两种结构到底选择哪一种我也犹豫了好久，从艺术效果上考虑，我个人更倾向于第一种布局，因为这种布局给人发挥的空间很大，比如说banner部分可以提供一些炫酷的画面，留给我设计的空间很大。但是从功能上考虑，这次是要设计一个博客的主题，那么博客的作用是什么呢？方便查阅，方便阅读，文字优先，这些都是博客的功能。\n\n作为一个博客，当然应该是功能优先，我在想，假如我是一个想查一些技术的用户，那么假设我打开第一种布局，可能我的第一印象是，哇这个网站好炫酷，好有感觉之类，但是多次进入之后可能就会觉得有点厌烦了，每次查东西都要往下拉，感觉很麻烦。假设我打开第二种布局，可能第一感觉并没有很惊艳的感觉，但是多次进入查阅技术的时候可能就会觉得很方便，每次进入都能很迅速的查到想查的内容。\n\n然后就是确定整体基调了，有了上面的分析，那么基调也能很快确定下来了。简洁，涂鸦这两个词就是博客的主题。所以说留给我整体设计的可以说主要就是左侧的导航栏部分了，为了有涂鸦的感觉，当然就要找一些涂鸦的背景了，还有字体上要有感觉一些。还有一处，为了体现出来我的个性，我决定用鼠标画一个头像。\n\n上面是从设计的内容考虑，但是作为一个技术人员，当然还要考虑实现了。设计完之后主要的问题就是两点。\n* 第一点就是由于我使用github pages（买不起服务器\\_(:3」∠❀)\\_）所以这个页面的加载速度就成了一个问题，使用过多的图片会造成加载速度上的一些问题，以至于好长时间加载不出来页面。\n* 第二个问题就是我在导航栏部分使用了网上下载的字体，倘若用户电脑里面没有（基本可以确定没有）用别的字体代替的话感觉会影响整体效果。那么解决方案目前想到两个，第一个就是使用font-face(还没用过),第二个就是使用图片了，但是第二个方案感觉最好还是不要使用了，加载速度太慢，而且导航栏部分是非常重要的内容，加载不出来的话很影响体验。\n\n### 效果\n\n整体效果（PS设计稿）\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-28/hexo-style.jpg\">\n\n## 构建\n\n### 脚手架\n\n之前不是很了解什么是脚手架，现在懂了，脚手架可以简单理解为快速的生成某种结构，可以大大减少工作量。那么这次就使用了`yo`这个工具，并使用`generator-hexo-theme`来快速构建项目。\n\n注意，这里我遇到了一个坑，使用`git bash`的话会在选择技术栈的时候会出现选择错误的问题，改用`cmd`才成功。\n\n### hexo工作\n\nhexo提供了很多便利，在source文件夹下面写的css文件和js文件最终会编译到public文件夹的里面，然后在主题的config文件里面写上相应的public根目录下相应文件，然后在html中引入即可。然后ejs会自动编译，但是需要按照相应的名称命名。\n\n### gulp自动编译\n\n在写less的时候又遇到了一个问题，就是引入的css文件位置在`/public/css/`里面，然而我如果写在source里面写less的话每次都要`hexo g`一下，来生成静态页面（less会自动编译到public/css/graffiti.css里面），这样就很麻烦了。\n\n解决方法，使用gulp来自动编译，每次监听less文件改动，然后自动编译到`public/css/graffiti.css`这里，这样就能在`hexo server`服务器开启的情况下f5刷新了，方便了很多。\n\n但是这里又遇到一个问题，那就是我在很多博客的package.json配置里面看到比如说webpack这个包，都写在了`/themes/[主题名称]/package.json`里面，然而如果在主题文件夹里面使用npm安装相应的npm包的话，在`hexo server`时候会报错，原因就是这个node_modules文件夹不能在主题文件夹里面，那么问题来了，我究竟该怎么做？\n\n很明显，按道理讲webpack这个工具作为开发时候使用的，而在运行时并不需要，那就是说写在themes文件里面的devDependencies里面比较好。\n\n**gulpfile.js文件如下**\n```js\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar plumber = require('gulp-plumber');  //处理管道崩溃问题\nvar notify = require('gulp-notify');  //报错与不中断当前任务\n\n//less编译\ngulp.task('less',function(){\n    return gulp.src('source/css/graffiti.less')  //找到需要编译的less文件\n        .pipe(plumber({errorHandler: notify.onError('Error:<%= error.message %>;')}))  //如果less文件中有语法错误，用notify插件报错，用plumber保证任务不会停止\n        .pipe(less())  //如果没错误，就编译less\n        .pipe(gulp.dest('../../public/css/'))  //把css文件放到hexo引用的css文件夹下\n});\n\n\ngulp.task('watchLess',function(){\n//监听所有less文件，如果有变化，则执行less编译方法\n    gulp.watch(['source/css/graffiti.less'],['less']);\n});\n\n\n//新建一个任务列表，把监听任务与服务器任务都放在列表中\n\ngulp.task('taskList', ['watchLess']);\n\n//修改默认任务\ngulp.task('default', function() {\n    gulp.start('taskList');  //执行任务列表\n});\n```\n\n那么动手写主题的前期准备基本完成了，下面就开始写主题了\n\n## 主题部分\n\n### 整体左右两栏布局问题\n\n左侧栏用了`position:fixed`定位,脱离了文档流，并且固定左侧。这时候，如果右侧不使用`absolute`定位的话，当设置`margin-top`属性的时候，上面会被分裂，~~具体原因暂时还没研究，之前就出现过这个问题，等下一定要研究一下。~~可以使用BFC来处理。\n\n那么右侧也要脱离文档流了，这时候，按照我原来的思路使用`margin-left`把左侧撑开，然后右侧使用`width:calc(100% - 300px)`来把右边固定宽度（因为不固定宽度的话，宽度会由其内部元素决定，但是内部元素不够宽的话会撑不起来整个屏幕）。\n\n但是`calc(100% - 300px)`竟然失效，计算的结果竟然是-200%，我也很是懵逼，我还特意写了个小demo来测试，测试结果是成功的，但是这里竟然失效。那么，我做一个大胆的猜测，应该是hexo内部的一些代码的问题。\n\n上面的方案行不通，那就另一个方案，使用`border-box`模型，来使用`padding-left`把左侧撑开，并设置`width: 100%`,完美成功了。\n\n```css \n.content-outer {\n  position: absolute;\n  // margin: 0 0 0 300px;\n  padding-left: 300px;\n  // width: calc(100% - 300px);\n  width: 100%;\n  z-index: -10;\n}\n```\n\n### 侧边导航栏\n\n导航栏的设计主要是一个大背景，然后从上到下分别是头像，昵称，导航菜单。然后会有一个选中效果。\n\n#### 悬停效果\n\n由于我想让选中后出现涂鸦的效果，涂鸦必然会显示到其他的li标签部分，所以在li处设置background明显不可以。为了达成这个效果，要写一个和a标签的兄弟元素，这个部分设置成绝对定位，通过js控制选中后显示出来。\n\nhover伪类并不能达成这个效果，因为我的结构是选中a标签时其兄弟元素div显示，但是hover要么控制自身，要么控制其子元素，对其他并不支持（其实当为兄弟元素时，可以使用+号来控制，但是父元素就不行了，尽量还是js控制简单一点）。\n\n同时，为了控制背景显示的位置，可以把其父元素li标签设置成relative来定位。然后就是计算图像的大小写width和height了。\n\n**HTML**\n```html\n<% Object.keys(theme.menu).forEach(function(key) { %>\n    <li>\n      <div class=\"menu-hover <%-key%>-hover\"></div>\n      <a id=\"<%=key%>\" href=\"<%=theme.menu[key]%>\"><%=key%></a>\n    </li>\n<% }); %>\n```\n\n\n**CSS**\n```css \n//其中的一部分\n.Home-hover {\n  position: absolute;\n  width: 120px;\n  height: 132px;\n  left: 50%;\n  margin-left: -60px;\n  top: -30px;\n\n  display: none;\n  z-index: -5;\n  background: url('../img/hover-1.png') no-repeat;\n  background-size: 100%;\n}\n```\n\n**JS**\n```js\n//其中一部分\n$(\"#Home\").mouseenter(function() {\n    // $(\".Home-hover\").css(\"display\",\"block\");\n    $(\".Home-hover\").fadeIn(100);\n  });\n  $(\"#Home\").mouseleave(function() {\n    // $(\".Home-hover\").css(\"display\",\"none\");\n    $(\".Home-hover\").fadeOut(100);\n  });\n```\n\n以上就能实现悬停效果\n\n#### 非web安全字体\n\n这里我使用了一个网上下载的字体Yank，那么这个字体只是在我的电脑上能看见效果，在其它的电脑上就看不到了，那么如何解决这个问题呢。\n\n在css3之前，那么程序员只能使用安全字体（就是说使用一连串的字体，其中一定有用户电脑自带的字体，比如说微软雅黑），这样字体就很局限，想用艺术的字体就只能用图片了。\n\n那么现在css3有一个新的属性@font-face属性，这个属性能把字体放到服务器上，然后引入即可，例如：\n\n在css中写上\n\n```css \n@font-face {\n  font-family: navfont;\n  src: url('fonts/Yank.ttf');\n}\n```\n\n那么想引入的时候`font-family: navfont;`即可，由于我使用的github pages + hexo，所以把字体放入合适的位置就行了。\n\n除此之外，google还提供一个Google Font Api来提供这么一个效果，上这么网站，然后找一款好看的字体，引入即可，比如说我想用Do Hyeon这么一个字体，用link引入即可，后面可直接使用\n\n```html \n<link href=\"https://fonts.googleapis.com/css?family=Do+Hyeon\" rel=\"stylesheet\">\n```\n\n[动手写一个hexo主题（下）](/2018/04/16/动手写一个hexo主题（下）)\n\n\n\n\n\n","slug":"14. 动手写一个hexo主题（上）","published":1,"updated":"2021-09-30T06:46:12.311Z","_id":"cku41le8i0008idp24xzuc7t4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>自己写一个博客主题的想法已经很久了，而且加上想在找工作的时候能有一些拿得出手而且能体现我个人特点的作品出来，能体现出来具有代码能力+一点设计能力。感觉博客主题就是一个很好的作品。刚好之前用了一下ejs，了解了一下模板引擎的内容，觉得技术上已经具备的差不多了，于是开始动手实现了。在这里要感谢一下我的第一个博客主题yilia的作者，和indigo主题的作者，经常有一些不知道如何写的地方，查看了它们的主题源码。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>首先确定技术栈：ejs+less+Jquery</p>\n<p>基本的技术栈就是上面所说的内容了，hexo提供了很多方便的变量和辅助函数，更方便我们自己实现一个自己的博客内容。</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>主要介绍一下themes里面的结构，外面需要注意的就是一个<code>_config.yml</code>的文件，这个文件放了一些配置内容，yml文件即YAML语言，是一种用来写配置文件的语言，比JSON要更加的方便。</p>\n<ul>\n<li>languages    //语言文件夹，可放置一些语言（比如英语、法语之类的）</li>\n<li>layout    //布局文件夹,用于存放主题的模板文件<ul>\n<li>_partial  //放一些ejs和less的模板文件</li>\n<li>archive.ejs   //归档页面模板</li>\n<li>index.ejs   //主页页面模板</li>\n<li>layout.ejs   //整体模板，本目录下的其他的ejs会显示在body中</li>\n<li>post.ejs     //文章模板</li>\n<li>tag.ejs     //选中一个tag后的模板</li>\n<li>tags.ejs    //tags页面归档模板，这个是自己定义的</li>\n</ul>\n</li>\n<li>script     //脚本文件夹，在启动时，Hexo 会载入此文件夹内的 JavaScript 文件</li>\n<li>source     //资源文件夹，例如 CSS、JavaScript 文件等</li>\n<li>_config.yml   //主题配置文件，有很多变量和辅助函数可方便博客内容的调用</li>\n</ul>\n<h2 id=\"设计主题\"><a href=\"#设计主题\" class=\"headerlink\" title=\"设计主题\"></a>设计主题</h2><p>由于我个人其实还是挺喜欢艺术的，之前也学了不少美术之类的东西，所以想把博客主题设计的有一些涂鸦的气息，想给人一种就写博客就像一种涂鸦的感觉。整个主题也构思了大概三天吧，大概讲一下我的设计思路，虽然不是说非常满意最后的设计，但是也基本满意了。</p>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>首先，是确定博客页面的整体结构，我看了很多博客。布局上主要分为两种，一种就是类似网站官网的那种直接从上到下的结构，还有一种就是类似yilia主题的这种左侧导航栏，右边是博客内容的这种。</p>\n<p>这两种结构到底选择哪一种我也犹豫了好久，从艺术效果上考虑，我个人更倾向于第一种布局，因为这种布局给人发挥的空间很大，比如说banner部分可以提供一些炫酷的画面，留给我设计的空间很大。但是从功能上考虑，这次是要设计一个博客的主题，那么博客的作用是什么呢？方便查阅，方便阅读，文字优先，这些都是博客的功能。</p>\n<p>作为一个博客，当然应该是功能优先，我在想，假如我是一个想查一些技术的用户，那么假设我打开第一种布局，可能我的第一印象是，哇这个网站好炫酷，好有感觉之类，但是多次进入之后可能就会觉得有点厌烦了，每次查东西都要往下拉，感觉很麻烦。假设我打开第二种布局，可能第一感觉并没有很惊艳的感觉，但是多次进入查阅技术的时候可能就会觉得很方便，每次进入都能很迅速的查到想查的内容。</p>\n<p>然后就是确定整体基调了，有了上面的分析，那么基调也能很快确定下来了。简洁，涂鸦这两个词就是博客的主题。所以说留给我整体设计的可以说主要就是左侧的导航栏部分了，为了有涂鸦的感觉，当然就要找一些涂鸦的背景了，还有字体上要有感觉一些。还有一处，为了体现出来我的个性，我决定用鼠标画一个头像。</p>\n<p>上面是从设计的内容考虑，但是作为一个技术人员，当然还要考虑实现了。设计完之后主要的问题就是两点。</p>\n<ul>\n<li>第一点就是由于我使用github pages（买不起服务器_(:3」∠❀)_）所以这个页面的加载速度就成了一个问题，使用过多的图片会造成加载速度上的一些问题，以至于好长时间加载不出来页面。</li>\n<li>第二个问题就是我在导航栏部分使用了网上下载的字体，倘若用户电脑里面没有（基本可以确定没有）用别的字体代替的话感觉会影响整体效果。那么解决方案目前想到两个，第一个就是使用font-face(还没用过),第二个就是使用图片了，但是第二个方案感觉最好还是不要使用了，加载速度太慢，而且导航栏部分是非常重要的内容，加载不出来的话很影响体验。</li>\n</ul>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>整体效果（PS设计稿）<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-28/hexo-style.jpg\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><h3 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h3><p>之前不是很了解什么是脚手架，现在懂了，脚手架可以简单理解为快速的生成某种结构，可以大大减少工作量。那么这次就使用了<code>yo</code>这个工具，并使用<code>generator-hexo-theme</code>来快速构建项目。</p>\n<p>注意，这里我遇到了一个坑，使用<code>git bash</code>的话会在选择技术栈的时候会出现选择错误的问题，改用<code>cmd</code>才成功。</p>\n<h3 id=\"hexo工作\"><a href=\"#hexo工作\" class=\"headerlink\" title=\"hexo工作\"></a>hexo工作</h3><p>hexo提供了很多便利，在source文件夹下面写的css文件和js文件最终会编译到public文件夹的里面，然后在主题的config文件里面写上相应的public根目录下相应文件，然后在html中引入即可。然后ejs会自动编译，但是需要按照相应的名称命名。</p>\n<h3 id=\"gulp自动编译\"><a href=\"#gulp自动编译\" class=\"headerlink\" title=\"gulp自动编译\"></a>gulp自动编译</h3><p>在写less的时候又遇到了一个问题，就是引入的css文件位置在<code>/public/css/</code>里面，然而我如果写在source里面写less的话每次都要<code>hexo g</code>一下，来生成静态页面（less会自动编译到public/css/graffiti.css里面），这样就很麻烦了。</p>\n<p>解决方法，使用gulp来自动编译，每次监听less文件改动，然后自动编译到<code>public/css/graffiti.css</code>这里，这样就能在<code>hexo server</code>服务器开启的情况下f5刷新了，方便了很多。</p>\n<p>但是这里又遇到一个问题，那就是我在很多博客的package.json配置里面看到比如说webpack这个包，都写在了<code>/themes/[主题名称]/package.json</code>里面，然而如果在主题文件夹里面使用npm安装相应的npm包的话，在<code>hexo server</code>时候会报错，原因就是这个node_modules文件夹不能在主题文件夹里面，那么问题来了，我究竟该怎么做？</p>\n<p>很明显，按道理讲webpack这个工具作为开发时候使用的，而在运行时并不需要，那就是说写在themes文件里面的devDependencies里面比较好。</p>\n<p><strong>gulpfile.js文件如下</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-less&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> plumber = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-plumber&#x27;</span>);  <span class=\"comment\">//处理管道崩溃问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-notify&#x27;</span>);  <span class=\"comment\">//报错与不中断当前任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//less编译</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;less&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">&#x27;source/css/graffiti.less&#x27;</span>)  <span class=\"comment\">//找到需要编译的less文件</span></span><br><span class=\"line\">        .pipe(plumber(&#123;<span class=\"attr\">errorHandler</span>: notify.onError(<span class=\"string\">&#x27;Error:&lt;%= error.message %&gt;;&#x27;</span>)&#125;))  <span class=\"comment\">//如果less文件中有语法错误，用notify插件报错，用plumber保证任务不会停止</span></span><br><span class=\"line\">        .pipe(less())  <span class=\"comment\">//如果没错误，就编译less</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">&#x27;../../public/css/&#x27;</span>))  <span class=\"comment\">//把css文件放到hexo引用的css文件夹下</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;watchLess&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//监听所有less文件，如果有变化，则执行less编译方法</span></span><br><span class=\"line\">    gulp.watch([<span class=\"string\">&#x27;source/css/graffiti.less&#x27;</span>],[<span class=\"string\">&#x27;less&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新建一个任务列表，把监听任务与服务器任务都放在列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;taskList&#x27;</span>, [<span class=\"string\">&#x27;watchLess&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改默认任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">&#x27;taskList&#x27;</span>);  <span class=\"comment\">//执行任务列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>那么动手写主题的前期准备基本完成了，下面就开始写主题了</p>\n<h2 id=\"主题部分\"><a href=\"#主题部分\" class=\"headerlink\" title=\"主题部分\"></a>主题部分</h2><h3 id=\"整体左右两栏布局问题\"><a href=\"#整体左右两栏布局问题\" class=\"headerlink\" title=\"整体左右两栏布局问题\"></a>整体左右两栏布局问题</h3><p>左侧栏用了<code>position:fixed</code>定位,脱离了文档流，并且固定左侧。这时候，如果右侧不使用<code>absolute</code>定位的话，当设置<code>margin-top</code>属性的时候，上面会被分裂，<del>具体原因暂时还没研究，之前就出现过这个问题，等下一定要研究一下。</del>可以使用BFC来处理。</p>\n<p>那么右侧也要脱离文档流了，这时候，按照我原来的思路使用<code>margin-left</code>把左侧撑开，然后右侧使用<code>width:calc(100% - 300px)</code>来把右边固定宽度（因为不固定宽度的话，宽度会由其内部元素决定，但是内部元素不够宽的话会撑不起来整个屏幕）。</p>\n<p>但是<code>calc(100% - 300px)</code>竟然失效，计算的结果竟然是-200%，我也很是懵逼，我还特意写了个小demo来测试，测试结果是成功的，但是这里竟然失效。那么，我做一个大胆的猜测，应该是hexo内部的一些代码的问题。</p>\n<p>上面的方案行不通，那就另一个方案，使用<code>border-box</code>模型，来使用<code>padding-left</code>把左侧撑开，并设置<code>width: 100%</code>,完美成功了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  // <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  // <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> - <span class=\"number\">300px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"侧边导航栏\"><a href=\"#侧边导航栏\" class=\"headerlink\" title=\"侧边导航栏\"></a>侧边导航栏</h3><p>导航栏的设计主要是一个大背景，然后从上到下分别是头像，昵称，导航菜单。然后会有一个选中效果。</p>\n<h4 id=\"悬停效果\"><a href=\"#悬停效果\" class=\"headerlink\" title=\"悬停效果\"></a>悬停效果</h4><p>由于我想让选中后出现涂鸦的效果，涂鸦必然会显示到其他的li标签部分，所以在li处设置background明显不可以。为了达成这个效果，要写一个和a标签的兄弟元素，这个部分设置成绝对定位，通过js控制选中后显示出来。</p>\n<p>hover伪类并不能达成这个效果，因为我的结构是选中a标签时其兄弟元素div显示，但是hover要么控制自身，要么控制其子元素，对其他并不支持（其实当为兄弟元素时，可以使用+号来控制，但是父元素就不行了，尽量还是js控制简单一点）。</p>\n<p>同时，为了控制背景显示的位置，可以把其父元素li标签设置成relative来定位。然后就是计算图像的大小写width和height了。</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% Object.keys(theme.menu).forEach(function(key) &#123; %&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;menu-hover &lt;%-key%&gt;-hover&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&lt;%=key%&gt;&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=theme.menu[key]%&gt;&quot;</span>&gt;</span>&lt;%=key%&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//其中的一部分</span><br><span class=\"line\"><span class=\"selector-class\">.Home-hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">132px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../img/hover-1.png&#x27;</span>) no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>JS</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//其中一部分</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;#Home&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;.Home-hover&quot;).css(&quot;display&quot;,&quot;block&quot;);</span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.Home-hover&quot;</span>).fadeIn(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#Home&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;.Home-hover&quot;).css(&quot;display&quot;,&quot;none&quot;);</span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.Home-hover&quot;</span>).fadeOut(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上就能实现悬停效果</p>\n<h4 id=\"非web安全字体\"><a href=\"#非web安全字体\" class=\"headerlink\" title=\"非web安全字体\"></a>非web安全字体</h4><p>这里我使用了一个网上下载的字体Yank，那么这个字体只是在我的电脑上能看见效果，在其它的电脑上就看不到了，那么如何解决这个问题呢。</p>\n<p>在css3之前，那么程序员只能使用安全字体（就是说使用一连串的字体，其中一定有用户电脑自带的字体，比如说微软雅黑），这样字体就很局限，想用艺术的字体就只能用图片了。</p>\n<p>那么现在css3有一个新的属性@font-face属性，这个属性能把字体放到服务器上，然后引入即可，例如：</p>\n<p>在css中写上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: navfont;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;fonts/Yank.ttf&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么想引入的时候<code>font-family: navfont;</code>即可，由于我使用的github pages + hexo，所以把字体放入合适的位置就行了。</p>\n<p>除此之外，google还提供一个Google Font Api来提供这么一个效果，上这么网站，然后找一款好看的字体，引入即可，比如说我想用Do Hyeon这么一个字体，用link引入即可，后面可直接使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://fonts.googleapis.com/css?family=Do+Hyeon&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"/2018/04/16/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAhexo%E4%B8%BB%E9%A2%98%EF%BC%88%E4%B8%8B%EF%BC%89\">动手写一个hexo主题（下）</a></p>\n","site":{"data":{}},"excerpt":"<p>自己写一个博客主题的想法已经很久了，而且加上想在找工作的时候能有一些拿得出手而且能体现我个人特点的作品出来，能体现出来具有代码能力+一点设计能力。感觉博客主题就是一个很好的作品。刚好之前用了一下ejs，了解了一下模板引擎的内容，觉得技术上已经具备的差不多了，于是开始动手实现了。在这里要感谢一下我的第一个博客主题yilia的作者，和indigo主题的作者，经常有一些不知道如何写的地方，查看了它们的主题源码。</p>","more":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>首先确定技术栈：ejs+less+Jquery</p>\n<p>基本的技术栈就是上面所说的内容了，hexo提供了很多方便的变量和辅助函数，更方便我们自己实现一个自己的博客内容。</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>主要介绍一下themes里面的结构，外面需要注意的就是一个<code>_config.yml</code>的文件，这个文件放了一些配置内容，yml文件即YAML语言，是一种用来写配置文件的语言，比JSON要更加的方便。</p>\n<ul>\n<li>languages    //语言文件夹，可放置一些语言（比如英语、法语之类的）</li>\n<li>layout    //布局文件夹,用于存放主题的模板文件<ul>\n<li>_partial  //放一些ejs和less的模板文件</li>\n<li>archive.ejs   //归档页面模板</li>\n<li>index.ejs   //主页页面模板</li>\n<li>layout.ejs   //整体模板，本目录下的其他的ejs会显示在body中</li>\n<li>post.ejs     //文章模板</li>\n<li>tag.ejs     //选中一个tag后的模板</li>\n<li>tags.ejs    //tags页面归档模板，这个是自己定义的</li>\n</ul>\n</li>\n<li>script     //脚本文件夹，在启动时，Hexo 会载入此文件夹内的 JavaScript 文件</li>\n<li>source     //资源文件夹，例如 CSS、JavaScript 文件等</li>\n<li>_config.yml   //主题配置文件，有很多变量和辅助函数可方便博客内容的调用</li>\n</ul>\n<h2 id=\"设计主题\"><a href=\"#设计主题\" class=\"headerlink\" title=\"设计主题\"></a>设计主题</h2><p>由于我个人其实还是挺喜欢艺术的，之前也学了不少美术之类的东西，所以想把博客主题设计的有一些涂鸦的气息，想给人一种就写博客就像一种涂鸦的感觉。整个主题也构思了大概三天吧，大概讲一下我的设计思路，虽然不是说非常满意最后的设计，但是也基本满意了。</p>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>首先，是确定博客页面的整体结构，我看了很多博客。布局上主要分为两种，一种就是类似网站官网的那种直接从上到下的结构，还有一种就是类似yilia主题的这种左侧导航栏，右边是博客内容的这种。</p>\n<p>这两种结构到底选择哪一种我也犹豫了好久，从艺术效果上考虑，我个人更倾向于第一种布局，因为这种布局给人发挥的空间很大，比如说banner部分可以提供一些炫酷的画面，留给我设计的空间很大。但是从功能上考虑，这次是要设计一个博客的主题，那么博客的作用是什么呢？方便查阅，方便阅读，文字优先，这些都是博客的功能。</p>\n<p>作为一个博客，当然应该是功能优先，我在想，假如我是一个想查一些技术的用户，那么假设我打开第一种布局，可能我的第一印象是，哇这个网站好炫酷，好有感觉之类，但是多次进入之后可能就会觉得有点厌烦了，每次查东西都要往下拉，感觉很麻烦。假设我打开第二种布局，可能第一感觉并没有很惊艳的感觉，但是多次进入查阅技术的时候可能就会觉得很方便，每次进入都能很迅速的查到想查的内容。</p>\n<p>然后就是确定整体基调了，有了上面的分析，那么基调也能很快确定下来了。简洁，涂鸦这两个词就是博客的主题。所以说留给我整体设计的可以说主要就是左侧的导航栏部分了，为了有涂鸦的感觉，当然就要找一些涂鸦的背景了，还有字体上要有感觉一些。还有一处，为了体现出来我的个性，我决定用鼠标画一个头像。</p>\n<p>上面是从设计的内容考虑，但是作为一个技术人员，当然还要考虑实现了。设计完之后主要的问题就是两点。</p>\n<ul>\n<li>第一点就是由于我使用github pages（买不起服务器_(:3」∠❀)_）所以这个页面的加载速度就成了一个问题，使用过多的图片会造成加载速度上的一些问题，以至于好长时间加载不出来页面。</li>\n<li>第二个问题就是我在导航栏部分使用了网上下载的字体，倘若用户电脑里面没有（基本可以确定没有）用别的字体代替的话感觉会影响整体效果。那么解决方案目前想到两个，第一个就是使用font-face(还没用过),第二个就是使用图片了，但是第二个方案感觉最好还是不要使用了，加载速度太慢，而且导航栏部分是非常重要的内容，加载不出来的话很影响体验。</li>\n</ul>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>整体效果（PS设计稿）<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-28/hexo-style.jpg\"></p>\n<h2 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h2><h3 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h3><p>之前不是很了解什么是脚手架，现在懂了，脚手架可以简单理解为快速的生成某种结构，可以大大减少工作量。那么这次就使用了<code>yo</code>这个工具，并使用<code>generator-hexo-theme</code>来快速构建项目。</p>\n<p>注意，这里我遇到了一个坑，使用<code>git bash</code>的话会在选择技术栈的时候会出现选择错误的问题，改用<code>cmd</code>才成功。</p>\n<h3 id=\"hexo工作\"><a href=\"#hexo工作\" class=\"headerlink\" title=\"hexo工作\"></a>hexo工作</h3><p>hexo提供了很多便利，在source文件夹下面写的css文件和js文件最终会编译到public文件夹的里面，然后在主题的config文件里面写上相应的public根目录下相应文件，然后在html中引入即可。然后ejs会自动编译，但是需要按照相应的名称命名。</p>\n<h3 id=\"gulp自动编译\"><a href=\"#gulp自动编译\" class=\"headerlink\" title=\"gulp自动编译\"></a>gulp自动编译</h3><p>在写less的时候又遇到了一个问题，就是引入的css文件位置在<code>/public/css/</code>里面，然而我如果写在source里面写less的话每次都要<code>hexo g</code>一下，来生成静态页面（less会自动编译到public/css/graffiti.css里面），这样就很麻烦了。</p>\n<p>解决方法，使用gulp来自动编译，每次监听less文件改动，然后自动编译到<code>public/css/graffiti.css</code>这里，这样就能在<code>hexo server</code>服务器开启的情况下f5刷新了，方便了很多。</p>\n<p>但是这里又遇到一个问题，那就是我在很多博客的package.json配置里面看到比如说webpack这个包，都写在了<code>/themes/[主题名称]/package.json</code>里面，然而如果在主题文件夹里面使用npm安装相应的npm包的话，在<code>hexo server</code>时候会报错，原因就是这个node_modules文件夹不能在主题文件夹里面，那么问题来了，我究竟该怎么做？</p>\n<p>很明显，按道理讲webpack这个工具作为开发时候使用的，而在运行时并不需要，那就是说写在themes文件里面的devDependencies里面比较好。</p>\n<p><strong>gulpfile.js文件如下</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-less&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> plumber = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-plumber&#x27;</span>);  <span class=\"comment\">//处理管道崩溃问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-notify&#x27;</span>);  <span class=\"comment\">//报错与不中断当前任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//less编译</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;less&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">&#x27;source/css/graffiti.less&#x27;</span>)  <span class=\"comment\">//找到需要编译的less文件</span></span><br><span class=\"line\">        .pipe(plumber(&#123;<span class=\"attr\">errorHandler</span>: notify.onError(<span class=\"string\">&#x27;Error:&lt;%= error.message %&gt;;&#x27;</span>)&#125;))  <span class=\"comment\">//如果less文件中有语法错误，用notify插件报错，用plumber保证任务不会停止</span></span><br><span class=\"line\">        .pipe(less())  <span class=\"comment\">//如果没错误，就编译less</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">&#x27;../../public/css/&#x27;</span>))  <span class=\"comment\">//把css文件放到hexo引用的css文件夹下</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;watchLess&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//监听所有less文件，如果有变化，则执行less编译方法</span></span><br><span class=\"line\">    gulp.watch([<span class=\"string\">&#x27;source/css/graffiti.less&#x27;</span>],[<span class=\"string\">&#x27;less&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新建一个任务列表，把监听任务与服务器任务都放在列表中</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;taskList&#x27;</span>, [<span class=\"string\">&#x27;watchLess&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改默认任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.start(<span class=\"string\">&#x27;taskList&#x27;</span>);  <span class=\"comment\">//执行任务列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>那么动手写主题的前期准备基本完成了，下面就开始写主题了</p>\n<h2 id=\"主题部分\"><a href=\"#主题部分\" class=\"headerlink\" title=\"主题部分\"></a>主题部分</h2><h3 id=\"整体左右两栏布局问题\"><a href=\"#整体左右两栏布局问题\" class=\"headerlink\" title=\"整体左右两栏布局问题\"></a>整体左右两栏布局问题</h3><p>左侧栏用了<code>position:fixed</code>定位,脱离了文档流，并且固定左侧。这时候，如果右侧不使用<code>absolute</code>定位的话，当设置<code>margin-top</code>属性的时候，上面会被分裂，<del>具体原因暂时还没研究，之前就出现过这个问题，等下一定要研究一下。</del>可以使用BFC来处理。</p>\n<p>那么右侧也要脱离文档流了，这时候，按照我原来的思路使用<code>margin-left</code>把左侧撑开，然后右侧使用<code>width:calc(100% - 300px)</code>来把右边固定宽度（因为不固定宽度的话，宽度会由其内部元素决定，但是内部元素不够宽的话会撑不起来整个屏幕）。</p>\n<p>但是<code>calc(100% - 300px)</code>竟然失效，计算的结果竟然是-200%，我也很是懵逼，我还特意写了个小demo来测试，测试结果是成功的，但是这里竟然失效。那么，我做一个大胆的猜测，应该是hexo内部的一些代码的问题。</p>\n<p>上面的方案行不通，那就另一个方案，使用<code>border-box</code>模型，来使用<code>padding-left</code>把左侧撑开，并设置<code>width: 100%</code>,完美成功了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  // <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  // <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">100%</span> - <span class=\"number\">300px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"侧边导航栏\"><a href=\"#侧边导航栏\" class=\"headerlink\" title=\"侧边导航栏\"></a>侧边导航栏</h3><p>导航栏的设计主要是一个大背景，然后从上到下分别是头像，昵称，导航菜单。然后会有一个选中效果。</p>\n<h4 id=\"悬停效果\"><a href=\"#悬停效果\" class=\"headerlink\" title=\"悬停效果\"></a>悬停效果</h4><p>由于我想让选中后出现涂鸦的效果，涂鸦必然会显示到其他的li标签部分，所以在li处设置background明显不可以。为了达成这个效果，要写一个和a标签的兄弟元素，这个部分设置成绝对定位，通过js控制选中后显示出来。</p>\n<p>hover伪类并不能达成这个效果，因为我的结构是选中a标签时其兄弟元素div显示，但是hover要么控制自身，要么控制其子元素，对其他并不支持（其实当为兄弟元素时，可以使用+号来控制，但是父元素就不行了，尽量还是js控制简单一点）。</p>\n<p>同时，为了控制背景显示的位置，可以把其父元素li标签设置成relative来定位。然后就是计算图像的大小写width和height了。</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% Object.keys(theme.menu).forEach(function(key) &#123; %&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;menu-hover &lt;%-key%&gt;-hover&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&lt;%=key%&gt;&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%=theme.menu[key]%&gt;&quot;</span>&gt;</span>&lt;%=key%&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//其中的一部分</span><br><span class=\"line\"><span class=\"selector-class\">.Home-hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">132px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: -<span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../img/hover-1.png&#x27;</span>) no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>JS</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//其中一部分</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;#Home&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;.Home-hover&quot;).css(&quot;display&quot;,&quot;block&quot;);</span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.Home-hover&quot;</span>).fadeIn(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#Home&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $(&quot;.Home-hover&quot;).css(&quot;display&quot;,&quot;none&quot;);</span></span><br><span class=\"line\">    $(<span class=\"string\">&quot;.Home-hover&quot;</span>).fadeOut(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上就能实现悬停效果</p>\n<h4 id=\"非web安全字体\"><a href=\"#非web安全字体\" class=\"headerlink\" title=\"非web安全字体\"></a>非web安全字体</h4><p>这里我使用了一个网上下载的字体Yank，那么这个字体只是在我的电脑上能看见效果，在其它的电脑上就看不到了，那么如何解决这个问题呢。</p>\n<p>在css3之前，那么程序员只能使用安全字体（就是说使用一连串的字体，其中一定有用户电脑自带的字体，比如说微软雅黑），这样字体就很局限，想用艺术的字体就只能用图片了。</p>\n<p>那么现在css3有一个新的属性@font-face属性，这个属性能把字体放到服务器上，然后引入即可，例如：</p>\n<p>在css中写上</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: navfont;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;fonts/Yank.ttf&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么想引入的时候<code>font-family: navfont;</code>即可，由于我使用的github pages + hexo，所以把字体放入合适的位置就行了。</p>\n<p>除此之外，google还提供一个Google Font Api来提供这么一个效果，上这么网站，然后找一款好看的字体，引入即可，比如说我想用Do Hyeon这么一个字体，用link引入即可，后面可直接使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://fonts.googleapis.com/css?family=Do+Hyeon&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"/2018/04/16/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAhexo%E4%B8%BB%E9%A2%98%EF%BC%88%E4%B8%8B%EF%BC%89\">动手写一个hexo主题（下）</a></p>"},{"title":"gulp整理","date":"2018-03-31T07:25:00.000Z","toc":true,"_content":"\n在写hexo主题的时候，准备写一个自动编译的gulpfile文件，发现之前看的gulp相关内容并不很清晰，于是重新看了一遍，有了心得体会。\n\n\n<!--more-->\n\n## gulp.src\n\n### pipe \n\npipe的意思是管，然后gulp是流(stream)，之前使用的时候还不太懂pipe什么用，现在再看一遍终于有了一点感受。pipe可以理解为将流这个东西用管道将其引入别的地方。\n\n举个例子，gulp文档里面的一段\n> gulp.src('client/templates/\\*.jade')\n  .pipe(jade())\n  .pipe(minify())\n  .pipe(gulp.dest('build/minified_templates'));\n\n首先解释一下，jade是一个模板引擎（现在叫pug），minify是一个压缩js和css的工具（比如说压缩成一行）。那么这段代码的意思就是将一个`client/templates/`下的所有jade后缀文件pipe到jade这个插件编译一下，编译成css文件，然后pipe到minify插件压缩一下，最后pipe到dest中输出到目标位置。\n\n### base \n\nbase也是一个比较有用的选项，可以控制base目录，也就是可以可以空输出的目录，详细可以查[gulp文档](https://www.gulpjs.com.cn/docs/api/)\n\n### gulp.watch \n\n可以监听文件的变化，当文件发生了变化可以自己定义一些任务。举一个gulp文档的例子\n\n> var watcher = gulp.watch('js/\\**/*.js', ['uglify','reload']);\nwatcher.on('change', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n\n那么意思就是监听`js/\\**/*.js`文件，当发生变化的时候执行uglify和reload任务，并输出一些信息。event.path出发该事件的路径，event.type是该文件的类型。\n\n* 注意glob路径，之前就是因为这个问题导致我重新看了一边gulp文档，受益匪浅\n\n\n\n\n## 后记\n\n其实有时侯还很犹豫要不要整理一些看似没必要整理的东西，其实这篇整理的时候主要是整理pipe的意义。有时侯我总以为我能记在脑子里，但是实际上，过一段时间我总是忘掉了。所以我觉得整理还是很有必要的，比如说这次的整理，我重新查了一些文档，感觉自己似乎懂了，但是当我尝试把它写在博客里的时候，我发现我并不是十分的清楚。当把它写完时，我发现我真的清晰了很多。所以不要犹豫是不是内容太简单了，或者浪费时间之类的，整理下来真的能提高很多。","source":"_posts/15. gulp整理.md","raw":"---\ntitle: gulp整理\ndate: 2018-03-31 15:25:00\ntoc: true\ncategories:\n- 前端\ntags:\n- gulp \n---\n\n在写hexo主题的时候，准备写一个自动编译的gulpfile文件，发现之前看的gulp相关内容并不很清晰，于是重新看了一遍，有了心得体会。\n\n\n<!--more-->\n\n## gulp.src\n\n### pipe \n\npipe的意思是管，然后gulp是流(stream)，之前使用的时候还不太懂pipe什么用，现在再看一遍终于有了一点感受。pipe可以理解为将流这个东西用管道将其引入别的地方。\n\n举个例子，gulp文档里面的一段\n> gulp.src('client/templates/\\*.jade')\n  .pipe(jade())\n  .pipe(minify())\n  .pipe(gulp.dest('build/minified_templates'));\n\n首先解释一下，jade是一个模板引擎（现在叫pug），minify是一个压缩js和css的工具（比如说压缩成一行）。那么这段代码的意思就是将一个`client/templates/`下的所有jade后缀文件pipe到jade这个插件编译一下，编译成css文件，然后pipe到minify插件压缩一下，最后pipe到dest中输出到目标位置。\n\n### base \n\nbase也是一个比较有用的选项，可以控制base目录，也就是可以可以空输出的目录，详细可以查[gulp文档](https://www.gulpjs.com.cn/docs/api/)\n\n### gulp.watch \n\n可以监听文件的变化，当文件发生了变化可以自己定义一些任务。举一个gulp文档的例子\n\n> var watcher = gulp.watch('js/\\**/*.js', ['uglify','reload']);\nwatcher.on('change', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n\n那么意思就是监听`js/\\**/*.js`文件，当发生变化的时候执行uglify和reload任务，并输出一些信息。event.path出发该事件的路径，event.type是该文件的类型。\n\n* 注意glob路径，之前就是因为这个问题导致我重新看了一边gulp文档，受益匪浅\n\n\n\n\n## 后记\n\n其实有时侯还很犹豫要不要整理一些看似没必要整理的东西，其实这篇整理的时候主要是整理pipe的意义。有时侯我总以为我能记在脑子里，但是实际上，过一段时间我总是忘掉了。所以我觉得整理还是很有必要的，比如说这次的整理，我重新查了一些文档，感觉自己似乎懂了，但是当我尝试把它写在博客里的时候，我发现我并不是十分的清楚。当把它写完时，我发现我真的清晰了很多。所以不要犹豫是不是内容太简单了，或者浪费时间之类的，整理下来真的能提高很多。","slug":"15. gulp整理","published":1,"updated":"2021-10-09T08:01:44.231Z","_id":"cku41le8i0009idp2eizw6l4q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在写hexo主题的时候，准备写一个自动编译的gulpfile文件，发现之前看的gulp相关内容并不很清晰，于是重新看了一遍，有了心得体会。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h3><p>pipe的意思是管，然后gulp是流(stream)，之前使用的时候还不太懂pipe什么用，现在再看一遍终于有了一点感受。pipe可以理解为将流这个东西用管道将其引入别的地方。</p>\n<p>举个例子，gulp文档里面的一段</p>\n<blockquote>\n<p>gulp.src(‘client/templates/*.jade’)<br>  .pipe(jade())<br>  .pipe(minify())<br>  .pipe(gulp.dest(‘build/minified_templates’));</p>\n</blockquote>\n<p>首先解释一下，jade是一个模板引擎（现在叫pug），minify是一个压缩js和css的工具（比如说压缩成一行）。那么这段代码的意思就是将一个<code>client/templates/</code>下的所有jade后缀文件pipe到jade这个插件编译一下，编译成css文件，然后pipe到minify插件压缩一下，最后pipe到dest中输出到目标位置。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base也是一个比较有用的选项，可以控制base目录，也就是可以可以空输出的目录，详细可以查<a href=\"https://www.gulpjs.com.cn/docs/api/\">gulp文档</a></p>\n<h3 id=\"gulp-watch\"><a href=\"#gulp-watch\" class=\"headerlink\" title=\"gulp.watch\"></a>gulp.watch</h3><p>可以监听文件的变化，当文件发生了变化可以自己定义一些任务。举一个gulp文档的例子</p>\n<blockquote>\n<p>var watcher = gulp.watch(‘js/*<em>/</em>.js’, [‘uglify’,’reload’]);<br>watcher.on(‘change’, function(event) {<br>  console.log(‘File ‘ + event.path + ‘ was ‘ + event.type + ‘, running tasks…’);<br>});</p>\n</blockquote>\n<p>那么意思就是监听<code>js/\\**/*.js</code>文件，当发生变化的时候执行uglify和reload任务，并输出一些信息。event.path出发该事件的路径，event.type是该文件的类型。</p>\n<ul>\n<li>注意glob路径，之前就是因为这个问题导致我重新看了一边gulp文档，受益匪浅</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>其实有时侯还很犹豫要不要整理一些看似没必要整理的东西，其实这篇整理的时候主要是整理pipe的意义。有时侯我总以为我能记在脑子里，但是实际上，过一段时间我总是忘掉了。所以我觉得整理还是很有必要的，比如说这次的整理，我重新查了一些文档，感觉自己似乎懂了，但是当我尝试把它写在博客里的时候，我发现我并不是十分的清楚。当把它写完时，我发现我真的清晰了很多。所以不要犹豫是不是内容太简单了，或者浪费时间之类的，整理下来真的能提高很多。</p>\n","site":{"data":{}},"excerpt":"<p>在写hexo主题的时候，准备写一个自动编译的gulpfile文件，发现之前看的gulp相关内容并不很清晰，于是重新看了一遍，有了心得体会。</p>","more":"<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h3><p>pipe的意思是管，然后gulp是流(stream)，之前使用的时候还不太懂pipe什么用，现在再看一遍终于有了一点感受。pipe可以理解为将流这个东西用管道将其引入别的地方。</p>\n<p>举个例子，gulp文档里面的一段</p>\n<blockquote>\n<p>gulp.src(‘client/templates/*.jade’)<br>  .pipe(jade())<br>  .pipe(minify())<br>  .pipe(gulp.dest(‘build/minified_templates’));</p>\n</blockquote>\n<p>首先解释一下，jade是一个模板引擎（现在叫pug），minify是一个压缩js和css的工具（比如说压缩成一行）。那么这段代码的意思就是将一个<code>client/templates/</code>下的所有jade后缀文件pipe到jade这个插件编译一下，编译成css文件，然后pipe到minify插件压缩一下，最后pipe到dest中输出到目标位置。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base也是一个比较有用的选项，可以控制base目录，也就是可以可以空输出的目录，详细可以查<a href=\"https://www.gulpjs.com.cn/docs/api/\">gulp文档</a></p>\n<h3 id=\"gulp-watch\"><a href=\"#gulp-watch\" class=\"headerlink\" title=\"gulp.watch\"></a>gulp.watch</h3><p>可以监听文件的变化，当文件发生了变化可以自己定义一些任务。举一个gulp文档的例子</p>\n<blockquote>\n<p>var watcher = gulp.watch(‘js/*<em>/</em>.js’, [‘uglify’,’reload’]);<br>watcher.on(‘change’, function(event) {<br>  console.log(‘File ‘ + event.path + ‘ was ‘ + event.type + ‘, running tasks…’);<br>});</p>\n</blockquote>\n<p>那么意思就是监听<code>js/\\**/*.js</code>文件，当发生变化的时候执行uglify和reload任务，并输出一些信息。event.path出发该事件的路径，event.type是该文件的类型。</p>\n<ul>\n<li>注意glob路径，之前就是因为这个问题导致我重新看了一边gulp文档，受益匪浅</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>其实有时侯还很犹豫要不要整理一些看似没必要整理的东西，其实这篇整理的时候主要是整理pipe的意义。有时侯我总以为我能记在脑子里，但是实际上，过一段时间我总是忘掉了。所以我觉得整理还是很有必要的，比如说这次的整理，我重新查了一些文档，感觉自己似乎懂了，但是当我尝试把它写在博客里的时候，我发现我并不是十分的清楚。当把它写完时，我发现我真的清晰了很多。所以不要犹豫是不是内容太简单了，或者浪费时间之类的，整理下来真的能提高很多。</p>"},{"title":"动手写一个hexo主题（下）","date":"2018-04-16T14:52:47.000Z","toc":true,"_content":"\n这个太长了，一篇文章整理不完，另开一篇\n\n<!--more-->\n\n\n### Home主页面\n\n#### tag随机颜色\n\n这个效果主要是tag标签随机一种颜色，然后每次打开它都是这种颜色。那么怎么实现这种效果呢？\n\n首先，我是想使用js获取随机颜色然后用js把颜色给加上。那么问题来了，颜色是随机了，但是每次打开颜色都不一样，这样体验感觉很不好。因此，我们要找一个关系来让他赋予相应的颜色。\n\n首先我想的是根据首字母来划分一定区域，比如说选5种颜色，然后0-26均匀划分5段，但是，这样还有一个问题，英文字母自然没有问题，但是汉字呢，判断起来就很困难，网上也有一些插件，但是我觉得为了实现这么一个小功能就引入这么大的文件，感觉没有必要。\n\n那么第二种就想到了根据长度，这个就简单很多了，代码如下：\n\n```js \n//================tag-icon颜色==========================\n\nvar tagIcons = [\n  {\n    \"id\": 0,\n    \"color\": \"#fd0f02\"    //红色\n  },\n  {\n    \"id\": 1,\n    \"color\": \"#42ba01\"    //绿色\n\n  },\n  {\n    \"id\": 2,\n    \"color\": \"#8a1eff\"    //紫色\n\n  },\n  {\n    \"id\": 3,\n    \"color\": \"#fe9402\"    //橙色\n  },\n  {\n    \"id\": 4,\n    \"color\": \"#0136fe\"    //深蓝\n  }\n]\n\n\nvar getTagIcon = function(str) {\n  var tagLength = str.length;\n\n  if(tagLength <= 4) {\n    return tagIcons[tagLength - 1].color;\n  } else {\n    return tagIcons[4].color;\n  }\n}\n\nvar TagBackgroundColor = function() {\n\n  var tagsAll = $(\".article-tag-list-link\");\n  // console.log(tagsAll);\n  tagsAll.each(function() {\n    $(this).css(\"background-color\", getTagIcon($(this).text()));\n  })\n}\n\n```\n\n\n### post文章页面\n\n由于hexo把markdown的相应部分都渲染成了一定的class，那么直接定义class的样式就能显示出相应的markdown效果，比如说代码块、引用之类的。\n\n#### 代码高亮问题 \n\n写这一部分真的心酸，我以为hexo的highlight功能开启了就能自己高亮了，实际上，凉凉。找了半天解决方法，也没找到，本来看到一篇博客引入了prettify高亮插件，但是想了想自己写一个拉到了。于是我本着自己动手的原则写了一套代码高亮的css（抄SegmentFault的代码颜色）。其实也没有想象中的艰难，hexo把一些关键字都取了类名，直接自己定一个颜色，字体大小什么的就ok了。\n\n按照一般情况，代码高亮的原理是`highlight.js`这个插件（还有别的插件），这个插件什么用呢，【源码没仔细看】，分了很多语言，里面应该是用正则判断相应的语句，比如说`#`这个注释符号。获取到之后会赋予一定的class类名。\n\n然后怎么高亮呢，很简单一个css文件就行了，相应的类名给予一定的css代码就可以了。\n\n\n#### 缩进问题\n\n还有一个部分就是缩进问题了，众所周知，空格是不会显示的，所以代码缩进在页面上预览的时候是不会出现的。这时候就要用一个`white-space: pre-wrap;`自动换行并且保留空格就行了。\n\n#### 图片过大问题\n\n有时候用markdown插入图片的时候没有指定宽度，这样太大会把页面撑开，如何解决呢？\n\n```css \nimg {\n  max-width: 100%;\n}\n```\n\n解决方案很简单对吧。是的，但是不读别人的代码，我还真没有想到过。\n\n\n### Archives归档页面\n\n#### ejs结构\n\n这个页面参照了next主题的时间线效果，感觉这个效果很漂亮。这一部分实现起来有点小绕，为什么呢？\n\n如果直接与后端交互直接获取想要的数据自然没有这些问题，但是这次使用的是hexo，提供了很多便利的同时也有很多限制，本来hexo在archives提供的有一个插入函数就是`list_archives`这个函数，这个函数会直接插入按时间归档好的一推信息，那么我不仅想显示时间，还想显示文章，这样很明显就不能用这个函数，那么就只能foreach循环，并写一些逻辑来显示。\n\n那么本着尽量少些js的想法（hexo+github不知道为什么有时候js文件在hexo d上传之后会莫名其妙删除），直接用ejs写\n\n```ejs \n<div class=\"archives-block\">\n<div class=\"achives-margin-left\">\n\n<% var last; %>\n<% page.posts.each(function(article) { %>\n  <% var year = article.date.year(); %>\n\n  <% if (last != year) { -%>\n    <% if (last != null) { -%>\n      </div></section>\n    <% } -%>\n    <% last = year; %>\n      \n    <section class=\"archives-wrap\">\n      <div class=\"archives-year-wrap\">\n        <a href=\"<% url_for('archives/' + year ) %>\" class=\"archives-year\"><%= year %></a>\n      </div>\n      <div class=\"archives\">\n\n        <% } %>\n          <!-- 时间归档模板部分 -->\n          <div class=\"archives-item\">\n            <span class=\"archives-item-time\"><%= date(article.date,'M-D') %></span>\n            <a href=\"<%= url_for(article.path)%>\"><%= article.title %></a>\n          </div>\n      \n<% }); %>\n\n    </div>\n    </section>\n</div>\n</div>\n```\n\n这一段参考了yilia的作者的写法，这一部分如果只看标签的话，那么绝对是不会闭合的，因为这里面为了区分出不同年份一组的效果，使用了if判断一定条件，当满足时会将标签闭合，这样就能让不同年份的一组不在同一个标签组内。\n\n\n#### 前面的小圆点\n\n这一个效果使用before插入\n\n```css\n\n&:before {\n  content: \" \";\n  position: absolute;\n  left: 0;\n  top: 50%;\n  margin-left: -4px;\n  margin-top: -4px;\n\n  width: 6px;\n  height: 6px;\n  background-color: #bbb;\n  border-radius: 50%;\n  border: 1px solid #ffffff;\n  z-index: 5;\n  transition-duration: 0.5s;\n}\n\n```    \n\n其实很简单就能实现,注意使用absolute绝对定位，定位好相应的位置即可达成效果,后面的竖线效果同理。\n\n#### 前面的竖线\n\n\n这一部分本想用border-left实现，但发现会有多余的部分，不如使用absolute定位方便\n\n```css \n\n&:after {\n  content: \" \";\n  position: absolute;\n  top: 42px;\n  left: 0;\n  margin-left: -2px;\n\n  width: 4px;\n  height: 100%;\n  background-color: #f5f5f5;\n  z-index: 1;\n}\n\n```\n\n### Tag标签归档页面\n\n这一部分没什么太多要说的，主要是一个页面布局的问题，由于使用了辅助函数，所以html结构就不是由我来决定，因此css布局上的方案并不是很恰当。这里由于不能使用calc函数计算，所以使用了在父元素使用padding和border-box来定位一个百分比宽度。内部a标签由于是内联元素，要想指定宽度，需要使用`display:block`来改成块级元素。\n\n#### 自己定义一个新模板\n\n这里我自己定义了一个新页面tags归档页面，本来hexo是没有带这个归档模板的，这里我使用`hexo new page tags`命令，然后会在hexo根目录下source中生成一个tags文件夹，里面会有一个index.md文件打开后设置相应内容即可，目前由于不需要更多的功能，所以添加一个`layout: \"tags\"`即可，这时在建立ejs文件就ok了\n\n## 后记\n\n目前博客还存在一些问题，首先比如说页面加载速度太慢，应该是左侧导航栏图片加载太慢（应该是Github Pages比较慢？）还是比较影响体验的。之后放到码云上快多了。\n\n还有一点，本来准备吧jquery全改了改成原生js（js文件只有两个3个函数），但是发现用了jquery之后人确实变懒了，本来函数都已经改过了，但是fadeIn和fadeOut两个函数因为太懒了，暂时不想改了，所以又全注释掉了。以后想改了再改回来吧。\n\n还有个问题，就是这个页面的markdown居然解析错了，两个css代码段居然连在了一起？！！改了几遍也还是这样，目前暂未解决。","source":"_posts/16. 动手写一个hexo主题（下）.md","raw":"---\ntitle: 动手写一个hexo主题（下）\ndate: 2018-04-16 22:52:47\ntoc: true\ncategories:\n- hexo\ntags:\n- 项目\n- hexo\n---\n\n这个太长了，一篇文章整理不完，另开一篇\n\n<!--more-->\n\n\n### Home主页面\n\n#### tag随机颜色\n\n这个效果主要是tag标签随机一种颜色，然后每次打开它都是这种颜色。那么怎么实现这种效果呢？\n\n首先，我是想使用js获取随机颜色然后用js把颜色给加上。那么问题来了，颜色是随机了，但是每次打开颜色都不一样，这样体验感觉很不好。因此，我们要找一个关系来让他赋予相应的颜色。\n\n首先我想的是根据首字母来划分一定区域，比如说选5种颜色，然后0-26均匀划分5段，但是，这样还有一个问题，英文字母自然没有问题，但是汉字呢，判断起来就很困难，网上也有一些插件，但是我觉得为了实现这么一个小功能就引入这么大的文件，感觉没有必要。\n\n那么第二种就想到了根据长度，这个就简单很多了，代码如下：\n\n```js \n//================tag-icon颜色==========================\n\nvar tagIcons = [\n  {\n    \"id\": 0,\n    \"color\": \"#fd0f02\"    //红色\n  },\n  {\n    \"id\": 1,\n    \"color\": \"#42ba01\"    //绿色\n\n  },\n  {\n    \"id\": 2,\n    \"color\": \"#8a1eff\"    //紫色\n\n  },\n  {\n    \"id\": 3,\n    \"color\": \"#fe9402\"    //橙色\n  },\n  {\n    \"id\": 4,\n    \"color\": \"#0136fe\"    //深蓝\n  }\n]\n\n\nvar getTagIcon = function(str) {\n  var tagLength = str.length;\n\n  if(tagLength <= 4) {\n    return tagIcons[tagLength - 1].color;\n  } else {\n    return tagIcons[4].color;\n  }\n}\n\nvar TagBackgroundColor = function() {\n\n  var tagsAll = $(\".article-tag-list-link\");\n  // console.log(tagsAll);\n  tagsAll.each(function() {\n    $(this).css(\"background-color\", getTagIcon($(this).text()));\n  })\n}\n\n```\n\n\n### post文章页面\n\n由于hexo把markdown的相应部分都渲染成了一定的class，那么直接定义class的样式就能显示出相应的markdown效果，比如说代码块、引用之类的。\n\n#### 代码高亮问题 \n\n写这一部分真的心酸，我以为hexo的highlight功能开启了就能自己高亮了，实际上，凉凉。找了半天解决方法，也没找到，本来看到一篇博客引入了prettify高亮插件，但是想了想自己写一个拉到了。于是我本着自己动手的原则写了一套代码高亮的css（抄SegmentFault的代码颜色）。其实也没有想象中的艰难，hexo把一些关键字都取了类名，直接自己定一个颜色，字体大小什么的就ok了。\n\n按照一般情况，代码高亮的原理是`highlight.js`这个插件（还有别的插件），这个插件什么用呢，【源码没仔细看】，分了很多语言，里面应该是用正则判断相应的语句，比如说`#`这个注释符号。获取到之后会赋予一定的class类名。\n\n然后怎么高亮呢，很简单一个css文件就行了，相应的类名给予一定的css代码就可以了。\n\n\n#### 缩进问题\n\n还有一个部分就是缩进问题了，众所周知，空格是不会显示的，所以代码缩进在页面上预览的时候是不会出现的。这时候就要用一个`white-space: pre-wrap;`自动换行并且保留空格就行了。\n\n#### 图片过大问题\n\n有时候用markdown插入图片的时候没有指定宽度，这样太大会把页面撑开，如何解决呢？\n\n```css \nimg {\n  max-width: 100%;\n}\n```\n\n解决方案很简单对吧。是的，但是不读别人的代码，我还真没有想到过。\n\n\n### Archives归档页面\n\n#### ejs结构\n\n这个页面参照了next主题的时间线效果，感觉这个效果很漂亮。这一部分实现起来有点小绕，为什么呢？\n\n如果直接与后端交互直接获取想要的数据自然没有这些问题，但是这次使用的是hexo，提供了很多便利的同时也有很多限制，本来hexo在archives提供的有一个插入函数就是`list_archives`这个函数，这个函数会直接插入按时间归档好的一推信息，那么我不仅想显示时间，还想显示文章，这样很明显就不能用这个函数，那么就只能foreach循环，并写一些逻辑来显示。\n\n那么本着尽量少些js的想法（hexo+github不知道为什么有时候js文件在hexo d上传之后会莫名其妙删除），直接用ejs写\n\n```ejs \n<div class=\"archives-block\">\n<div class=\"achives-margin-left\">\n\n<% var last; %>\n<% page.posts.each(function(article) { %>\n  <% var year = article.date.year(); %>\n\n  <% if (last != year) { -%>\n    <% if (last != null) { -%>\n      </div></section>\n    <% } -%>\n    <% last = year; %>\n      \n    <section class=\"archives-wrap\">\n      <div class=\"archives-year-wrap\">\n        <a href=\"<% url_for('archives/' + year ) %>\" class=\"archives-year\"><%= year %></a>\n      </div>\n      <div class=\"archives\">\n\n        <% } %>\n          <!-- 时间归档模板部分 -->\n          <div class=\"archives-item\">\n            <span class=\"archives-item-time\"><%= date(article.date,'M-D') %></span>\n            <a href=\"<%= url_for(article.path)%>\"><%= article.title %></a>\n          </div>\n      \n<% }); %>\n\n    </div>\n    </section>\n</div>\n</div>\n```\n\n这一段参考了yilia的作者的写法，这一部分如果只看标签的话，那么绝对是不会闭合的，因为这里面为了区分出不同年份一组的效果，使用了if判断一定条件，当满足时会将标签闭合，这样就能让不同年份的一组不在同一个标签组内。\n\n\n#### 前面的小圆点\n\n这一个效果使用before插入\n\n```css\n\n&:before {\n  content: \" \";\n  position: absolute;\n  left: 0;\n  top: 50%;\n  margin-left: -4px;\n  margin-top: -4px;\n\n  width: 6px;\n  height: 6px;\n  background-color: #bbb;\n  border-radius: 50%;\n  border: 1px solid #ffffff;\n  z-index: 5;\n  transition-duration: 0.5s;\n}\n\n```    \n\n其实很简单就能实现,注意使用absolute绝对定位，定位好相应的位置即可达成效果,后面的竖线效果同理。\n\n#### 前面的竖线\n\n\n这一部分本想用border-left实现，但发现会有多余的部分，不如使用absolute定位方便\n\n```css \n\n&:after {\n  content: \" \";\n  position: absolute;\n  top: 42px;\n  left: 0;\n  margin-left: -2px;\n\n  width: 4px;\n  height: 100%;\n  background-color: #f5f5f5;\n  z-index: 1;\n}\n\n```\n\n### Tag标签归档页面\n\n这一部分没什么太多要说的，主要是一个页面布局的问题，由于使用了辅助函数，所以html结构就不是由我来决定，因此css布局上的方案并不是很恰当。这里由于不能使用calc函数计算，所以使用了在父元素使用padding和border-box来定位一个百分比宽度。内部a标签由于是内联元素，要想指定宽度，需要使用`display:block`来改成块级元素。\n\n#### 自己定义一个新模板\n\n这里我自己定义了一个新页面tags归档页面，本来hexo是没有带这个归档模板的，这里我使用`hexo new page tags`命令，然后会在hexo根目录下source中生成一个tags文件夹，里面会有一个index.md文件打开后设置相应内容即可，目前由于不需要更多的功能，所以添加一个`layout: \"tags\"`即可，这时在建立ejs文件就ok了\n\n## 后记\n\n目前博客还存在一些问题，首先比如说页面加载速度太慢，应该是左侧导航栏图片加载太慢（应该是Github Pages比较慢？）还是比较影响体验的。之后放到码云上快多了。\n\n还有一点，本来准备吧jquery全改了改成原生js（js文件只有两个3个函数），但是发现用了jquery之后人确实变懒了，本来函数都已经改过了，但是fadeIn和fadeOut两个函数因为太懒了，暂时不想改了，所以又全注释掉了。以后想改了再改回来吧。\n\n还有个问题，就是这个页面的markdown居然解析错了，两个css代码段居然连在了一起？！！改了几遍也还是这样，目前暂未解决。","slug":"16. 动手写一个hexo主题（下）","published":1,"updated":"2021-09-30T06:46:25.051Z","_id":"cku41le8k000cidp23uad4441","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这个太长了，一篇文章整理不完，另开一篇</p>\n<span id=\"more\"></span>\n\n\n<h3 id=\"Home主页面\"><a href=\"#Home主页面\" class=\"headerlink\" title=\"Home主页面\"></a>Home主页面</h3><h4 id=\"tag随机颜色\"><a href=\"#tag随机颜色\" class=\"headerlink\" title=\"tag随机颜色\"></a>tag随机颜色</h4><p>这个效果主要是tag标签随机一种颜色，然后每次打开它都是这种颜色。那么怎么实现这种效果呢？</p>\n<p>首先，我是想使用js获取随机颜色然后用js把颜色给加上。那么问题来了，颜色是随机了，但是每次打开颜色都不一样，这样体验感觉很不好。因此，我们要找一个关系来让他赋予相应的颜色。</p>\n<p>首先我想的是根据首字母来划分一定区域，比如说选5种颜色，然后0-26均匀划分5段，但是，这样还有一个问题，英文字母自然没有问题，但是汉字呢，判断起来就很困难，网上也有一些插件，但是我觉得为了实现这么一个小功能就引入这么大的文件，感觉没有必要。</p>\n<p>那么第二种就想到了根据长度，这个就简单很多了，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//================tag-icon颜色==========================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tagIcons = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#fd0f02&quot;</span>    <span class=\"comment\">//红色</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#42ba01&quot;</span>    <span class=\"comment\">//绿色</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#8a1eff&quot;</span>    <span class=\"comment\">//紫色</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#fe9402&quot;</span>    <span class=\"comment\">//橙色</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#0136fe&quot;</span>    <span class=\"comment\">//深蓝</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getTagIcon = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tagLength = str.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(tagLength &lt;= <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagIcons[tagLength - <span class=\"number\">1</span>].color;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagIcons[<span class=\"number\">4</span>].color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> TagBackgroundColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tagsAll = $(<span class=\"string\">&quot;.article-tag-list-link&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// console.log(tagsAll);</span></span><br><span class=\"line\">  tagsAll.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, getTagIcon($(<span class=\"built_in\">this</span>).text()));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"post文章页面\"><a href=\"#post文章页面\" class=\"headerlink\" title=\"post文章页面\"></a>post文章页面</h3><p>由于hexo把markdown的相应部分都渲染成了一定的class，那么直接定义class的样式就能显示出相应的markdown效果，比如说代码块、引用之类的。</p>\n<h4 id=\"代码高亮问题\"><a href=\"#代码高亮问题\" class=\"headerlink\" title=\"代码高亮问题\"></a>代码高亮问题</h4><p>写这一部分真的心酸，我以为hexo的highlight功能开启了就能自己高亮了，实际上，凉凉。找了半天解决方法，也没找到，本来看到一篇博客引入了prettify高亮插件，但是想了想自己写一个拉到了。于是我本着自己动手的原则写了一套代码高亮的css（抄SegmentFault的代码颜色）。其实也没有想象中的艰难，hexo把一些关键字都取了类名，直接自己定一个颜色，字体大小什么的就ok了。</p>\n<p>按照一般情况，代码高亮的原理是<code>highlight.js</code>这个插件（还有别的插件），这个插件什么用呢，【源码没仔细看】，分了很多语言，里面应该是用正则判断相应的语句，比如说<code>#</code>这个注释符号。获取到之后会赋予一定的class类名。</p>\n<p>然后怎么高亮呢，很简单一个css文件就行了，相应的类名给予一定的css代码就可以了。</p>\n<h4 id=\"缩进问题\"><a href=\"#缩进问题\" class=\"headerlink\" title=\"缩进问题\"></a>缩进问题</h4><p>还有一个部分就是缩进问题了，众所周知，空格是不会显示的，所以代码缩进在页面上预览的时候是不会出现的。这时候就要用一个<code>white-space: pre-wrap;</code>自动换行并且保留空格就行了。</p>\n<h4 id=\"图片过大问题\"><a href=\"#图片过大问题\" class=\"headerlink\" title=\"图片过大问题\"></a>图片过大问题</h4><p>有时候用markdown插入图片的时候没有指定宽度，这样太大会把页面撑开，如何解决呢？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方案很简单对吧。是的，但是不读别人的代码，我还真没有想到过。</p>\n<h3 id=\"Archives归档页面\"><a href=\"#Archives归档页面\" class=\"headerlink\" title=\"Archives归档页面\"></a>Archives归档页面</h3><h4 id=\"ejs结构\"><a href=\"#ejs结构\" class=\"headerlink\" title=\"ejs结构\"></a>ejs结构</h4><p>这个页面参照了next主题的时间线效果，感觉这个效果很漂亮。这一部分实现起来有点小绕，为什么呢？</p>\n<p>如果直接与后端交互直接获取想要的数据自然没有这些问题，但是这次使用的是hexo，提供了很多便利的同时也有很多限制，本来hexo在archives提供的有一个插入函数就是<code>list_archives</code>这个函数，这个函数会直接插入按时间归档好的一推信息，那么我不仅想显示时间，还想显示文章，这样很明显就不能用这个函数，那么就只能foreach循环，并写一些逻辑来显示。</p>\n<p>那么本着尽量少些js的想法（hexo+github不知道为什么有时候js文件在hexo d上传之后会莫名其妙删除），直接用ejs写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;archives-block&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;achives-margin-left&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% var last; %&gt;</span><br><span class=\"line\">&lt;% page.posts.each(function(article) &#123; %&gt;</span><br><span class=\"line\">  &lt;% var year = article.date.year(); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (last != year) &#123; -%&gt;</span><br><span class=\"line\">    &lt;% if (last != null) &#123; -%&gt;</span><br><span class=\"line\">      &lt;/div&gt;&lt;/section&gt;</span><br><span class=\"line\">    &lt;% &#125; -%&gt;</span><br><span class=\"line\">    &lt;% last = year; %&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;section class=&quot;archives-wrap&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;archives-year-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;% url_for(&#x27;archives/&#x27; + year ) %&gt;&quot; class=&quot;archives-year&quot;&gt;&lt;%= year %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;archives&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">          &lt;!-- 时间归档模板部分 --&gt;</span><br><span class=\"line\">          &lt;div class=&quot;archives-item&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;archives-item-time&quot;&gt;&lt;%= date(article.date,&#x27;M-D&#x27;) %&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;a href=&quot;&lt;%= url_for(article.path)%&gt;&quot;&gt;&lt;%= article.title %&gt;&lt;/a&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这一段参考了yilia的作者的写法，这一部分如果只看标签的话，那么绝对是不会闭合的，因为这里面为了区分出不同年份一组的效果，使用了if判断一定条件，当满足时会将标签闭合，这样就能让不同年份的一组不在同一个标签组内。</p>\n<h4 id=\"前面的小圆点\"><a href=\"#前面的小圆点\" class=\"headerlink\" title=\"前面的小圆点\"></a>前面的小圆点</h4><p>这一个效果使用before插入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&amp;:before &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">其实很简单就能实现,注意使用absolute绝对定位，定位好相应的位置即可达成效果,后面的竖线效果同理。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 前面的竖线</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这一部分本想用<span class=\"attribute\">border-left</span>实现，但发现会有多余的部分，不如使用absolute定位方便</span><br><span class=\"line\"></span><br><span class=\"line\">```css </span><br><span class=\"line\"></span><br><span class=\"line\">&amp;:after &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">2px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tag标签归档页面\"><a href=\"#Tag标签归档页面\" class=\"headerlink\" title=\"Tag标签归档页面\"></a>Tag标签归档页面</h3><p>这一部分没什么太多要说的，主要是一个页面布局的问题，由于使用了辅助函数，所以html结构就不是由我来决定，因此css布局上的方案并不是很恰当。这里由于不能使用calc函数计算，所以使用了在父元素使用padding和border-box来定位一个百分比宽度。内部a标签由于是内联元素，要想指定宽度，需要使用<code>display:block</code>来改成块级元素。</p>\n<h4 id=\"自己定义一个新模板\"><a href=\"#自己定义一个新模板\" class=\"headerlink\" title=\"自己定义一个新模板\"></a>自己定义一个新模板</h4><p>这里我自己定义了一个新页面tags归档页面，本来hexo是没有带这个归档模板的，这里我使用<code>hexo new page tags</code>命令，然后会在hexo根目录下source中生成一个tags文件夹，里面会有一个index.md文件打开后设置相应内容即可，目前由于不需要更多的功能，所以添加一个<code>layout: &quot;tags&quot;</code>即可，这时在建立ejs文件就ok了</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>目前博客还存在一些问题，首先比如说页面加载速度太慢，应该是左侧导航栏图片加载太慢（应该是Github Pages比较慢？）还是比较影响体验的。之后放到码云上快多了。</p>\n<p>还有一点，本来准备吧jquery全改了改成原生js（js文件只有两个3个函数），但是发现用了jquery之后人确实变懒了，本来函数都已经改过了，但是fadeIn和fadeOut两个函数因为太懒了，暂时不想改了，所以又全注释掉了。以后想改了再改回来吧。</p>\n<p>还有个问题，就是这个页面的markdown居然解析错了，两个css代码段居然连在了一起？！！改了几遍也还是这样，目前暂未解决。</p>\n","site":{"data":{}},"excerpt":"<p>这个太长了，一篇文章整理不完，另开一篇</p>","more":"<h3 id=\"Home主页面\"><a href=\"#Home主页面\" class=\"headerlink\" title=\"Home主页面\"></a>Home主页面</h3><h4 id=\"tag随机颜色\"><a href=\"#tag随机颜色\" class=\"headerlink\" title=\"tag随机颜色\"></a>tag随机颜色</h4><p>这个效果主要是tag标签随机一种颜色，然后每次打开它都是这种颜色。那么怎么实现这种效果呢？</p>\n<p>首先，我是想使用js获取随机颜色然后用js把颜色给加上。那么问题来了，颜色是随机了，但是每次打开颜色都不一样，这样体验感觉很不好。因此，我们要找一个关系来让他赋予相应的颜色。</p>\n<p>首先我想的是根据首字母来划分一定区域，比如说选5种颜色，然后0-26均匀划分5段，但是，这样还有一个问题，英文字母自然没有问题，但是汉字呢，判断起来就很困难，网上也有一些插件，但是我觉得为了实现这么一个小功能就引入这么大的文件，感觉没有必要。</p>\n<p>那么第二种就想到了根据长度，这个就简单很多了，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//================tag-icon颜色==========================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tagIcons = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#fd0f02&quot;</span>    <span class=\"comment\">//红色</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#42ba01&quot;</span>    <span class=\"comment\">//绿色</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#8a1eff&quot;</span>    <span class=\"comment\">//紫色</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#fe9402&quot;</span>    <span class=\"comment\">//橙色</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;color&quot;</span>: <span class=\"string\">&quot;#0136fe&quot;</span>    <span class=\"comment\">//深蓝</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getTagIcon = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tagLength = str.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(tagLength &lt;= <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagIcons[tagLength - <span class=\"number\">1</span>].color;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tagIcons[<span class=\"number\">4</span>].color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> TagBackgroundColor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tagsAll = $(<span class=\"string\">&quot;.article-tag-list-link&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// console.log(tagsAll);</span></span><br><span class=\"line\">  tagsAll.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, getTagIcon($(<span class=\"built_in\">this</span>).text()));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"post文章页面\"><a href=\"#post文章页面\" class=\"headerlink\" title=\"post文章页面\"></a>post文章页面</h3><p>由于hexo把markdown的相应部分都渲染成了一定的class，那么直接定义class的样式就能显示出相应的markdown效果，比如说代码块、引用之类的。</p>\n<h4 id=\"代码高亮问题\"><a href=\"#代码高亮问题\" class=\"headerlink\" title=\"代码高亮问题\"></a>代码高亮问题</h4><p>写这一部分真的心酸，我以为hexo的highlight功能开启了就能自己高亮了，实际上，凉凉。找了半天解决方法，也没找到，本来看到一篇博客引入了prettify高亮插件，但是想了想自己写一个拉到了。于是我本着自己动手的原则写了一套代码高亮的css（抄SegmentFault的代码颜色）。其实也没有想象中的艰难，hexo把一些关键字都取了类名，直接自己定一个颜色，字体大小什么的就ok了。</p>\n<p>按照一般情况，代码高亮的原理是<code>highlight.js</code>这个插件（还有别的插件），这个插件什么用呢，【源码没仔细看】，分了很多语言，里面应该是用正则判断相应的语句，比如说<code>#</code>这个注释符号。获取到之后会赋予一定的class类名。</p>\n<p>然后怎么高亮呢，很简单一个css文件就行了，相应的类名给予一定的css代码就可以了。</p>\n<h4 id=\"缩进问题\"><a href=\"#缩进问题\" class=\"headerlink\" title=\"缩进问题\"></a>缩进问题</h4><p>还有一个部分就是缩进问题了，众所周知，空格是不会显示的，所以代码缩进在页面上预览的时候是不会出现的。这时候就要用一个<code>white-space: pre-wrap;</code>自动换行并且保留空格就行了。</p>\n<h4 id=\"图片过大问题\"><a href=\"#图片过大问题\" class=\"headerlink\" title=\"图片过大问题\"></a>图片过大问题</h4><p>有时候用markdown插入图片的时候没有指定宽度，这样太大会把页面撑开，如何解决呢？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方案很简单对吧。是的，但是不读别人的代码，我还真没有想到过。</p>\n<h3 id=\"Archives归档页面\"><a href=\"#Archives归档页面\" class=\"headerlink\" title=\"Archives归档页面\"></a>Archives归档页面</h3><h4 id=\"ejs结构\"><a href=\"#ejs结构\" class=\"headerlink\" title=\"ejs结构\"></a>ejs结构</h4><p>这个页面参照了next主题的时间线效果，感觉这个效果很漂亮。这一部分实现起来有点小绕，为什么呢？</p>\n<p>如果直接与后端交互直接获取想要的数据自然没有这些问题，但是这次使用的是hexo，提供了很多便利的同时也有很多限制，本来hexo在archives提供的有一个插入函数就是<code>list_archives</code>这个函数，这个函数会直接插入按时间归档好的一推信息，那么我不仅想显示时间，还想显示文章，这样很明显就不能用这个函数，那么就只能foreach循环，并写一些逻辑来显示。</p>\n<p>那么本着尽量少些js的想法（hexo+github不知道为什么有时候js文件在hexo d上传之后会莫名其妙删除），直接用ejs写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;archives-block&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;achives-margin-left&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% var last; %&gt;</span><br><span class=\"line\">&lt;% page.posts.each(function(article) &#123; %&gt;</span><br><span class=\"line\">  &lt;% var year = article.date.year(); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (last != year) &#123; -%&gt;</span><br><span class=\"line\">    &lt;% if (last != null) &#123; -%&gt;</span><br><span class=\"line\">      &lt;/div&gt;&lt;/section&gt;</span><br><span class=\"line\">    &lt;% &#125; -%&gt;</span><br><span class=\"line\">    &lt;% last = year; %&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;section class=&quot;archives-wrap&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;archives-year-wrap&quot;&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;% url_for(&#x27;archives/&#x27; + year ) %&gt;&quot; class=&quot;archives-year&quot;&gt;&lt;%= year %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;archives&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">          &lt;!-- 时间归档模板部分 --&gt;</span><br><span class=\"line\">          &lt;div class=&quot;archives-item&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;archives-item-time&quot;&gt;&lt;%= date(article.date,&#x27;M-D&#x27;) %&gt;&lt;/span&gt;</span><br><span class=\"line\">            &lt;a href=&quot;&lt;%= url_for(article.path)%&gt;&quot;&gt;&lt;%= article.title %&gt;&lt;/a&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这一段参考了yilia的作者的写法，这一部分如果只看标签的话，那么绝对是不会闭合的，因为这里面为了区分出不同年份一组的效果，使用了if判断一定条件，当满足时会将标签闭合，这样就能让不同年份的一组不在同一个标签组内。</p>\n<h4 id=\"前面的小圆点\"><a href=\"#前面的小圆点\" class=\"headerlink\" title=\"前面的小圆点\"></a>前面的小圆点</h4><p>这一个效果使用before插入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&amp;:before &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">其实很简单就能实现,注意使用absolute绝对定位，定位好相应的位置即可达成效果,后面的竖线效果同理。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 前面的竖线</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这一部分本想用<span class=\"attribute\">border-left</span>实现，但发现会有多余的部分，不如使用absolute定位方便</span><br><span class=\"line\"></span><br><span class=\"line\">```css </span><br><span class=\"line\"></span><br><span class=\"line\">&amp;:after &#123;</span><br><span class=\"line\">  content: <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">42px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">2px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tag标签归档页面\"><a href=\"#Tag标签归档页面\" class=\"headerlink\" title=\"Tag标签归档页面\"></a>Tag标签归档页面</h3><p>这一部分没什么太多要说的，主要是一个页面布局的问题，由于使用了辅助函数，所以html结构就不是由我来决定，因此css布局上的方案并不是很恰当。这里由于不能使用calc函数计算，所以使用了在父元素使用padding和border-box来定位一个百分比宽度。内部a标签由于是内联元素，要想指定宽度，需要使用<code>display:block</code>来改成块级元素。</p>\n<h4 id=\"自己定义一个新模板\"><a href=\"#自己定义一个新模板\" class=\"headerlink\" title=\"自己定义一个新模板\"></a>自己定义一个新模板</h4><p>这里我自己定义了一个新页面tags归档页面，本来hexo是没有带这个归档模板的，这里我使用<code>hexo new page tags</code>命令，然后会在hexo根目录下source中生成一个tags文件夹，里面会有一个index.md文件打开后设置相应内容即可，目前由于不需要更多的功能，所以添加一个<code>layout: &quot;tags&quot;</code>即可，这时在建立ejs文件就ok了</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>目前博客还存在一些问题，首先比如说页面加载速度太慢，应该是左侧导航栏图片加载太慢（应该是Github Pages比较慢？）还是比较影响体验的。之后放到码云上快多了。</p>\n<p>还有一点，本来准备吧jquery全改了改成原生js（js文件只有两个3个函数），但是发现用了jquery之后人确实变懒了，本来函数都已经改过了，但是fadeIn和fadeOut两个函数因为太懒了，暂时不想改了，所以又全注释掉了。以后想改了再改回来吧。</p>\n<p>还有个问题，就是这个页面的markdown居然解析错了，两个css代码段居然连在了一起？！！改了几遍也还是这样，目前暂未解决。</p>"},{"title":"JS原型链","date":"2018-04-24T11:19:10.000Z","toc":true,"_content":"\n## 前言\n\n最近有了点新的感触，如果想在前端上走得越来越远，那么我的核心竞争力在哪呢。之前总想着学着张鑫旭大神一样做一个偏前的前端，但仔细想想偏前的前端需求又有多少呢，而且也可能是我不想在复杂的代码中静下心来读吧，所以在js上的基础并不扎实。于是决定狠下心来重新研究一下js，本来想读一下jquery源码，但是发现js基础还是太差，很多东西读不懂，所以决定重新读一下js的基础语法部分。\n\n<!--more-->\n\n## js对象 \n\n整理这篇文章的时候，又重新整理了一下之前写的js对象整理文章[点击这里跳转](/2018/01/21/js%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/)\n\n\n## JS原型链 \n\nJS原型链可以说是JS的核心属性之一了，那么什么是JS原型链呢。假设有一个对象o，这时候想查找o的属性x,即o.x，如果存在那么自然能直接返回，但是假如说对象o不存在属性x呢，这时候将会在o的原型对象中继续查找，若没有则继续向上查找，直到找到或原型是null为止。这样就形成了一个链，这个链就是js原型链。\n\n### 继承\n\n说到原型链，那么就必须要提到继承这个功能，ES5中定义了一个方法,`Object.create()`方法，括号内两个参数，第一个是对象的原型。第二个可选，用来进一步描述，在JS对象整理一文中有提到。\n\n### 实例\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-1.jpg\">\n\n可以看到，定义了一个属性p继承自o\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-2.jpg\">\n\n然后又定义了一个q继承自p，定义了s，这个toString()继承自Object，将p展开自\\_proto\\_，可以看到q的属性z，q的原型的属性y，以及q的原型的原型的属性x，以及最后的Object原型。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-3.jpg\">\n\n最后的结果展示了原型链的查找，q本来没有x和y属性，于是从其原型查找，最终找到，返回结果。\n\n\n\n","source":"_posts/17. JS原型链.md","raw":"---\ntitle: JS原型链\ndate: 2018-04-24 19:19:10\ntoc: true\ncategories:\n- 前端\ntags:\n- JS \n---\n\n## 前言\n\n最近有了点新的感触，如果想在前端上走得越来越远，那么我的核心竞争力在哪呢。之前总想着学着张鑫旭大神一样做一个偏前的前端，但仔细想想偏前的前端需求又有多少呢，而且也可能是我不想在复杂的代码中静下心来读吧，所以在js上的基础并不扎实。于是决定狠下心来重新研究一下js，本来想读一下jquery源码，但是发现js基础还是太差，很多东西读不懂，所以决定重新读一下js的基础语法部分。\n\n<!--more-->\n\n## js对象 \n\n整理这篇文章的时候，又重新整理了一下之前写的js对象整理文章[点击这里跳转](/2018/01/21/js%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/)\n\n\n## JS原型链 \n\nJS原型链可以说是JS的核心属性之一了，那么什么是JS原型链呢。假设有一个对象o，这时候想查找o的属性x,即o.x，如果存在那么自然能直接返回，但是假如说对象o不存在属性x呢，这时候将会在o的原型对象中继续查找，若没有则继续向上查找，直到找到或原型是null为止。这样就形成了一个链，这个链就是js原型链。\n\n### 继承\n\n说到原型链，那么就必须要提到继承这个功能，ES5中定义了一个方法,`Object.create()`方法，括号内两个参数，第一个是对象的原型。第二个可选，用来进一步描述，在JS对象整理一文中有提到。\n\n### 实例\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-1.jpg\">\n\n可以看到，定义了一个属性p继承自o\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-2.jpg\">\n\n然后又定义了一个q继承自p，定义了s，这个toString()继承自Object，将p展开自\\_proto\\_，可以看到q的属性z，q的原型的属性y，以及q的原型的原型的属性x，以及最后的Object原型。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-3.jpg\">\n\n最后的结果展示了原型链的查找，q本来没有x和y属性，于是从其原型查找，最终找到，返回结果。\n\n\n\n","slug":"17. JS原型链","published":1,"updated":"2021-09-30T06:46:36.604Z","_id":"cku41le8k000eidp20nu938tt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近有了点新的感触，如果想在前端上走得越来越远，那么我的核心竞争力在哪呢。之前总想着学着张鑫旭大神一样做一个偏前的前端，但仔细想想偏前的前端需求又有多少呢，而且也可能是我不想在复杂的代码中静下心来读吧，所以在js上的基础并不扎实。于是决定狠下心来重新研究一下js，本来想读一下jquery源码，但是发现js基础还是太差，很多东西读不懂，所以决定重新读一下js的基础语法部分。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><p>整理这篇文章的时候，又重新整理了一下之前写的js对象整理文章<a href=\"/2018/01/21/js%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/\">点击这里跳转</a></p>\n<h2 id=\"JS原型链\"><a href=\"#JS原型链\" class=\"headerlink\" title=\"JS原型链\"></a>JS原型链</h2><p>JS原型链可以说是JS的核心属性之一了，那么什么是JS原型链呢。假设有一个对象o，这时候想查找o的属性x,即o.x，如果存在那么自然能直接返回，但是假如说对象o不存在属性x呢，这时候将会在o的原型对象中继续查找，若没有则继续向上查找，直到找到或原型是null为止。这样就形成了一个链，这个链就是js原型链。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>说到原型链，那么就必须要提到继承这个功能，ES5中定义了一个方法,<code>Object.create()</code>方法，括号内两个参数，第一个是对象的原型。第二个可选，用来进一步描述，在JS对象整理一文中有提到。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-1.jpg\">\n\n<p>可以看到，定义了一个属性p继承自o</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-2.jpg\">\n\n<p>然后又定义了一个q继承自p，定义了s，这个toString()继承自Object，将p展开自_proto_，可以看到q的属性z，q的原型的属性y，以及q的原型的原型的属性x，以及最后的Object原型。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-3.jpg\">\n\n<p>最后的结果展示了原型链的查找，q本来没有x和y属性，于是从其原型查找，最终找到，返回结果。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近有了点新的感触，如果想在前端上走得越来越远，那么我的核心竞争力在哪呢。之前总想着学着张鑫旭大神一样做一个偏前的前端，但仔细想想偏前的前端需求又有多少呢，而且也可能是我不想在复杂的代码中静下心来读吧，所以在js上的基础并不扎实。于是决定狠下心来重新研究一下js，本来想读一下jquery源码，但是发现js基础还是太差，很多东西读不懂，所以决定重新读一下js的基础语法部分。</p>","more":"<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><p>整理这篇文章的时候，又重新整理了一下之前写的js对象整理文章<a href=\"/2018/01/21/js%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/\">点击这里跳转</a></p>\n<h2 id=\"JS原型链\"><a href=\"#JS原型链\" class=\"headerlink\" title=\"JS原型链\"></a>JS原型链</h2><p>JS原型链可以说是JS的核心属性之一了，那么什么是JS原型链呢。假设有一个对象o，这时候想查找o的属性x,即o.x，如果存在那么自然能直接返回，但是假如说对象o不存在属性x呢，这时候将会在o的原型对象中继续查找，若没有则继续向上查找，直到找到或原型是null为止。这样就形成了一个链，这个链就是js原型链。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>说到原型链，那么就必须要提到继承这个功能，ES5中定义了一个方法,<code>Object.create()</code>方法，括号内两个参数，第一个是对象的原型。第二个可选，用来进一步描述，在JS对象整理一文中有提到。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-1.jpg\">\n\n<p>可以看到，定义了一个属性p继承自o</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-2.jpg\">\n\n<p>然后又定义了一个q继承自p，定义了s，这个toString()继承自Object，将p展开自_proto_，可以看到q的属性z，q的原型的属性y，以及q的原型的原型的属性x，以及最后的Object原型。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/inherit-3.jpg\">\n\n<p>最后的结果展示了原型链的查找，q本来没有x和y属性，于是从其原型查找，最终找到，返回结果。</p>"},{"title":"2018-9-6小结","date":"2018-09-06T15:13:09.000Z","toc":true,"_content":"\n从上一篇博客到今天已经过去了四个多月了，确实也是因为有点懒了，博客一直都没有更新。那么希望能重新拾起更新博客的习惯，更新博客就先从最近几个月的总结开始吧。\n\n<!--more-->\n\n## 概括\n\n中间四个月我都做了什么呢，内容做的不多，但也做了一些内容。首先是参加了两次hackathon，然后接了两个外包项目。大概主要的内容就这么多吧，下面详细整理一下心得与体会吧。\n\n## 自我剖析\n\n参加了两次hackathon比赛之后最大的感受是什么呢？没错，就是深感自己技术的不足，和其它很多人相比，感觉差距还是很大的。\n然后就是两个外包项目，采用的都是传统的Jquery那一套，非常的古老，对整个项目的结构写的非常的不满意，可读性，可维护性上面都很差。\n那么下面深入分析一下不足之处。\n* 首先是对前端框架的方面，当时参加比赛的时候毫不避讳的讲，我的技术栈还是停留在Jquery的那种非常古老的技术层面上，框架一个没用过。\n* 然后是前端自动化工具上只是用过比较简单的gulp，对webpack只是了解，从未使用过。\n* 其次对整个项目的模块化上面完全没有头绪，Commonjs和AMD完全不了解。\n* 然后在ES6上面也没有使用过。\n* 还有对JS的使用层面还非常的浅显，之前更多的是对DOM的操作更多一些，逻辑上的东西也没有写过什么非常有逻辑的东西\n* CSS上面，最近在看一本书《CSS世界》，这本书豆瓣上评论褒贬不一，但是对我来说，只是看了几章，就感觉受益匪浅，对一些内在的原理也清晰了不少，CSS还是有很大的提升空间，一些技巧总能让我眼前一亮\n* 项目的规范上面，两次外包都是和另一个后端合作，但是总是感觉流程不规范，比如说没有使用过git，感觉非常的不规范。\n\n说实话自爆短处还是有点丢人的，也可能因为这一点我之前只是经常自己反省，但从来没有把这些不足之处拿出来讲过，导致对自己的能力认识不清楚。\n那么这次的一个简单的整理，也找到了很多的不足之处，那么接下来的时间当然是对这些问题一个一个的弥补了。外包项目也暂时不会再去做了，不然技术会一直停滞不前。\n\n## hackathon\n两次hackathon之行其中一次拿了悬赏任务奖，还有一次作品没有完成。但是不管哪一次，都收获很大，见了同龄人的技术栈，深感自己技术栈的浅显。\n\n### 杭电hackathon\n杭电hackathon做了一个悬赏任务，内容是根据一个能获取人的心率，呼吸强度等信息的仪器，进行一个开发。那么我们最后的成品呢，一个就是将这些信息进行一个数据可视化的处理，另一个则是根据这些获得的数据，进行一个音乐的推荐。也算侥幸拿了个奖吧。\n\n### 交大hackathon\n这次最后由于一些原因，并没有做出成品来，但是依然觉得非常的有意思。这次拿了一个ruff开发板，那么这个东西呢可以说和树莓派有点像吧，不过这个东西全部采用js来控制，那么作为一个前端，当然对这个非常的感兴趣。本来我们是打算根据这个东西来做一个智能家居里面的一个门禁的系统的，这个想法的由来则是源于杭电的hackathon中的一家赞助商的悬赏任务，但是最后由于一些原因没有完成。\n\n## 外包\n两次外包呢，由于一些原因，不方便介绍具体的内容，也不方便贴图。这两个项目呢都是和气象相关的项目。整体实现起来呢，用比较古老的Jquery完全可以实现，并没有什么非常复杂的地方，但是也因为是外包项目，所以在其中并没有尝试一些新学的技术，而是采用了最稳妥的也是写的最多的Jquery那一套。但是项目中呢，也并不是没有收获，这两次项目写下来，深感项目结构的重要性，结构设计的不好，那么后面改起来工作量就会很大。一个好的结构设计，不仅看起来赏心悦目，后面的工作量也会大大减少。\n\n## 总结\n那么简单的总结一下，四个月也算是没有闲着，虽然技术上提高不多，但是也开阔了眼界，深感自身水平的不足，希望能在半年里将上述的内容都逐一补起来。\n那么最后呢，就是对与外包项目的看法，适当的做一些还是有好处的，就比如说巩固所学，更加熟练的应用已有的技术栈，那么不好的地方呢，就是为了稳妥而不敢大面积尝试新学的技术，那么长此以往，技术得不到提高，最后依然会被淘汰。所以外包这件事情还是要掌握一个合适的尺度吧。\n希望从今天开始能重新整理起博客，积累自己。\n\n\n","source":"_posts/18. 2018-9-6小结.md","raw":"---\ntitle: 2018-9-6小结\ndate: 2018-09-06 23:13:09\ntoc: true\ncategories:\n- 总结\ntags:\n- 总结\n---\n\n从上一篇博客到今天已经过去了四个多月了，确实也是因为有点懒了，博客一直都没有更新。那么希望能重新拾起更新博客的习惯，更新博客就先从最近几个月的总结开始吧。\n\n<!--more-->\n\n## 概括\n\n中间四个月我都做了什么呢，内容做的不多，但也做了一些内容。首先是参加了两次hackathon，然后接了两个外包项目。大概主要的内容就这么多吧，下面详细整理一下心得与体会吧。\n\n## 自我剖析\n\n参加了两次hackathon比赛之后最大的感受是什么呢？没错，就是深感自己技术的不足，和其它很多人相比，感觉差距还是很大的。\n然后就是两个外包项目，采用的都是传统的Jquery那一套，非常的古老，对整个项目的结构写的非常的不满意，可读性，可维护性上面都很差。\n那么下面深入分析一下不足之处。\n* 首先是对前端框架的方面，当时参加比赛的时候毫不避讳的讲，我的技术栈还是停留在Jquery的那种非常古老的技术层面上，框架一个没用过。\n* 然后是前端自动化工具上只是用过比较简单的gulp，对webpack只是了解，从未使用过。\n* 其次对整个项目的模块化上面完全没有头绪，Commonjs和AMD完全不了解。\n* 然后在ES6上面也没有使用过。\n* 还有对JS的使用层面还非常的浅显，之前更多的是对DOM的操作更多一些，逻辑上的东西也没有写过什么非常有逻辑的东西\n* CSS上面，最近在看一本书《CSS世界》，这本书豆瓣上评论褒贬不一，但是对我来说，只是看了几章，就感觉受益匪浅，对一些内在的原理也清晰了不少，CSS还是有很大的提升空间，一些技巧总能让我眼前一亮\n* 项目的规范上面，两次外包都是和另一个后端合作，但是总是感觉流程不规范，比如说没有使用过git，感觉非常的不规范。\n\n说实话自爆短处还是有点丢人的，也可能因为这一点我之前只是经常自己反省，但从来没有把这些不足之处拿出来讲过，导致对自己的能力认识不清楚。\n那么这次的一个简单的整理，也找到了很多的不足之处，那么接下来的时间当然是对这些问题一个一个的弥补了。外包项目也暂时不会再去做了，不然技术会一直停滞不前。\n\n## hackathon\n两次hackathon之行其中一次拿了悬赏任务奖，还有一次作品没有完成。但是不管哪一次，都收获很大，见了同龄人的技术栈，深感自己技术栈的浅显。\n\n### 杭电hackathon\n杭电hackathon做了一个悬赏任务，内容是根据一个能获取人的心率，呼吸强度等信息的仪器，进行一个开发。那么我们最后的成品呢，一个就是将这些信息进行一个数据可视化的处理，另一个则是根据这些获得的数据，进行一个音乐的推荐。也算侥幸拿了个奖吧。\n\n### 交大hackathon\n这次最后由于一些原因，并没有做出成品来，但是依然觉得非常的有意思。这次拿了一个ruff开发板，那么这个东西呢可以说和树莓派有点像吧，不过这个东西全部采用js来控制，那么作为一个前端，当然对这个非常的感兴趣。本来我们是打算根据这个东西来做一个智能家居里面的一个门禁的系统的，这个想法的由来则是源于杭电的hackathon中的一家赞助商的悬赏任务，但是最后由于一些原因没有完成。\n\n## 外包\n两次外包呢，由于一些原因，不方便介绍具体的内容，也不方便贴图。这两个项目呢都是和气象相关的项目。整体实现起来呢，用比较古老的Jquery完全可以实现，并没有什么非常复杂的地方，但是也因为是外包项目，所以在其中并没有尝试一些新学的技术，而是采用了最稳妥的也是写的最多的Jquery那一套。但是项目中呢，也并不是没有收获，这两次项目写下来，深感项目结构的重要性，结构设计的不好，那么后面改起来工作量就会很大。一个好的结构设计，不仅看起来赏心悦目，后面的工作量也会大大减少。\n\n## 总结\n那么简单的总结一下，四个月也算是没有闲着，虽然技术上提高不多，但是也开阔了眼界，深感自身水平的不足，希望能在半年里将上述的内容都逐一补起来。\n那么最后呢，就是对与外包项目的看法，适当的做一些还是有好处的，就比如说巩固所学，更加熟练的应用已有的技术栈，那么不好的地方呢，就是为了稳妥而不敢大面积尝试新学的技术，那么长此以往，技术得不到提高，最后依然会被淘汰。所以外包这件事情还是要掌握一个合适的尺度吧。\n希望从今天开始能重新整理起博客，积累自己。\n\n\n","slug":"18. 2018-9-6小结","published":1,"updated":"2021-09-30T06:46:42.023Z","_id":"cku41le8m000hidp2gs7m4ded","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从上一篇博客到今天已经过去了四个多月了，确实也是因为有点懒了，博客一直都没有更新。那么希望能重新拾起更新博客的习惯，更新博客就先从最近几个月的总结开始吧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h2><p>中间四个月我都做了什么呢，内容做的不多，但也做了一些内容。首先是参加了两次hackathon，然后接了两个外包项目。大概主要的内容就这么多吧，下面详细整理一下心得与体会吧。</p>\n<h2 id=\"自我剖析\"><a href=\"#自我剖析\" class=\"headerlink\" title=\"自我剖析\"></a>自我剖析</h2><p>参加了两次hackathon比赛之后最大的感受是什么呢？没错，就是深感自己技术的不足，和其它很多人相比，感觉差距还是很大的。<br>然后就是两个外包项目，采用的都是传统的Jquery那一套，非常的古老，对整个项目的结构写的非常的不满意，可读性，可维护性上面都很差。<br>那么下面深入分析一下不足之处。</p>\n<ul>\n<li>首先是对前端框架的方面，当时参加比赛的时候毫不避讳的讲，我的技术栈还是停留在Jquery的那种非常古老的技术层面上，框架一个没用过。</li>\n<li>然后是前端自动化工具上只是用过比较简单的gulp，对webpack只是了解，从未使用过。</li>\n<li>其次对整个项目的模块化上面完全没有头绪，Commonjs和AMD完全不了解。</li>\n<li>然后在ES6上面也没有使用过。</li>\n<li>还有对JS的使用层面还非常的浅显，之前更多的是对DOM的操作更多一些，逻辑上的东西也没有写过什么非常有逻辑的东西</li>\n<li>CSS上面，最近在看一本书《CSS世界》，这本书豆瓣上评论褒贬不一，但是对我来说，只是看了几章，就感觉受益匪浅，对一些内在的原理也清晰了不少，CSS还是有很大的提升空间，一些技巧总能让我眼前一亮</li>\n<li>项目的规范上面，两次外包都是和另一个后端合作，但是总是感觉流程不规范，比如说没有使用过git，感觉非常的不规范。</li>\n</ul>\n<p>说实话自爆短处还是有点丢人的，也可能因为这一点我之前只是经常自己反省，但从来没有把这些不足之处拿出来讲过，导致对自己的能力认识不清楚。<br>那么这次的一个简单的整理，也找到了很多的不足之处，那么接下来的时间当然是对这些问题一个一个的弥补了。外包项目也暂时不会再去做了，不然技术会一直停滞不前。</p>\n<h2 id=\"hackathon\"><a href=\"#hackathon\" class=\"headerlink\" title=\"hackathon\"></a>hackathon</h2><p>两次hackathon之行其中一次拿了悬赏任务奖，还有一次作品没有完成。但是不管哪一次，都收获很大，见了同龄人的技术栈，深感自己技术栈的浅显。</p>\n<h3 id=\"杭电hackathon\"><a href=\"#杭电hackathon\" class=\"headerlink\" title=\"杭电hackathon\"></a>杭电hackathon</h3><p>杭电hackathon做了一个悬赏任务，内容是根据一个能获取人的心率，呼吸强度等信息的仪器，进行一个开发。那么我们最后的成品呢，一个就是将这些信息进行一个数据可视化的处理，另一个则是根据这些获得的数据，进行一个音乐的推荐。也算侥幸拿了个奖吧。</p>\n<h3 id=\"交大hackathon\"><a href=\"#交大hackathon\" class=\"headerlink\" title=\"交大hackathon\"></a>交大hackathon</h3><p>这次最后由于一些原因，并没有做出成品来，但是依然觉得非常的有意思。这次拿了一个ruff开发板，那么这个东西呢可以说和树莓派有点像吧，不过这个东西全部采用js来控制，那么作为一个前端，当然对这个非常的感兴趣。本来我们是打算根据这个东西来做一个智能家居里面的一个门禁的系统的，这个想法的由来则是源于杭电的hackathon中的一家赞助商的悬赏任务，但是最后由于一些原因没有完成。</p>\n<h2 id=\"外包\"><a href=\"#外包\" class=\"headerlink\" title=\"外包\"></a>外包</h2><p>两次外包呢，由于一些原因，不方便介绍具体的内容，也不方便贴图。这两个项目呢都是和气象相关的项目。整体实现起来呢，用比较古老的Jquery完全可以实现，并没有什么非常复杂的地方，但是也因为是外包项目，所以在其中并没有尝试一些新学的技术，而是采用了最稳妥的也是写的最多的Jquery那一套。但是项目中呢，也并不是没有收获，这两次项目写下来，深感项目结构的重要性，结构设计的不好，那么后面改起来工作量就会很大。一个好的结构设计，不仅看起来赏心悦目，后面的工作量也会大大减少。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么简单的总结一下，四个月也算是没有闲着，虽然技术上提高不多，但是也开阔了眼界，深感自身水平的不足，希望能在半年里将上述的内容都逐一补起来。<br>那么最后呢，就是对与外包项目的看法，适当的做一些还是有好处的，就比如说巩固所学，更加熟练的应用已有的技术栈，那么不好的地方呢，就是为了稳妥而不敢大面积尝试新学的技术，那么长此以往，技术得不到提高，最后依然会被淘汰。所以外包这件事情还是要掌握一个合适的尺度吧。<br>希望从今天开始能重新整理起博客，积累自己。</p>\n","site":{"data":{}},"excerpt":"<p>从上一篇博客到今天已经过去了四个多月了，确实也是因为有点懒了，博客一直都没有更新。那么希望能重新拾起更新博客的习惯，更新博客就先从最近几个月的总结开始吧。</p>","more":"<h2 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h2><p>中间四个月我都做了什么呢，内容做的不多，但也做了一些内容。首先是参加了两次hackathon，然后接了两个外包项目。大概主要的内容就这么多吧，下面详细整理一下心得与体会吧。</p>\n<h2 id=\"自我剖析\"><a href=\"#自我剖析\" class=\"headerlink\" title=\"自我剖析\"></a>自我剖析</h2><p>参加了两次hackathon比赛之后最大的感受是什么呢？没错，就是深感自己技术的不足，和其它很多人相比，感觉差距还是很大的。<br>然后就是两个外包项目，采用的都是传统的Jquery那一套，非常的古老，对整个项目的结构写的非常的不满意，可读性，可维护性上面都很差。<br>那么下面深入分析一下不足之处。</p>\n<ul>\n<li>首先是对前端框架的方面，当时参加比赛的时候毫不避讳的讲，我的技术栈还是停留在Jquery的那种非常古老的技术层面上，框架一个没用过。</li>\n<li>然后是前端自动化工具上只是用过比较简单的gulp，对webpack只是了解，从未使用过。</li>\n<li>其次对整个项目的模块化上面完全没有头绪，Commonjs和AMD完全不了解。</li>\n<li>然后在ES6上面也没有使用过。</li>\n<li>还有对JS的使用层面还非常的浅显，之前更多的是对DOM的操作更多一些，逻辑上的东西也没有写过什么非常有逻辑的东西</li>\n<li>CSS上面，最近在看一本书《CSS世界》，这本书豆瓣上评论褒贬不一，但是对我来说，只是看了几章，就感觉受益匪浅，对一些内在的原理也清晰了不少，CSS还是有很大的提升空间，一些技巧总能让我眼前一亮</li>\n<li>项目的规范上面，两次外包都是和另一个后端合作，但是总是感觉流程不规范，比如说没有使用过git，感觉非常的不规范。</li>\n</ul>\n<p>说实话自爆短处还是有点丢人的，也可能因为这一点我之前只是经常自己反省，但从来没有把这些不足之处拿出来讲过，导致对自己的能力认识不清楚。<br>那么这次的一个简单的整理，也找到了很多的不足之处，那么接下来的时间当然是对这些问题一个一个的弥补了。外包项目也暂时不会再去做了，不然技术会一直停滞不前。</p>\n<h2 id=\"hackathon\"><a href=\"#hackathon\" class=\"headerlink\" title=\"hackathon\"></a>hackathon</h2><p>两次hackathon之行其中一次拿了悬赏任务奖，还有一次作品没有完成。但是不管哪一次，都收获很大，见了同龄人的技术栈，深感自己技术栈的浅显。</p>\n<h3 id=\"杭电hackathon\"><a href=\"#杭电hackathon\" class=\"headerlink\" title=\"杭电hackathon\"></a>杭电hackathon</h3><p>杭电hackathon做了一个悬赏任务，内容是根据一个能获取人的心率，呼吸强度等信息的仪器，进行一个开发。那么我们最后的成品呢，一个就是将这些信息进行一个数据可视化的处理，另一个则是根据这些获得的数据，进行一个音乐的推荐。也算侥幸拿了个奖吧。</p>\n<h3 id=\"交大hackathon\"><a href=\"#交大hackathon\" class=\"headerlink\" title=\"交大hackathon\"></a>交大hackathon</h3><p>这次最后由于一些原因，并没有做出成品来，但是依然觉得非常的有意思。这次拿了一个ruff开发板，那么这个东西呢可以说和树莓派有点像吧，不过这个东西全部采用js来控制，那么作为一个前端，当然对这个非常的感兴趣。本来我们是打算根据这个东西来做一个智能家居里面的一个门禁的系统的，这个想法的由来则是源于杭电的hackathon中的一家赞助商的悬赏任务，但是最后由于一些原因没有完成。</p>\n<h2 id=\"外包\"><a href=\"#外包\" class=\"headerlink\" title=\"外包\"></a>外包</h2><p>两次外包呢，由于一些原因，不方便介绍具体的内容，也不方便贴图。这两个项目呢都是和气象相关的项目。整体实现起来呢，用比较古老的Jquery完全可以实现，并没有什么非常复杂的地方，但是也因为是外包项目，所以在其中并没有尝试一些新学的技术，而是采用了最稳妥的也是写的最多的Jquery那一套。但是项目中呢，也并不是没有收获，这两次项目写下来，深感项目结构的重要性，结构设计的不好，那么后面改起来工作量就会很大。一个好的结构设计，不仅看起来赏心悦目，后面的工作量也会大大减少。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么简单的总结一下，四个月也算是没有闲着，虽然技术上提高不多，但是也开阔了眼界，深感自身水平的不足，希望能在半年里将上述的内容都逐一补起来。<br>那么最后呢，就是对与外包项目的看法，适当的做一些还是有好处的，就比如说巩固所学，更加熟练的应用已有的技术栈，那么不好的地方呢，就是为了稳妥而不敢大面积尝试新学的技术，那么长此以往，技术得不到提高，最后依然会被淘汰。所以外包这件事情还是要掌握一个合适的尺度吧。<br>希望从今天开始能重新整理起博客，积累自己。</p>"},{"title":"CSS-iScroll实现水平滚动实例","date":"2018-09-07T11:46:11.000Z","toc":true,"_content":"\n## 前言\n\n最近在看《CSS世界》这本书，这本书其中的很多小技巧都让我有种眼前一亮的感觉，而且还有很多我之前不了解的一些语法，那么我会抽空将这本书上的一些小技巧，或者一些例子实现一下，加深印象。其中也会有一些自己的思考，以及学习这些知识时我发现的其它技术内容。\n\n<!--more-->\n\n## iScroll\n\niScroll这是一个更多应用于移动设备的开发上的工具，能实现滚动效果、滑动等很多的效果，之前对这个工具并不了解。\n\n## 具体实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-7/demo.jpg\" height=\"300px\">\n\n#### HTML\n\n```html\n<div id=\"wrap\" class=\"wrap\">\n  <ul>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n  </ul>\n</div>\n```\n\n#### CSS\n\n```css\n.wrap {\n  margin: 200px;\n  width: 300px; height: 200px;\n  position: relative;\n  overflow: hidden;\n}\n.wrap > ul {\n  position: absolute;\n  white-space: nowrap;\n}\n.wrap li {\n  display: inline-block;\n}\n.wrap li img {\n  height: 192px;\n}\n```\n#### JS\n\n```js\n// 这里需要引入iscroll.js\nnew IScroll('#wrap', {\n  scrollbars: true,\n  scrollX: true,\n  scrollY: false,\n});\n```\n如果DOM还没有渲染完就执行iScroll初始化，会没有效果\n\n> 如果你有一个复杂的DOM结构，最好在onload事件之后适当的延迟，再去初始化iScroll。最好给浏览器100或者200毫秒的间隙再去初始化iScroll\n\n> iScroll使用的是querySelector 而不是 querySelectorAll，所以iScroll只会作用到选择器选中元素的第一个\n\n## iScroll所能实现的一些功能\n\n* `scrollTo(x, y, time, easing)`滚动到任意位置\n* `scrollBy(x, y, time, easing)`从当前位置相对滚动\n* `scrollToElement(el, time, offsetX, offsetY, easing)`滚动到特定位置\n* `goToPage(x, y, time, easing)`滚动到想要滚动的页面数（需在参数配置里设置snap）\n\n当然还有一些别的功能，这里目前没有需求，所以就不列举其它的功能了。\n\n## 总结\n\n那么从这个工具上来看，可以说是非常适合移动端的手指滑动了，而且动画效果非常的流畅。除此之外，想到了之前做的一个问卷平台，问卷平台的右侧有一个跟随题目生成位置不断移动的窗口，那么这里就可以通过iScroll来实现这种效果。\n\n\n","source":"_posts/19. CSS-iScroll实现水平滚动实例.md","raw":"---\ntitle: CSS-iScroll实现水平滚动实例\ndate: 2018-09-07 19:46:11\ntoc: true\ncategories:\n- 前端\ntags:\n- CSS\n---\n\n## 前言\n\n最近在看《CSS世界》这本书，这本书其中的很多小技巧都让我有种眼前一亮的感觉，而且还有很多我之前不了解的一些语法，那么我会抽空将这本书上的一些小技巧，或者一些例子实现一下，加深印象。其中也会有一些自己的思考，以及学习这些知识时我发现的其它技术内容。\n\n<!--more-->\n\n## iScroll\n\niScroll这是一个更多应用于移动设备的开发上的工具，能实现滚动效果、滑动等很多的效果，之前对这个工具并不了解。\n\n## 具体实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-7/demo.jpg\" height=\"300px\">\n\n#### HTML\n\n```html\n<div id=\"wrap\" class=\"wrap\">\n  <ul>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n    <li><img src=\"test.jpg\"></li>\n  </ul>\n</div>\n```\n\n#### CSS\n\n```css\n.wrap {\n  margin: 200px;\n  width: 300px; height: 200px;\n  position: relative;\n  overflow: hidden;\n}\n.wrap > ul {\n  position: absolute;\n  white-space: nowrap;\n}\n.wrap li {\n  display: inline-block;\n}\n.wrap li img {\n  height: 192px;\n}\n```\n#### JS\n\n```js\n// 这里需要引入iscroll.js\nnew IScroll('#wrap', {\n  scrollbars: true,\n  scrollX: true,\n  scrollY: false,\n});\n```\n如果DOM还没有渲染完就执行iScroll初始化，会没有效果\n\n> 如果你有一个复杂的DOM结构，最好在onload事件之后适当的延迟，再去初始化iScroll。最好给浏览器100或者200毫秒的间隙再去初始化iScroll\n\n> iScroll使用的是querySelector 而不是 querySelectorAll，所以iScroll只会作用到选择器选中元素的第一个\n\n## iScroll所能实现的一些功能\n\n* `scrollTo(x, y, time, easing)`滚动到任意位置\n* `scrollBy(x, y, time, easing)`从当前位置相对滚动\n* `scrollToElement(el, time, offsetX, offsetY, easing)`滚动到特定位置\n* `goToPage(x, y, time, easing)`滚动到想要滚动的页面数（需在参数配置里设置snap）\n\n当然还有一些别的功能，这里目前没有需求，所以就不列举其它的功能了。\n\n## 总结\n\n那么从这个工具上来看，可以说是非常适合移动端的手指滑动了，而且动画效果非常的流畅。除此之外，想到了之前做的一个问卷平台，问卷平台的右侧有一个跟随题目生成位置不断移动的窗口，那么这里就可以通过iScroll来实现这种效果。\n\n\n","slug":"19. CSS-iScroll实现水平滚动实例","published":1,"updated":"2021-09-30T06:46:49.793Z","_id":"cku41le8n000jidp2cos771ik","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看《CSS世界》这本书，这本书其中的很多小技巧都让我有种眼前一亮的感觉，而且还有很多我之前不了解的一些语法，那么我会抽空将这本书上的一些小技巧，或者一些例子实现一下，加深印象。其中也会有一些自己的思考，以及学习这些知识时我发现的其它技术内容。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"iScroll\"><a href=\"#iScroll\" class=\"headerlink\" title=\"iScroll\"></a>iScroll</h2><p>iScroll这是一个更多应用于移动设备的开发上的工具，能实现滚动效果、滑动等很多的效果，之前对这个工具并不了解。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-7/demo.jpg\" height=\"300px\">\n\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">192px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里需要引入iscroll.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> IScroll(<span class=\"string\">&#x27;#wrap&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">scrollbars</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollX</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollY</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果DOM还没有渲染完就执行iScroll初始化，会没有效果</p>\n<blockquote>\n<p>如果你有一个复杂的DOM结构，最好在onload事件之后适当的延迟，再去初始化iScroll。最好给浏览器100或者200毫秒的间隙再去初始化iScroll</p>\n</blockquote>\n<blockquote>\n<p>iScroll使用的是querySelector 而不是 querySelectorAll，所以iScroll只会作用到选择器选中元素的第一个</p>\n</blockquote>\n<h2 id=\"iScroll所能实现的一些功能\"><a href=\"#iScroll所能实现的一些功能\" class=\"headerlink\" title=\"iScroll所能实现的一些功能\"></a>iScroll所能实现的一些功能</h2><ul>\n<li><code>scrollTo(x, y, time, easing)</code>滚动到任意位置</li>\n<li><code>scrollBy(x, y, time, easing)</code>从当前位置相对滚动</li>\n<li><code>scrollToElement(el, time, offsetX, offsetY, easing)</code>滚动到特定位置</li>\n<li><code>goToPage(x, y, time, easing)</code>滚动到想要滚动的页面数（需在参数配置里设置snap）</li>\n</ul>\n<p>当然还有一些别的功能，这里目前没有需求，所以就不列举其它的功能了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么从这个工具上来看，可以说是非常适合移动端的手指滑动了，而且动画效果非常的流畅。除此之外，想到了之前做的一个问卷平台，问卷平台的右侧有一个跟随题目生成位置不断移动的窗口，那么这里就可以通过iScroll来实现这种效果。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看《CSS世界》这本书，这本书其中的很多小技巧都让我有种眼前一亮的感觉，而且还有很多我之前不了解的一些语法，那么我会抽空将这本书上的一些小技巧，或者一些例子实现一下，加深印象。其中也会有一些自己的思考，以及学习这些知识时我发现的其它技术内容。</p>","more":"<h2 id=\"iScroll\"><a href=\"#iScroll\" class=\"headerlink\" title=\"iScroll\"></a>iScroll</h2><p>iScroll这是一个更多应用于移动设备的开发上的工具，能实现滚动效果、滑动等很多的效果，之前对这个工具并不了解。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-7/demo.jpg\" height=\"300px\">\n\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;test.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">192px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里需要引入iscroll.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> IScroll(<span class=\"string\">&#x27;#wrap&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">scrollbars</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollX</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scrollY</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果DOM还没有渲染完就执行iScroll初始化，会没有效果</p>\n<blockquote>\n<p>如果你有一个复杂的DOM结构，最好在onload事件之后适当的延迟，再去初始化iScroll。最好给浏览器100或者200毫秒的间隙再去初始化iScroll</p>\n</blockquote>\n<blockquote>\n<p>iScroll使用的是querySelector 而不是 querySelectorAll，所以iScroll只会作用到选择器选中元素的第一个</p>\n</blockquote>\n<h2 id=\"iScroll所能实现的一些功能\"><a href=\"#iScroll所能实现的一些功能\" class=\"headerlink\" title=\"iScroll所能实现的一些功能\"></a>iScroll所能实现的一些功能</h2><ul>\n<li><code>scrollTo(x, y, time, easing)</code>滚动到任意位置</li>\n<li><code>scrollBy(x, y, time, easing)</code>从当前位置相对滚动</li>\n<li><code>scrollToElement(el, time, offsetX, offsetY, easing)</code>滚动到特定位置</li>\n<li><code>goToPage(x, y, time, easing)</code>滚动到想要滚动的页面数（需在参数配置里设置snap）</li>\n</ul>\n<p>当然还有一些别的功能，这里目前没有需求，所以就不列举其它的功能了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>那么从这个工具上来看，可以说是非常适合移动端的手指滑动了，而且动画效果非常的流畅。除此之外，想到了之前做的一个问卷平台，问卷平台的右侧有一个跟随题目生成位置不断移动的窗口，那么这里就可以通过iScroll来实现这种效果。</p>"},{"title":"页面常用布局整理","date":"2017-09-28T11:07:00.000Z","toc":true,"_content":"\n由于最近做的一个练习，用到了三栏布局，但是对其中的原理早就忘了，于是重新整理一番。\n\n<!--more-->\n\n## 三栏布局\n\n三栏布局属于一种很常见的布局方式，字面上理解即分成三栏。由于各种原因，浏览器的大小并不完全相同，若将每一块设置成定宽，则不能兼顾各种尺寸。三栏布局即左右定宽，中间自适应，能适应很多需求。\n\n### 1、左右浮动\n\n左右浮动的代码核心即采用float浮动方法，将左右两栏脱离文档流，而中间设置左右margin外边距，这样margin既能直接依照浏览器边缘做基准。HTML代码如下：\n\n```html\n<div class=\"left\">left</div>\n<div class=\"right\">right</div>\n<div class=\"middle\">middle</div>\n```\n\nCSS代码如下：\n```css\n.left{\n  float: left; \n  background-color: blue; \n  width: 100px; \n  height: 100px;\n}\n\n.middle{\n  margin: 0 120px;\n  background-color: yellow; \n  height: 300px;\n}\n\n.right{\n  float: right;\n  background-color: blue; \n  width: 100px; \n  height: 100px;\n}\n```\n\n\n* 需要注意的是注意HTML中左右栏与中间栏的位置，一定要将middle栏放在最后，因为浮动会脱离文档流。\n* 该方法足够简洁，但是浮动的使用也添加了一些隐患。而且根据浏览器加载的规律，左右两栏会先于中间栏加载，倘若左右两栏加载过慢，影响用户体验。\n\n### 2、圣杯布局\n\n圣杯布局主要采用margin负值来形成三栏布局，HTML代码如下:\n\n```html\n<div class=\"container\">\n  <div class=\"middle\">middle</div>\n  <div class=\"left\">left</div>\n  <div class=\"right\">right</div>\n</div>\n```\n\ncss代码如下：\n\n```css\n.container{\n  padding-left: 100px;\n  padding-right: 200px;\n}\n\n.left{\n  float: left;\n  width: 100px;\n  height: 200px;\n  background-color: #000AFF;\n  margin-left: -100%;\n  position: relative;\n  left: -100px;\n}\n\n.middle{\n  float: left;\n  width: 100%;\n  height: 200px;\n  background-color: #D3FF00;\n}\n\n.right{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: #FF0000;\n  margin-left: -200px;\n  position: relative;\n  right: -200px;\n}\n```\n\n\n* 圣杯布局的父元素container中的padding主要形成左右栏的框架。\n* 若无position则会由于padding的控制而使左右空白，此时需要position:relative来调整左右栏位置。\n* 若想将左右栏与中间栏有空位置，可将container中padding属性以及position的属性来调整。\n* [此处跳转其他博客关于圣杯布局详解](http://blog.csdn.net/konglei1996/article/details/50881391)\n\n### 3、双飞翼布局\n\n双飞翼布局是圣杯布局的改进，标签的使用更简洁，HTML代码如下:\n\n```html\n<div class=\"middle_body\">\n  <div class=\"middle\">middle</div>\n</div>\n<div class=\"left\">left</div>\n<div class=\"right\">right</div>\n```\n\ncss代码如下：\n\n```css\n.middle{\n  float: left;\n  width: 100%;\n  height: 200px;\n  background-color: #F7FF00;\n}\n\n.inner{\n  margin-left: 100px;\n  margin-right: 200px;\n}\n\n.left{\n  float: left;\n  width: 100px;\n  height: 200px;\n  background-color: #0015FF; \n  margin-left: -100%;\n}\n\n.right{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: #FF0000;\n  margin-left: -200px;\n}\n```\n\n双飞翼布局在处理三栏位置的时候与圣杯布局相同，都是采用margin负值。但是在中间内容遮挡的处理上不同。\n* 圣杯布局采用position相对定位以及整个的padding来使左右两栏移动。\n* 而双飞翼布局采用在中间元素中插入子元素，子元素包含了中间栏的内容，而在中间栏使用margin将两侧撑开。\n* 若想将三栏之间留有间隙，则可将middle中的color移至inner中，再改动margin即可。\n\n## 小结\n\n三栏布局时间已经很长了，但是其中的原理还是很值得研究的。除去三栏布局，我目前所熟知的布局还有bootstrap的栅格化布局（响应式布局），还有Flex布局。几种布局方式各有优劣，如何恰当的选取暂时理解不深，随着我不断的完成项目，应该能有更深的理解，期待我技术的不断进步。\n\n----------------------------- 2019.4.8 更新 --------------------------------\n\n## 两栏布局\n\n### 1. float-margin\n\nfloat本身BFC，但是具有破坏性。而且虽然能不定宽（这里发现好多网上的都是错的，margin-left设置百分比是按照父元素来定的，也就是说可以不定宽，但是也有一点小问题，就是中间的间隙也是百分比，这个体验不是太好）\n\n### 2. BFC\n\n方案优势：可以充分利用流体特性，左侧无论多宽，右侧BFC后，不会受其影响\n\n而且可以整站替换，比如声明两个class，一个overflow：hidden，一个float：left。就可以整站使用\n\n而float-margin需要知道左侧宽度而确定margin大小，没办法组件化。\n当然容器外面的元素有可能被隐藏，也算是一点小小的缺点吧\n\n### 3. table-cell\n\n虽然是比较古老的布局吧，最开始也觉得这种布局很烂啊，什么的。但是后面也有了一点感触吧，真的是不同的布局有不同的优势，table布局简单，而且内部宽度设置的再大也不会超过表格容器宽度，也可以做一个自适应的block。而且最主要的是，天然支持等高布局\n\n\n## 等高布局\n\n### 1. border模拟\n\n缺点，左侧定宽\n\n优点：兼容性好\n\n### 2. margin和padding组合\n\nmargin-bottom：-9999px， padding-bottom：9999px，外部overflow：hidden隐藏\n\n不足之处：子元素定位到外面会因为overflow：hidden产生一定问题","source":"_posts/2. 页面常用布局整理.md","raw":"---\ntitle: 页面常用布局整理\ndate: 2017-09-28 19:07:00\ntoc: true\ncategories:\n- 前端\ntags: \n- CSS\n---\n\n由于最近做的一个练习，用到了三栏布局，但是对其中的原理早就忘了，于是重新整理一番。\n\n<!--more-->\n\n## 三栏布局\n\n三栏布局属于一种很常见的布局方式，字面上理解即分成三栏。由于各种原因，浏览器的大小并不完全相同，若将每一块设置成定宽，则不能兼顾各种尺寸。三栏布局即左右定宽，中间自适应，能适应很多需求。\n\n### 1、左右浮动\n\n左右浮动的代码核心即采用float浮动方法，将左右两栏脱离文档流，而中间设置左右margin外边距，这样margin既能直接依照浏览器边缘做基准。HTML代码如下：\n\n```html\n<div class=\"left\">left</div>\n<div class=\"right\">right</div>\n<div class=\"middle\">middle</div>\n```\n\nCSS代码如下：\n```css\n.left{\n  float: left; \n  background-color: blue; \n  width: 100px; \n  height: 100px;\n}\n\n.middle{\n  margin: 0 120px;\n  background-color: yellow; \n  height: 300px;\n}\n\n.right{\n  float: right;\n  background-color: blue; \n  width: 100px; \n  height: 100px;\n}\n```\n\n\n* 需要注意的是注意HTML中左右栏与中间栏的位置，一定要将middle栏放在最后，因为浮动会脱离文档流。\n* 该方法足够简洁，但是浮动的使用也添加了一些隐患。而且根据浏览器加载的规律，左右两栏会先于中间栏加载，倘若左右两栏加载过慢，影响用户体验。\n\n### 2、圣杯布局\n\n圣杯布局主要采用margin负值来形成三栏布局，HTML代码如下:\n\n```html\n<div class=\"container\">\n  <div class=\"middle\">middle</div>\n  <div class=\"left\">left</div>\n  <div class=\"right\">right</div>\n</div>\n```\n\ncss代码如下：\n\n```css\n.container{\n  padding-left: 100px;\n  padding-right: 200px;\n}\n\n.left{\n  float: left;\n  width: 100px;\n  height: 200px;\n  background-color: #000AFF;\n  margin-left: -100%;\n  position: relative;\n  left: -100px;\n}\n\n.middle{\n  float: left;\n  width: 100%;\n  height: 200px;\n  background-color: #D3FF00;\n}\n\n.right{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: #FF0000;\n  margin-left: -200px;\n  position: relative;\n  right: -200px;\n}\n```\n\n\n* 圣杯布局的父元素container中的padding主要形成左右栏的框架。\n* 若无position则会由于padding的控制而使左右空白，此时需要position:relative来调整左右栏位置。\n* 若想将左右栏与中间栏有空位置，可将container中padding属性以及position的属性来调整。\n* [此处跳转其他博客关于圣杯布局详解](http://blog.csdn.net/konglei1996/article/details/50881391)\n\n### 3、双飞翼布局\n\n双飞翼布局是圣杯布局的改进，标签的使用更简洁，HTML代码如下:\n\n```html\n<div class=\"middle_body\">\n  <div class=\"middle\">middle</div>\n</div>\n<div class=\"left\">left</div>\n<div class=\"right\">right</div>\n```\n\ncss代码如下：\n\n```css\n.middle{\n  float: left;\n  width: 100%;\n  height: 200px;\n  background-color: #F7FF00;\n}\n\n.inner{\n  margin-left: 100px;\n  margin-right: 200px;\n}\n\n.left{\n  float: left;\n  width: 100px;\n  height: 200px;\n  background-color: #0015FF; \n  margin-left: -100%;\n}\n\n.right{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: #FF0000;\n  margin-left: -200px;\n}\n```\n\n双飞翼布局在处理三栏位置的时候与圣杯布局相同，都是采用margin负值。但是在中间内容遮挡的处理上不同。\n* 圣杯布局采用position相对定位以及整个的padding来使左右两栏移动。\n* 而双飞翼布局采用在中间元素中插入子元素，子元素包含了中间栏的内容，而在中间栏使用margin将两侧撑开。\n* 若想将三栏之间留有间隙，则可将middle中的color移至inner中，再改动margin即可。\n\n## 小结\n\n三栏布局时间已经很长了，但是其中的原理还是很值得研究的。除去三栏布局，我目前所熟知的布局还有bootstrap的栅格化布局（响应式布局），还有Flex布局。几种布局方式各有优劣，如何恰当的选取暂时理解不深，随着我不断的完成项目，应该能有更深的理解，期待我技术的不断进步。\n\n----------------------------- 2019.4.8 更新 --------------------------------\n\n## 两栏布局\n\n### 1. float-margin\n\nfloat本身BFC，但是具有破坏性。而且虽然能不定宽（这里发现好多网上的都是错的，margin-left设置百分比是按照父元素来定的，也就是说可以不定宽，但是也有一点小问题，就是中间的间隙也是百分比，这个体验不是太好）\n\n### 2. BFC\n\n方案优势：可以充分利用流体特性，左侧无论多宽，右侧BFC后，不会受其影响\n\n而且可以整站替换，比如声明两个class，一个overflow：hidden，一个float：left。就可以整站使用\n\n而float-margin需要知道左侧宽度而确定margin大小，没办法组件化。\n当然容器外面的元素有可能被隐藏，也算是一点小小的缺点吧\n\n### 3. table-cell\n\n虽然是比较古老的布局吧，最开始也觉得这种布局很烂啊，什么的。但是后面也有了一点感触吧，真的是不同的布局有不同的优势，table布局简单，而且内部宽度设置的再大也不会超过表格容器宽度，也可以做一个自适应的block。而且最主要的是，天然支持等高布局\n\n\n## 等高布局\n\n### 1. border模拟\n\n缺点，左侧定宽\n\n优点：兼容性好\n\n### 2. margin和padding组合\n\nmargin-bottom：-9999px， padding-bottom：9999px，外部overflow：hidden隐藏\n\n不足之处：子元素定位到外面会因为overflow：hidden产生一定问题","slug":"2. 页面常用布局整理","published":1,"updated":"2021-09-30T06:44:55.890Z","_id":"cku41le8o000lidp22n3m99zw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于最近做的一个练习，用到了三栏布局，但是对其中的原理早就忘了，于是重新整理一番。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h2><p>三栏布局属于一种很常见的布局方式，字面上理解即分成三栏。由于各种原因，浏览器的大小并不完全相同，若将每一块设置成定宽，则不能兼顾各种尺寸。三栏布局即左右定宽，中间自适应，能适应很多需求。</p>\n<h3 id=\"1、左右浮动\"><a href=\"#1、左右浮动\" class=\"headerlink\" title=\"1、左右浮动\"></a>1、左右浮动</h3><p>左右浮动的代码核心即采用float浮动方法，将左右两栏脱离文档流，而中间设置左右margin外边距，这样margin既能直接依照浏览器边缘做基准。HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>需要注意的是注意HTML中左右栏与中间栏的位置，一定要将middle栏放在最后，因为浮动会脱离文档流。</li>\n<li>该方法足够简洁，但是浮动的使用也添加了一些隐患。而且根据浏览器加载的规律，左右两栏会先于中间栏加载，倘若左右两栏加载过慢，影响用户体验。</li>\n</ul>\n<h3 id=\"2、圣杯布局\"><a href=\"#2、圣杯布局\" class=\"headerlink\" title=\"2、圣杯布局\"></a>2、圣杯布局</h3><p>圣杯布局主要采用margin负值来形成三栏布局，HTML代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000AFF</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#D3FF00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>圣杯布局的父元素container中的padding主要形成左右栏的框架。</li>\n<li>若无position则会由于padding的控制而使左右空白，此时需要position:relative来调整左右栏位置。</li>\n<li>若想将左右栏与中间栏有空位置，可将container中padding属性以及position的属性来调整。</li>\n<li><a href=\"http://blog.csdn.net/konglei1996/article/details/50881391\">此处跳转其他博客关于圣杯布局详解</a></li>\n</ul>\n<h3 id=\"3、双飞翼布局\"><a href=\"#3、双飞翼布局\" class=\"headerlink\" title=\"3、双飞翼布局\"></a>3、双飞翼布局</h3><p>双飞翼布局是圣杯布局的改进，标签的使用更简洁，HTML代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle_body&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#F7FF00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#0015FF</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>双飞翼布局在处理三栏位置的时候与圣杯布局相同，都是采用margin负值。但是在中间内容遮挡的处理上不同。</p>\n<ul>\n<li>圣杯布局采用position相对定位以及整个的padding来使左右两栏移动。</li>\n<li>而双飞翼布局采用在中间元素中插入子元素，子元素包含了中间栏的内容，而在中间栏使用margin将两侧撑开。</li>\n<li>若想将三栏之间留有间隙，则可将middle中的color移至inner中，再改动margin即可。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>三栏布局时间已经很长了，但是其中的原理还是很值得研究的。除去三栏布局，我目前所熟知的布局还有bootstrap的栅格化布局（响应式布局），还有Flex布局。几种布局方式各有优劣，如何恰当的选取暂时理解不深，随着我不断的完成项目，应该能有更深的理解，期待我技术的不断进步。</p>\n<p>—————————– 2019.4.8 更新 ——————————–</p>\n<h2 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h2><h3 id=\"1-float-margin\"><a href=\"#1-float-margin\" class=\"headerlink\" title=\"1. float-margin\"></a>1. float-margin</h3><p>float本身BFC，但是具有破坏性。而且虽然能不定宽（这里发现好多网上的都是错的，margin-left设置百分比是按照父元素来定的，也就是说可以不定宽，但是也有一点小问题，就是中间的间隙也是百分比，这个体验不是太好）</p>\n<h3 id=\"2-BFC\"><a href=\"#2-BFC\" class=\"headerlink\" title=\"2. BFC\"></a>2. BFC</h3><p>方案优势：可以充分利用流体特性，左侧无论多宽，右侧BFC后，不会受其影响</p>\n<p>而且可以整站替换，比如声明两个class，一个overflow：hidden，一个float：left。就可以整站使用</p>\n<p>而float-margin需要知道左侧宽度而确定margin大小，没办法组件化。<br>当然容器外面的元素有可能被隐藏，也算是一点小小的缺点吧</p>\n<h3 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3. table-cell\"></a>3. table-cell</h3><p>虽然是比较古老的布局吧，最开始也觉得这种布局很烂啊，什么的。但是后面也有了一点感触吧，真的是不同的布局有不同的优势，table布局简单，而且内部宽度设置的再大也不会超过表格容器宽度，也可以做一个自适应的block。而且最主要的是，天然支持等高布局</p>\n<h2 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h2><h3 id=\"1-border模拟\"><a href=\"#1-border模拟\" class=\"headerlink\" title=\"1. border模拟\"></a>1. border模拟</h3><p>缺点，左侧定宽</p>\n<p>优点：兼容性好</p>\n<h3 id=\"2-margin和padding组合\"><a href=\"#2-margin和padding组合\" class=\"headerlink\" title=\"2. margin和padding组合\"></a>2. margin和padding组合</h3><p>margin-bottom：-9999px， padding-bottom：9999px，外部overflow：hidden隐藏</p>\n<p>不足之处：子元素定位到外面会因为overflow：hidden产生一定问题</p>\n","site":{"data":{}},"excerpt":"<p>由于最近做的一个练习，用到了三栏布局，但是对其中的原理早就忘了，于是重新整理一番。</p>","more":"<h2 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h2><p>三栏布局属于一种很常见的布局方式，字面上理解即分成三栏。由于各种原因，浏览器的大小并不完全相同，若将每一块设置成定宽，则不能兼顾各种尺寸。三栏布局即左右定宽，中间自适应，能适应很多需求。</p>\n<h3 id=\"1、左右浮动\"><a href=\"#1、左右浮动\" class=\"headerlink\" title=\"1、左右浮动\"></a>1、左右浮动</h3><p>左右浮动的代码核心即采用float浮动方法，将左右两栏脱离文档流，而中间设置左右margin外边距，这样margin既能直接依照浏览器边缘做基准。HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue; </span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>需要注意的是注意HTML中左右栏与中间栏的位置，一定要将middle栏放在最后，因为浮动会脱离文档流。</li>\n<li>该方法足够简洁，但是浮动的使用也添加了一些隐患。而且根据浏览器加载的规律，左右两栏会先于中间栏加载，倘若左右两栏加载过慢，影响用户体验。</li>\n</ul>\n<h3 id=\"2、圣杯布局\"><a href=\"#2、圣杯布局\" class=\"headerlink\" title=\"2、圣杯布局\"></a>2、圣杯布局</h3><p>圣杯布局主要采用margin负值来形成三栏布局，HTML代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000AFF</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#D3FF00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>圣杯布局的父元素container中的padding主要形成左右栏的框架。</li>\n<li>若无position则会由于padding的控制而使左右空白，此时需要position:relative来调整左右栏位置。</li>\n<li>若想将左右栏与中间栏有空位置，可将container中padding属性以及position的属性来调整。</li>\n<li><a href=\"http://blog.csdn.net/konglei1996/article/details/50881391\">此处跳转其他博客关于圣杯布局详解</a></li>\n</ul>\n<h3 id=\"3、双飞翼布局\"><a href=\"#3、双飞翼布局\" class=\"headerlink\" title=\"3、双飞翼布局\"></a>3、双飞翼布局</h3><p>双飞翼布局是圣杯布局的改进，标签的使用更简洁，HTML代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle_body&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#F7FF00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#0015FF</span>; </span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>双飞翼布局在处理三栏位置的时候与圣杯布局相同，都是采用margin负值。但是在中间内容遮挡的处理上不同。</p>\n<ul>\n<li>圣杯布局采用position相对定位以及整个的padding来使左右两栏移动。</li>\n<li>而双飞翼布局采用在中间元素中插入子元素，子元素包含了中间栏的内容，而在中间栏使用margin将两侧撑开。</li>\n<li>若想将三栏之间留有间隙，则可将middle中的color移至inner中，再改动margin即可。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>三栏布局时间已经很长了，但是其中的原理还是很值得研究的。除去三栏布局，我目前所熟知的布局还有bootstrap的栅格化布局（响应式布局），还有Flex布局。几种布局方式各有优劣，如何恰当的选取暂时理解不深，随着我不断的完成项目，应该能有更深的理解，期待我技术的不断进步。</p>\n<p>—————————– 2019.4.8 更新 ——————————–</p>\n<h2 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h2><h3 id=\"1-float-margin\"><a href=\"#1-float-margin\" class=\"headerlink\" title=\"1. float-margin\"></a>1. float-margin</h3><p>float本身BFC，但是具有破坏性。而且虽然能不定宽（这里发现好多网上的都是错的，margin-left设置百分比是按照父元素来定的，也就是说可以不定宽，但是也有一点小问题，就是中间的间隙也是百分比，这个体验不是太好）</p>\n<h3 id=\"2-BFC\"><a href=\"#2-BFC\" class=\"headerlink\" title=\"2. BFC\"></a>2. BFC</h3><p>方案优势：可以充分利用流体特性，左侧无论多宽，右侧BFC后，不会受其影响</p>\n<p>而且可以整站替换，比如声明两个class，一个overflow：hidden，一个float：left。就可以整站使用</p>\n<p>而float-margin需要知道左侧宽度而确定margin大小，没办法组件化。<br>当然容器外面的元素有可能被隐藏，也算是一点小小的缺点吧</p>\n<h3 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3. table-cell\"></a>3. table-cell</h3><p>虽然是比较古老的布局吧，最开始也觉得这种布局很烂啊，什么的。但是后面也有了一点感触吧，真的是不同的布局有不同的优势，table布局简单，而且内部宽度设置的再大也不会超过表格容器宽度，也可以做一个自适应的block。而且最主要的是，天然支持等高布局</p>\n<h2 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h2><h3 id=\"1-border模拟\"><a href=\"#1-border模拟\" class=\"headerlink\" title=\"1. border模拟\"></a>1. border模拟</h3><p>缺点，左侧定宽</p>\n<p>优点：兼容性好</p>\n<h3 id=\"2-margin和padding组合\"><a href=\"#2-margin和padding组合\" class=\"headerlink\" title=\"2. margin和padding组合\"></a>2. margin和padding组合</h3><p>margin-bottom：-9999px， padding-bottom：9999px，外部overflow：hidden隐藏</p>\n<p>不足之处：子元素定位到外面会因为overflow：hidden产生一定问题</p>"},{"title":"DDA算法和Bresenham算法画线","date":"2018-09-10T14:58:23.000Z","toc":true,"_content":"\n最近正在看P5.js这个库，这个库可以说是Processing的JS版。这个库有一套作画功能，不仅仅能在canvas上画，还能把整个浏览器都当成画布。然后对前端数据可视化方向有一些兴趣，再加上开的一门课叫计算机图形学。多者结合，才有了这样一篇文章的整理。\n\n<!--more-->\n\n## DDA算法\n\n### DDA算法原理\n\nDDA算法，是一种通过多个点连成一条近似直线的算法。众所周知，一个图像的显示是由无数个像素点构成的。那么，直线也不例外，也可以看成是无数个点的集合。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-formula.png\" height=\"200px\">\n\nDDA算法即选出Δx和Δy中较大者作为最大步长，然后分别与Δx和Δy相乘得出每个方向上的单步步长，将第二个点的坐标算出来后，四舍五入近似成+0或+1。\n举个例子，根据上述公式可以看出，假若斜率小于1，每次x单步步长必为+1，此时只考虑y步长，算出y步长后加在上一个点上，然后使用函数进行近似，即可得出点的近似位置\n\n### DDA算法实现步骤\n\n1. 给出两点坐标\n2. 选出Δx和Δy中较大者作为最大步长\n3. 算出x轴和y轴的单步步长\n4. 循环画点\n\n### 代码实现\n\n#### 效果图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-img.jpg\" height=\"200px\">\n\n整体看似乎没有什么区别，那么放大看一下\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-res.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-origin.jpg\" height=\"200px\">\n\n放大看还是能看出比较明显的像素点的，反观`line()`函数画出的直线则几乎没有锯齿，目前还不清楚`line()`函数是如何实现的。\n\n#### HTML\n\n```HTML\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DDA算法绘制直线</title>\n    <style> body {padding: 0; margin: 0;} </style>\n    <script src=\"../p5/p5.min.js\"></script>\n    <script src=\"../p5/addons/p5.dom.min.js\"></script>\n    <script src=\"../p5/addons/p5.sound.min.js\"></script>\n    <script src=\"./sketch.js\"></script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n#### JS\n\n```js\n// sketch.js\nfunction setup() {\n  /* \n    原来对比直线\n    (600,100) 到 (1050,400)\n  */\n  let o1 = {\n    x: 600,\n    y: 100\n  }\n  let o2 = {\n    x: 1050,\n    y: 400\n  }\n  \n  /* \n    新画直线\n    (50,100) 到 (500, 400)\n  */\n  let beginPoint = {\n    x: 50,\n    y: 100\n  };\n  let endPoint = {\n    x: 500,\n    y: 400\n  };\n\n\n  createCanvas(1200, 600);\n  background(0);\n  \n  stroke(255);\n  line(o1.x, o1.y, o2.x, o2.y);\n  \n  // drawLine(beginPoint, endPoint);\n  let lineDDA = new Line(beginPoint, endPoint);\n  lineDDA.drawLine();\n\n}\n\nfunction draw() {\n\n}\n\nclass Line {\n  constructor(beginPoint, endPoint) {\n    // 求Δx和Δy(差)\n    this.disX = endPoint.x - beginPoint.x;\n    this.disY = endPoint.y - beginPoint.y;\n    // 初始点\n    this.x = beginPoint.x;\n    this.y = beginPoint.y;\n  }\n  // 最大差值\n  getMaxSteps() {\n    return (this.disX >= this.disY) ? this.disX : this.disY; \n  }\n  // 每次x像素移动长度\n  getStepX() {\n    return this.disX / this.getMaxSteps();\n  }\n  // 每次y像素移动长度\n  getStepY() {\n    return this.disY / this.getMaxSteps();\n  }\n\n  drawLine() {\n    // 画初始点\n    point(this.x, this.y);\n    // 循环画点\n    for(let i = 1; i <= this.getMaxSteps(); i++) {\n      this.x = this.x + this.getStepX();\n      this.y = this.y + this.getStepY();\n      point(Math.round(this.x), Math.round(this.y));\n    }\n  }\n}\n```\n\n## Bresenham算法\n\n`0<k<1`情况下\n\n### Bresenham算法原理\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula.jpg\" height=\"50px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula2.jpg\" height=\"80px\">\n\nd的递推式：\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula3.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula4.jpg\" height=\"200px\">\n\nBresenham算法是对DDA算法的一种改进，避免了取整这一步。算法是通过判别式d的正负来判断直线与坐标轴相交的地方是在中点的上方还是下方（或者左侧还是右侧，根据斜率来判断选择哪一种方式）。倘若在`0<k<1`的情况下，得出d的值为负，则说明交点在中点上方，此时纵轴步长+1，否则纵轴步长+0。\n\n\n### Bresenham算法实现步骤\n\n0≤k≤1时\n\n1. 确定直线的两端点\n2. 计算初始值△x、△y、d=0.5-k、x=x0、y=y0\n3. 绘制初始点点(x,y)。判断d的符号,若d<0，则(x,y)更新为(x+1,y+1)，d更新为d+1-k,否则(x,y)更新为(x+1,y)，d更新为d-k\n4. 重复步骤3\n\n\n### 代码实现\n\n只有js部分的class部分内容有所改变，其它的都和DDA算法一样，固不再重复列举\n\n#### 效果图\n\n左侧是算法实现，右侧是函数实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-img.jpg\" height=\"200px\">\n\n#### JS\n\n```js\nclass Line {\n  constructor(beginPoint, endPoint) {\n    // 求Δx和Δy(差)\n    this.disX = endPoint.x - beginPoint.x;\n    this.disY = endPoint.y - beginPoint.y;\n    //斜率\n    this.k = this.disY / this.disX;    \n    // 初始判别式\n    this.d = 0.5 - this.k;\n    // 初始点\n    this.x = beginPoint.x;\n    this.y = beginPoint.y;\n  }\n\n  // 最大差值\n  getMaxSteps() {\n    return (this.disX >= this.disY) ? this.disX : this.disY; \n  }\n\n  drawLine() {\n    // 画初始点\n    point(this.x, this.y);\n    // (k >= 0 ) && (k <= 1) 情况下\n    if(this.disX >= this.disY) {\n      // 循环画点\n      for(let i = 1; i <= this.getMaxSteps(); i++) {\n        if(this.d < 0) {\n          this.x = this.x + 1;\n          this.y = this.y + 1;\n          this.d = this.d + 1 - this.k;\n        } else {\n          this.x = this.x + 1;\n          this.y = this.y;\n          this.d = this.d - this.k;\n        }\n        point(this.x, this.y);\n      }\n    } \n  }\n}\n```\n\n## 总结\n\n这次的实现算是对第一次上图形学课的一点总结，也勉强算是初入图形学的一次入门级的实现吧。","source":"_posts/20. DDA算法和Bresenham算法画线.md","raw":"---\ntitle: DDA算法和Bresenham算法画线\ndate: 2018-09-10 22:58:23\ntoc: true\ncategories:\n- 图形学\ntags:\n- P5JS\n- 图形学\n---\n\n最近正在看P5.js这个库，这个库可以说是Processing的JS版。这个库有一套作画功能，不仅仅能在canvas上画，还能把整个浏览器都当成画布。然后对前端数据可视化方向有一些兴趣，再加上开的一门课叫计算机图形学。多者结合，才有了这样一篇文章的整理。\n\n<!--more-->\n\n## DDA算法\n\n### DDA算法原理\n\nDDA算法，是一种通过多个点连成一条近似直线的算法。众所周知，一个图像的显示是由无数个像素点构成的。那么，直线也不例外，也可以看成是无数个点的集合。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-formula.png\" height=\"200px\">\n\nDDA算法即选出Δx和Δy中较大者作为最大步长，然后分别与Δx和Δy相乘得出每个方向上的单步步长，将第二个点的坐标算出来后，四舍五入近似成+0或+1。\n举个例子，根据上述公式可以看出，假若斜率小于1，每次x单步步长必为+1，此时只考虑y步长，算出y步长后加在上一个点上，然后使用函数进行近似，即可得出点的近似位置\n\n### DDA算法实现步骤\n\n1. 给出两点坐标\n2. 选出Δx和Δy中较大者作为最大步长\n3. 算出x轴和y轴的单步步长\n4. 循环画点\n\n### 代码实现\n\n#### 效果图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-img.jpg\" height=\"200px\">\n\n整体看似乎没有什么区别，那么放大看一下\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-res.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-origin.jpg\" height=\"200px\">\n\n放大看还是能看出比较明显的像素点的，反观`line()`函数画出的直线则几乎没有锯齿，目前还不清楚`line()`函数是如何实现的。\n\n#### HTML\n\n```HTML\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DDA算法绘制直线</title>\n    <style> body {padding: 0; margin: 0;} </style>\n    <script src=\"../p5/p5.min.js\"></script>\n    <script src=\"../p5/addons/p5.dom.min.js\"></script>\n    <script src=\"../p5/addons/p5.sound.min.js\"></script>\n    <script src=\"./sketch.js\"></script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n#### JS\n\n```js\n// sketch.js\nfunction setup() {\n  /* \n    原来对比直线\n    (600,100) 到 (1050,400)\n  */\n  let o1 = {\n    x: 600,\n    y: 100\n  }\n  let o2 = {\n    x: 1050,\n    y: 400\n  }\n  \n  /* \n    新画直线\n    (50,100) 到 (500, 400)\n  */\n  let beginPoint = {\n    x: 50,\n    y: 100\n  };\n  let endPoint = {\n    x: 500,\n    y: 400\n  };\n\n\n  createCanvas(1200, 600);\n  background(0);\n  \n  stroke(255);\n  line(o1.x, o1.y, o2.x, o2.y);\n  \n  // drawLine(beginPoint, endPoint);\n  let lineDDA = new Line(beginPoint, endPoint);\n  lineDDA.drawLine();\n\n}\n\nfunction draw() {\n\n}\n\nclass Line {\n  constructor(beginPoint, endPoint) {\n    // 求Δx和Δy(差)\n    this.disX = endPoint.x - beginPoint.x;\n    this.disY = endPoint.y - beginPoint.y;\n    // 初始点\n    this.x = beginPoint.x;\n    this.y = beginPoint.y;\n  }\n  // 最大差值\n  getMaxSteps() {\n    return (this.disX >= this.disY) ? this.disX : this.disY; \n  }\n  // 每次x像素移动长度\n  getStepX() {\n    return this.disX / this.getMaxSteps();\n  }\n  // 每次y像素移动长度\n  getStepY() {\n    return this.disY / this.getMaxSteps();\n  }\n\n  drawLine() {\n    // 画初始点\n    point(this.x, this.y);\n    // 循环画点\n    for(let i = 1; i <= this.getMaxSteps(); i++) {\n      this.x = this.x + this.getStepX();\n      this.y = this.y + this.getStepY();\n      point(Math.round(this.x), Math.round(this.y));\n    }\n  }\n}\n```\n\n## Bresenham算法\n\n`0<k<1`情况下\n\n### Bresenham算法原理\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula.jpg\" height=\"50px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula2.jpg\" height=\"80px\">\n\nd的递推式：\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula3.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula4.jpg\" height=\"200px\">\n\nBresenham算法是对DDA算法的一种改进，避免了取整这一步。算法是通过判别式d的正负来判断直线与坐标轴相交的地方是在中点的上方还是下方（或者左侧还是右侧，根据斜率来判断选择哪一种方式）。倘若在`0<k<1`的情况下，得出d的值为负，则说明交点在中点上方，此时纵轴步长+1，否则纵轴步长+0。\n\n\n### Bresenham算法实现步骤\n\n0≤k≤1时\n\n1. 确定直线的两端点\n2. 计算初始值△x、△y、d=0.5-k、x=x0、y=y0\n3. 绘制初始点点(x,y)。判断d的符号,若d<0，则(x,y)更新为(x+1,y+1)，d更新为d+1-k,否则(x,y)更新为(x+1,y)，d更新为d-k\n4. 重复步骤3\n\n\n### 代码实现\n\n只有js部分的class部分内容有所改变，其它的都和DDA算法一样，固不再重复列举\n\n#### 效果图\n\n左侧是算法实现，右侧是函数实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-img.jpg\" height=\"200px\">\n\n#### JS\n\n```js\nclass Line {\n  constructor(beginPoint, endPoint) {\n    // 求Δx和Δy(差)\n    this.disX = endPoint.x - beginPoint.x;\n    this.disY = endPoint.y - beginPoint.y;\n    //斜率\n    this.k = this.disY / this.disX;    \n    // 初始判别式\n    this.d = 0.5 - this.k;\n    // 初始点\n    this.x = beginPoint.x;\n    this.y = beginPoint.y;\n  }\n\n  // 最大差值\n  getMaxSteps() {\n    return (this.disX >= this.disY) ? this.disX : this.disY; \n  }\n\n  drawLine() {\n    // 画初始点\n    point(this.x, this.y);\n    // (k >= 0 ) && (k <= 1) 情况下\n    if(this.disX >= this.disY) {\n      // 循环画点\n      for(let i = 1; i <= this.getMaxSteps(); i++) {\n        if(this.d < 0) {\n          this.x = this.x + 1;\n          this.y = this.y + 1;\n          this.d = this.d + 1 - this.k;\n        } else {\n          this.x = this.x + 1;\n          this.y = this.y;\n          this.d = this.d - this.k;\n        }\n        point(this.x, this.y);\n      }\n    } \n  }\n}\n```\n\n## 总结\n\n这次的实现算是对第一次上图形学课的一点总结，也勉强算是初入图形学的一次入门级的实现吧。","slug":"20. DDA算法和Bresenham算法画线","published":1,"updated":"2021-09-30T06:46:59.542Z","_id":"cku41le8o000nidp2ae7f7g2l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近正在看P5.js这个库，这个库可以说是Processing的JS版。这个库有一套作画功能，不仅仅能在canvas上画，还能把整个浏览器都当成画布。然后对前端数据可视化方向有一些兴趣，再加上开的一门课叫计算机图形学。多者结合，才有了这样一篇文章的整理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"DDA算法\"><a href=\"#DDA算法\" class=\"headerlink\" title=\"DDA算法\"></a>DDA算法</h2><h3 id=\"DDA算法原理\"><a href=\"#DDA算法原理\" class=\"headerlink\" title=\"DDA算法原理\"></a>DDA算法原理</h3><p>DDA算法，是一种通过多个点连成一条近似直线的算法。众所周知，一个图像的显示是由无数个像素点构成的。那么，直线也不例外，也可以看成是无数个点的集合。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-formula.png\" height=\"200px\">\n\n<p>DDA算法即选出Δx和Δy中较大者作为最大步长，然后分别与Δx和Δy相乘得出每个方向上的单步步长，将第二个点的坐标算出来后，四舍五入近似成+0或+1。<br>举个例子，根据上述公式可以看出，假若斜率小于1，每次x单步步长必为+1，此时只考虑y步长，算出y步长后加在上一个点上，然后使用函数进行近似，即可得出点的近似位置</p>\n<h3 id=\"DDA算法实现步骤\"><a href=\"#DDA算法实现步骤\" class=\"headerlink\" title=\"DDA算法实现步骤\"></a>DDA算法实现步骤</h3><ol>\n<li>给出两点坐标</li>\n<li>选出Δx和Δy中较大者作为最大步长</li>\n<li>算出x轴和y轴的单步步长</li>\n<li>循环画点</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-img.jpg\" height=\"200px\">\n\n<p>整体看似乎没有什么区别，那么放大看一下</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-res.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-origin.jpg\" height=\"200px\">\n\n<p>放大看还是能看出比较明显的像素点的，反观<code>line()</code>函数画出的直线则几乎没有锯齿，目前还不清楚<code>line()</code>函数是如何实现的。</p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DDA算法绘制直线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"> <span class=\"selector-tag\">body</span> &#123;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;&#125; </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/p5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/addons/p5.dom.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/addons/p5.sound.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sketch.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sketch.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setup</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    原来对比直线</span></span><br><span class=\"line\"><span class=\"comment\">    (600,100) 到 (1050,400)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> o2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">1050</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">400</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    新画直线</span></span><br><span class=\"line\"><span class=\"comment\">    (50,100) 到 (500, 400)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> beginPoint = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> endPoint = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">400</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  createCanvas(<span class=\"number\">1200</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">  background(<span class=\"number\">0</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  stroke(<span class=\"number\">255</span>);</span><br><span class=\"line\">  line(o1.x, o1.y, o2.x, o2.y);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// drawLine(beginPoint, endPoint);</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineDDA = <span class=\"keyword\">new</span> Line(beginPoint, endPoint);</span><br><span class=\"line\">  lineDDA.drawLine();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">beginPoint, endPoint</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 求Δx和Δy(差)</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disX = endPoint.x - beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disY = endPoint.y - beginPoint.y;</span><br><span class=\"line\">    <span class=\"comment\">// 初始点</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = beginPoint.y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最大差值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getMaxSteps</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) ? <span class=\"built_in\">this</span>.disX : <span class=\"built_in\">this</span>.disY; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 每次x像素移动长度</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStepX</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.disX / <span class=\"built_in\">this</span>.getMaxSteps();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 每次y像素移动长度</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStepY</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.disY / <span class=\"built_in\">this</span>.getMaxSteps();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">drawLine</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 画初始点</span></span><br><span class=\"line\">    point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">    <span class=\"comment\">// 循环画点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.getMaxSteps(); i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"built_in\">this</span>.getStepX();</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y + <span class=\"built_in\">this</span>.getStepY();</span><br><span class=\"line\">      point(<span class=\"built_in\">Math</span>.round(<span class=\"built_in\">this</span>.x), <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">this</span>.y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bresenham算法\"><a href=\"#Bresenham算法\" class=\"headerlink\" title=\"Bresenham算法\"></a>Bresenham算法</h2><p><code>0&lt;k&lt;1</code>情况下</p>\n<h3 id=\"Bresenham算法原理\"><a href=\"#Bresenham算法原理\" class=\"headerlink\" title=\"Bresenham算法原理\"></a>Bresenham算法原理</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula.jpg\" height=\"50px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula2.jpg\" height=\"80px\">\n\n<p>d的递推式：</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula3.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula4.jpg\" height=\"200px\">\n\n<p>Bresenham算法是对DDA算法的一种改进，避免了取整这一步。算法是通过判别式d的正负来判断直线与坐标轴相交的地方是在中点的上方还是下方（或者左侧还是右侧，根据斜率来判断选择哪一种方式）。倘若在<code>0&lt;k&lt;1</code>的情况下，得出d的值为负，则说明交点在中点上方，此时纵轴步长+1，否则纵轴步长+0。</p>\n<h3 id=\"Bresenham算法实现步骤\"><a href=\"#Bresenham算法实现步骤\" class=\"headerlink\" title=\"Bresenham算法实现步骤\"></a>Bresenham算法实现步骤</h3><p>0≤k≤1时</p>\n<ol>\n<li>确定直线的两端点</li>\n<li>计算初始值△x、△y、d=0.5-k、x=x0、y=y0</li>\n<li>绘制初始点点(x,y)。判断d的符号,若d&lt;0，则(x,y)更新为(x+1,y+1)，d更新为d+1-k,否则(x,y)更新为(x+1,y)，d更新为d-k</li>\n<li>重复步骤3</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>只有js部分的class部分内容有所改变，其它的都和DDA算法一样，固不再重复列举</p>\n<h4 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p>左侧是算法实现，右侧是函数实现</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-img.jpg\" height=\"200px\">\n\n<h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">beginPoint, endPoint</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 求Δx和Δy(差)</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disX = endPoint.x - beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disY = endPoint.y - beginPoint.y;</span><br><span class=\"line\">    <span class=\"comment\">//斜率</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.k = <span class=\"built_in\">this</span>.disY / <span class=\"built_in\">this</span>.disX;    </span><br><span class=\"line\">    <span class=\"comment\">// 初始判别式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.d = <span class=\"number\">0.5</span> - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">    <span class=\"comment\">// 初始点</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = beginPoint.y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最大差值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getMaxSteps</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) ? <span class=\"built_in\">this</span>.disX : <span class=\"built_in\">this</span>.disY; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">drawLine</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 画初始点</span></span><br><span class=\"line\">    point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">    <span class=\"comment\">// (k &gt;= 0 ) &amp;&amp; (k &lt;= 1) 情况下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 循环画点</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.getMaxSteps(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.d &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.d = <span class=\"built_in\">this</span>.d + <span class=\"number\">1</span> - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.d = <span class=\"built_in\">this</span>.d - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次的实现算是对第一次上图形学课的一点总结，也勉强算是初入图形学的一次入门级的实现吧。</p>\n","site":{"data":{}},"excerpt":"<p>最近正在看P5.js这个库，这个库可以说是Processing的JS版。这个库有一套作画功能，不仅仅能在canvas上画，还能把整个浏览器都当成画布。然后对前端数据可视化方向有一些兴趣，再加上开的一门课叫计算机图形学。多者结合，才有了这样一篇文章的整理。</p>","more":"<h2 id=\"DDA算法\"><a href=\"#DDA算法\" class=\"headerlink\" title=\"DDA算法\"></a>DDA算法</h2><h3 id=\"DDA算法原理\"><a href=\"#DDA算法原理\" class=\"headerlink\" title=\"DDA算法原理\"></a>DDA算法原理</h3><p>DDA算法，是一种通过多个点连成一条近似直线的算法。众所周知，一个图像的显示是由无数个像素点构成的。那么，直线也不例外，也可以看成是无数个点的集合。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-formula.png\" height=\"200px\">\n\n<p>DDA算法即选出Δx和Δy中较大者作为最大步长，然后分别与Δx和Δy相乘得出每个方向上的单步步长，将第二个点的坐标算出来后，四舍五入近似成+0或+1。<br>举个例子，根据上述公式可以看出，假若斜率小于1，每次x单步步长必为+1，此时只考虑y步长，算出y步长后加在上一个点上，然后使用函数进行近似，即可得出点的近似位置</p>\n<h3 id=\"DDA算法实现步骤\"><a href=\"#DDA算法实现步骤\" class=\"headerlink\" title=\"DDA算法实现步骤\"></a>DDA算法实现步骤</h3><ol>\n<li>给出两点坐标</li>\n<li>选出Δx和Δy中较大者作为最大步长</li>\n<li>算出x轴和y轴的单步步长</li>\n<li>循环画点</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-img.jpg\" height=\"200px\">\n\n<p>整体看似乎没有什么区别，那么放大看一下</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-res.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/DDA-origin.jpg\" height=\"200px\">\n\n<p>放大看还是能看出比较明显的像素点的，反观<code>line()</code>函数画出的直线则几乎没有锯齿，目前还不清楚<code>line()</code>函数是如何实现的。</p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DDA算法绘制直线<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"> <span class=\"selector-tag\">body</span> &#123;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;&#125; </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/p5.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/addons/p5.dom.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../p5/addons/p5.sound.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sketch.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sketch.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setup</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    原来对比直线</span></span><br><span class=\"line\"><span class=\"comment\">    (600,100) 到 (1050,400)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> o2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">1050</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">400</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    新画直线</span></span><br><span class=\"line\"><span class=\"comment\">    (50,100) 到 (500, 400)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> beginPoint = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> endPoint = &#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">400</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  createCanvas(<span class=\"number\">1200</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">  background(<span class=\"number\">0</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  stroke(<span class=\"number\">255</span>);</span><br><span class=\"line\">  line(o1.x, o1.y, o2.x, o2.y);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// drawLine(beginPoint, endPoint);</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineDDA = <span class=\"keyword\">new</span> Line(beginPoint, endPoint);</span><br><span class=\"line\">  lineDDA.drawLine();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">beginPoint, endPoint</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 求Δx和Δy(差)</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disX = endPoint.x - beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disY = endPoint.y - beginPoint.y;</span><br><span class=\"line\">    <span class=\"comment\">// 初始点</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = beginPoint.y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 最大差值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getMaxSteps</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) ? <span class=\"built_in\">this</span>.disX : <span class=\"built_in\">this</span>.disY; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 每次x像素移动长度</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStepX</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.disX / <span class=\"built_in\">this</span>.getMaxSteps();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 每次y像素移动长度</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStepY</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.disY / <span class=\"built_in\">this</span>.getMaxSteps();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">drawLine</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 画初始点</span></span><br><span class=\"line\">    point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">    <span class=\"comment\">// 循环画点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.getMaxSteps(); i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"built_in\">this</span>.getStepX();</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y + <span class=\"built_in\">this</span>.getStepY();</span><br><span class=\"line\">      point(<span class=\"built_in\">Math</span>.round(<span class=\"built_in\">this</span>.x), <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">this</span>.y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bresenham算法\"><a href=\"#Bresenham算法\" class=\"headerlink\" title=\"Bresenham算法\"></a>Bresenham算法</h2><p><code>0&lt;k&lt;1</code>情况下</p>\n<h3 id=\"Bresenham算法原理\"><a href=\"#Bresenham算法原理\" class=\"headerlink\" title=\"Bresenham算法原理\"></a>Bresenham算法原理</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula.jpg\" height=\"50px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula2.jpg\" height=\"80px\">\n\n<p>d的递推式：</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula3.jpg\" height=\"200px\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-formula4.jpg\" height=\"200px\">\n\n<p>Bresenham算法是对DDA算法的一种改进，避免了取整这一步。算法是通过判别式d的正负来判断直线与坐标轴相交的地方是在中点的上方还是下方（或者左侧还是右侧，根据斜率来判断选择哪一种方式）。倘若在<code>0&lt;k&lt;1</code>的情况下，得出d的值为负，则说明交点在中点上方，此时纵轴步长+1，否则纵轴步长+0。</p>\n<h3 id=\"Bresenham算法实现步骤\"><a href=\"#Bresenham算法实现步骤\" class=\"headerlink\" title=\"Bresenham算法实现步骤\"></a>Bresenham算法实现步骤</h3><p>0≤k≤1时</p>\n<ol>\n<li>确定直线的两端点</li>\n<li>计算初始值△x、△y、d=0.5-k、x=x0、y=y0</li>\n<li>绘制初始点点(x,y)。判断d的符号,若d&lt;0，则(x,y)更新为(x+1,y+1)，d更新为d+1-k,否则(x,y)更新为(x+1,y)，d更新为d-k</li>\n<li>重复步骤3</li>\n</ol>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>只有js部分的class部分内容有所改变，其它的都和DDA算法一样，固不再重复列举</p>\n<h4 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p>左侧是算法实现，右侧是函数实现</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-10/Bre-img.jpg\" height=\"200px\">\n\n<h4 id=\"JS-1\"><a href=\"#JS-1\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">beginPoint, endPoint</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 求Δx和Δy(差)</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disX = endPoint.x - beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.disY = endPoint.y - beginPoint.y;</span><br><span class=\"line\">    <span class=\"comment\">//斜率</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.k = <span class=\"built_in\">this</span>.disY / <span class=\"built_in\">this</span>.disX;    </span><br><span class=\"line\">    <span class=\"comment\">// 初始判别式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.d = <span class=\"number\">0.5</span> - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">    <span class=\"comment\">// 初始点</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = beginPoint.x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = beginPoint.y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最大差值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getMaxSteps</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) ? <span class=\"built_in\">this</span>.disX : <span class=\"built_in\">this</span>.disY; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">drawLine</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 画初始点</span></span><br><span class=\"line\">    point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">    <span class=\"comment\">// (k &gt;= 0 ) &amp;&amp; (k &lt;= 1) 情况下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.disX &gt;= <span class=\"built_in\">this</span>.disY) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 循环画点</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">this</span>.getMaxSteps(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.d &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.d = <span class=\"built_in\">this</span>.d + <span class=\"number\">1</span> - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.x = <span class=\"built_in\">this</span>.x + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.y = <span class=\"built_in\">this</span>.y;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.d = <span class=\"built_in\">this</span>.d - <span class=\"built_in\">this</span>.k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        point(<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次的实现算是对第一次上图形学课的一点总结，也勉强算是初入图形学的一次入门级的实现吧。</p>"},{"title":"CSS绘制三道杠和小圆点","date":"2018-09-18T11:23:38.000Z","toc":true,"_content":"\n本文依然是对CSS世界中的小技巧的整理。看CSS世界的过程中，确实收获良多，有很多让人眼前一亮的小技巧。本文就将整理纯CSS实现移动导航中经常使用的三道杠，以及双层圆点的效果。无需加载图片实现。\n\n<!--more-->\n\n## 三道杠\n\n### border双线边框实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/border-double.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分只有单层\n\n```HTML\n<div class=\"icon-menu-border\"></div>\n```\n\n#### CSS\n\n```CSS\n/* border 双线边框实现 */\n.icon-menu-border {\n  display: inline-block;\n  width: 120px;\n  height: 20px;\n  border-top: 60px double;\n  border-bottom: 20px solid;\n}\n```\n\n* `border-style: double`属性是双线边框（至少3px才会生效），双线的宽度以及两条线之间的间距的分配是：双线宽度相等，中间间隔±1px\n\n* 宽度和高度是指定的中间和下面两条线之间的位置，下方是单线边框，上方是双线边框\n\n* border颜色默认是当前color的颜色\n\n### padding和background-clip共同实现 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/clip.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分只有单层\n\n```HTML\n<div class=\"icon-menu-padding\"></div>\n```\n\n#### CSS\n\n```CSS\n/* padding和background-clip共同实现 */\n.icon-menu-padding {\n  display: inline-block;\n  width: 140px;\n  height: 10px;\n  padding: 35px 0;\n  border-top: 10px solid;\n  border-bottom: 10px solid;\n  background-color: currentColor;\n  background-clip: content-box;\n}\n```\n\n* `background-clip`设置元素背景区域，有三个参数`border-box`（默认）:背景延伸到边框外沿（但是在边框之下）。`padding-box`:边框下面没有背景，即背景延伸到内边距外沿。 `content-box`:背景裁剪到内容区 (content-box) 外沿\n\n* 宽高定在中间位置，上下padding，外层边框，通过`background-clip`属性将背景颜色区域限制在内容区，而padding区没有颜色\n\n* `currentColor`属性表示当前标签所继承的文字颜色，其中有一些妙用，比如说张鑫旭博客里面的背景色镂空效果\n\n\n### :before和:after伪类实现\n\n这个是我在书上看到说可以通过伪类实现三道杠效果，但是并没有给出实例，我就自己想了一下，写了一个，未必是最佳写法。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/before-after.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分最外层是用来指定一个选区大小，否则选区只是middle该区域的大小\n\n```HTML\n<div class=\"icon-menu-demo\">\n  <div class=\"middle\"></div>\n</div>\n```\n\n### CSS\n\n```CSS\n/* :before和:after伪类实现 */\n.icon-menu-demo {\n  position: relative;\n  display: inline-block;\n  width: 120px;\n  height: 100px;\n  cursor: pointer;\n}\n\n.middle {\n  width: 120px;\n  height: 20px;\n  background-color: currentColor;\n}\n\n.middle:before {\n  position: absolute;\n  top: 40px;\n  width: 120px;\n  height: 20px;\n  content: \".\";\n  color: currentColor;\n  background-color: currentColor;\n}\n\n.middle:after {\n  position: absolute;\n  top: 80px;\n  width: 120px;\n  height: 20px;\n  content: \".\";\n  color: currentColor;\n  background-color: currentColor;\n}\n```\n\n* `middle`位置在最上面，`:before`在中间，`:after`在最下面，原因是为了便于外层包裹的div确定区域\n\n* `color`和`background-color`颜色要相同，将伪类的文字内容隐藏\n\n## 小圆点\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/circle.jpg\" height=\"100px\">\n\n#### HTML\n\n```HTML\n<div class=\"icon-dot\"></div> \n```\n\n#### CSS\n\n```CSS\n.icon-dot {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 10px solid;\n  border-radius: 50%;\n  background-color: currentColor;\n  background-clip: content-box;\n}\n```\n\n* 和上面的padding和background-clip实现三道杠效果原理相同，不再赘述\n\n## 总结\n\n可以看出来，我自己想出来的伪类实现三道杠和其它两种方法比起来繁琐了许多。总之，看了CSS世界这本书，确实收益颇多，后面也会抽空整理一下书中的其它一些小的技巧，巩固所学。相比于加载图片，这种方法确实优秀了许多。","source":"_posts/21. CSS绘制三道杠和小圆点.md","raw":"---\ntitle: CSS绘制三道杠和小圆点\ndate: 2018-09-18 19:23:38\ntoc: true\ncategories:\n- 前端\ntags:\n- CSS\n---\n\n本文依然是对CSS世界中的小技巧的整理。看CSS世界的过程中，确实收获良多，有很多让人眼前一亮的小技巧。本文就将整理纯CSS实现移动导航中经常使用的三道杠，以及双层圆点的效果。无需加载图片实现。\n\n<!--more-->\n\n## 三道杠\n\n### border双线边框实现\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/border-double.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分只有单层\n\n```HTML\n<div class=\"icon-menu-border\"></div>\n```\n\n#### CSS\n\n```CSS\n/* border 双线边框实现 */\n.icon-menu-border {\n  display: inline-block;\n  width: 120px;\n  height: 20px;\n  border-top: 60px double;\n  border-bottom: 20px solid;\n}\n```\n\n* `border-style: double`属性是双线边框（至少3px才会生效），双线的宽度以及两条线之间的间距的分配是：双线宽度相等，中间间隔±1px\n\n* 宽度和高度是指定的中间和下面两条线之间的位置，下方是单线边框，上方是双线边框\n\n* border颜色默认是当前color的颜色\n\n### padding和background-clip共同实现 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/clip.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分只有单层\n\n```HTML\n<div class=\"icon-menu-padding\"></div>\n```\n\n#### CSS\n\n```CSS\n/* padding和background-clip共同实现 */\n.icon-menu-padding {\n  display: inline-block;\n  width: 140px;\n  height: 10px;\n  padding: 35px 0;\n  border-top: 10px solid;\n  border-bottom: 10px solid;\n  background-color: currentColor;\n  background-clip: content-box;\n}\n```\n\n* `background-clip`设置元素背景区域，有三个参数`border-box`（默认）:背景延伸到边框外沿（但是在边框之下）。`padding-box`:边框下面没有背景，即背景延伸到内边距外沿。 `content-box`:背景裁剪到内容区 (content-box) 外沿\n\n* 宽高定在中间位置，上下padding，外层边框，通过`background-clip`属性将背景颜色区域限制在内容区，而padding区没有颜色\n\n* `currentColor`属性表示当前标签所继承的文字颜色，其中有一些妙用，比如说张鑫旭博客里面的背景色镂空效果\n\n\n### :before和:after伪类实现\n\n这个是我在书上看到说可以通过伪类实现三道杠效果，但是并没有给出实例，我就自己想了一下，写了一个，未必是最佳写法。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/before-after.jpg\" height=\"100px\">\n\n#### HTML\n\nHTML部分最外层是用来指定一个选区大小，否则选区只是middle该区域的大小\n\n```HTML\n<div class=\"icon-menu-demo\">\n  <div class=\"middle\"></div>\n</div>\n```\n\n### CSS\n\n```CSS\n/* :before和:after伪类实现 */\n.icon-menu-demo {\n  position: relative;\n  display: inline-block;\n  width: 120px;\n  height: 100px;\n  cursor: pointer;\n}\n\n.middle {\n  width: 120px;\n  height: 20px;\n  background-color: currentColor;\n}\n\n.middle:before {\n  position: absolute;\n  top: 40px;\n  width: 120px;\n  height: 20px;\n  content: \".\";\n  color: currentColor;\n  background-color: currentColor;\n}\n\n.middle:after {\n  position: absolute;\n  top: 80px;\n  width: 120px;\n  height: 20px;\n  content: \".\";\n  color: currentColor;\n  background-color: currentColor;\n}\n```\n\n* `middle`位置在最上面，`:before`在中间，`:after`在最下面，原因是为了便于外层包裹的div确定区域\n\n* `color`和`background-color`颜色要相同，将伪类的文字内容隐藏\n\n## 小圆点\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/circle.jpg\" height=\"100px\">\n\n#### HTML\n\n```HTML\n<div class=\"icon-dot\"></div> \n```\n\n#### CSS\n\n```CSS\n.icon-dot {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 10px solid;\n  border-radius: 50%;\n  background-color: currentColor;\n  background-clip: content-box;\n}\n```\n\n* 和上面的padding和background-clip实现三道杠效果原理相同，不再赘述\n\n## 总结\n\n可以看出来，我自己想出来的伪类实现三道杠和其它两种方法比起来繁琐了许多。总之，看了CSS世界这本书，确实收益颇多，后面也会抽空整理一下书中的其它一些小的技巧，巩固所学。相比于加载图片，这种方法确实优秀了许多。","slug":"21. CSS绘制三道杠和小圆点","published":1,"updated":"2021-09-30T06:47:02.879Z","_id":"cku41le8p000pidp2gkl7g67g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文依然是对CSS世界中的小技巧的整理。看CSS世界的过程中，确实收获良多，有很多让人眼前一亮的小技巧。本文就将整理纯CSS实现移动导航中经常使用的三道杠，以及双层圆点的效果。无需加载图片实现。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"三道杠\"><a href=\"#三道杠\" class=\"headerlink\" title=\"三道杠\"></a>三道杠</h2><h3 id=\"border双线边框实现\"><a href=\"#border双线边框实现\" class=\"headerlink\" title=\"border双线边框实现\"></a>border双线边框实现</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/border-double.jpg\" height=\"100px\">\n\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分只有单层</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-border&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* border 双线边框实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-border</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">60px</span> double;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>border-style: double</code>属性是双线边框（至少3px才会生效），双线的宽度以及两条线之间的间距的分配是：双线宽度相等，中间间隔±1px</p>\n</li>\n<li><p>宽度和高度是指定的中间和下面两条线之间的位置，下方是单线边框，上方是双线边框</p>\n</li>\n<li><p>border颜色默认是当前color的颜色</p>\n</li>\n</ul>\n<h3 id=\"padding和background-clip共同实现\"><a href=\"#padding和background-clip共同实现\" class=\"headerlink\" title=\"padding和background-clip共同实现\"></a>padding和background-clip共同实现</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/clip.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分只有单层</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-padding&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* padding和background-clip共同实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-padding</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">35px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>background-clip</code>设置元素背景区域，有三个参数<code>border-box</code>（默认）:背景延伸到边框外沿（但是在边框之下）。<code>padding-box</code>:边框下面没有背景，即背景延伸到内边距外沿。 <code>content-box</code>:背景裁剪到内容区 (content-box) 外沿</p>\n</li>\n<li><p>宽高定在中间位置，上下padding，外层边框，通过<code>background-clip</code>属性将背景颜色区域限制在内容区，而padding区没有颜色</p>\n</li>\n<li><p><code>currentColor</code>属性表示当前标签所继承的文字颜色，其中有一些妙用，比如说张鑫旭博客里面的背景色镂空效果</p>\n</li>\n</ul>\n<h3 id=\"before和-after伪类实现\"><a href=\"#before和-after伪类实现\" class=\"headerlink\" title=\":before和:after伪类实现\"></a>:before和:after伪类实现</h3><p>这个是我在书上看到说可以通过伪类实现三道杠效果，但是并没有给出实例，我就自己想了一下，写了一个，未必是最佳写法。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/before-after.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分最外层是用来指定一个选区大小，否则选区只是middle该区域的大小</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-demo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS-2\"><a href=\"#CSS-2\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* :before和:after伪类实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>:before &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>:after &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>middle</code>位置在最上面，<code>:before</code>在中间，<code>:after</code>在最下面，原因是为了便于外层包裹的div确定区域</p>\n</li>\n<li><p><code>color</code>和<code>background-color</code>颜色要相同，将伪类的文字内容隐藏</p>\n</li>\n</ul>\n<h2 id=\"小圆点\"><a href=\"#小圆点\" class=\"headerlink\" title=\"小圆点\"></a>小圆点</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/circle.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-3\"><a href=\"#HTML-3\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-dot&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-3\"><a href=\"#CSS-3\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-dot</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>和上面的padding和background-clip实现三道杠效果原理相同，不再赘述</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可以看出来，我自己想出来的伪类实现三道杠和其它两种方法比起来繁琐了许多。总之，看了CSS世界这本书，确实收益颇多，后面也会抽空整理一下书中的其它一些小的技巧，巩固所学。相比于加载图片，这种方法确实优秀了许多。</p>\n","site":{"data":{}},"excerpt":"<p>本文依然是对CSS世界中的小技巧的整理。看CSS世界的过程中，确实收获良多，有很多让人眼前一亮的小技巧。本文就将整理纯CSS实现移动导航中经常使用的三道杠，以及双层圆点的效果。无需加载图片实现。</p>","more":"<h2 id=\"三道杠\"><a href=\"#三道杠\" class=\"headerlink\" title=\"三道杠\"></a>三道杠</h2><h3 id=\"border双线边框实现\"><a href=\"#border双线边框实现\" class=\"headerlink\" title=\"border双线边框实现\"></a>border双线边框实现</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/border-double.jpg\" height=\"100px\">\n\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分只有单层</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-border&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* border 双线边框实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-border</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">60px</span> double;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>border-style: double</code>属性是双线边框（至少3px才会生效），双线的宽度以及两条线之间的间距的分配是：双线宽度相等，中间间隔±1px</p>\n</li>\n<li><p>宽度和高度是指定的中间和下面两条线之间的位置，下方是单线边框，上方是双线边框</p>\n</li>\n<li><p>border颜色默认是当前color的颜色</p>\n</li>\n</ul>\n<h3 id=\"padding和background-clip共同实现\"><a href=\"#padding和background-clip共同实现\" class=\"headerlink\" title=\"padding和background-clip共同实现\"></a>padding和background-clip共同实现</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/clip.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分只有单层</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-padding&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* padding和background-clip共同实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-padding</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">35px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>background-clip</code>设置元素背景区域，有三个参数<code>border-box</code>（默认）:背景延伸到边框外沿（但是在边框之下）。<code>padding-box</code>:边框下面没有背景，即背景延伸到内边距外沿。 <code>content-box</code>:背景裁剪到内容区 (content-box) 外沿</p>\n</li>\n<li><p>宽高定在中间位置，上下padding，外层边框，通过<code>background-clip</code>属性将背景颜色区域限制在内容区，而padding区没有颜色</p>\n</li>\n<li><p><code>currentColor</code>属性表示当前标签所继承的文字颜色，其中有一些妙用，比如说张鑫旭博客里面的背景色镂空效果</p>\n</li>\n</ul>\n<h3 id=\"before和-after伪类实现\"><a href=\"#before和-after伪类实现\" class=\"headerlink\" title=\":before和:after伪类实现\"></a>:before和:after伪类实现</h3><p>这个是我在书上看到说可以通过伪类实现三道杠效果，但是并没有给出实例，我就自己想了一下，写了一个，未必是最佳写法。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/before-after.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>HTML部分最外层是用来指定一个选区大小，否则选区只是middle该区域的大小</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-menu-demo&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;middle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS-2\"><a href=\"#CSS-2\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* :before和:after伪类实现 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-menu-demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>:before &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.middle</span>:after &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>middle</code>位置在最上面，<code>:before</code>在中间，<code>:after</code>在最下面，原因是为了便于外层包裹的div确定区域</p>\n</li>\n<li><p><code>color</code>和<code>background-color</code>颜色要相同，将伪类的文字内容隐藏</p>\n</li>\n</ul>\n<h2 id=\"小圆点\"><a href=\"#小圆点\" class=\"headerlink\" title=\"小圆点\"></a>小圆点</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-9-18/circle.jpg\" height=\"100px\">\n\n<h4 id=\"HTML-3\"><a href=\"#HTML-3\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-dot&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-3\"><a href=\"#CSS-3\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.icon-dot</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: currentColor;</span><br><span class=\"line\">  <span class=\"attribute\">background-clip</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>和上面的padding和background-clip实现三道杠效果原理相同，不再赘述</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可以看出来，我自己想出来的伪类实现三道杠和其它两种方法比起来繁琐了许多。总之，看了CSS世界这本书，确实收益颇多，后面也会抽空整理一下书中的其它一些小的技巧，巩固所学。相比于加载图片，这种方法确实优秀了许多。</p>"},{"title":"内联元素的一些探究","date":"2019-01-19T05:53:59.000Z","toc":true,"_content":"\n本文依然是对《CSS世界》这本书中的一些知识点进行探究和实践。内联元素在CSS中极为重要，块级元素负责结构，内联元素负责内容，而CSS又是为图文展示而设计，因此显得尤为重要。同时多个属性混合在一起共同作用又会产生较为复杂的结果，比较典型的就是`line-height`和`vertical-align`，以及“幽灵空白”（CSS文档中叫strut）产生的一些现象了。\n\n文中也将从这三个方面去入手，实践一些现象产生的原因。\n\n<!--more-->\n\n## 幽灵空白\n\n“幽灵空白”这个概念并非没有意义，内联元素中产生的很多看似很难解释的现象其实很多都和这个“幽灵空白”息息相关。\n\n### 证明幽灵空白存在\n\n> line box starts with a zero-width inline box with the element's font and line height properties. We call that imaginary box a \"strut.\" \n\n上面是一段对strut的描述，书中将其称为幽灵空白，表现为看不见摸不着，但却真实存在，可以用一段代码证明其存在。\n\n```html\n<div>\n  <span></span>\n</div>\n```\n\ncss代码如下\n\n```css\ndiv {\n  background-color: #000000;\n}\n\nspan {\n  display: inline-block;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-1.jpg\">\n\n从上图可以看出来，其中并没有内容，内部的`span`宽高也都是0，但是`div`的高度却并不为0，而是20.8px，即可以认为`span`元素前面还有一个宽度为0的空白字符，那么都可以解释通了。\n\n> Line boxes that contain no text, no preserved white space, no inline elements with non-zero margins, padding, or borders, and no other in-flow content (such as images, inline blocks or inline tables), and do not end with a preserved newline must be treated as zero-height line boxes\n\n同样还要注意，这里`display`要指定为`inline-block`,否则按照上述文档的描述，高度会被视为0\n\n这里为什么是20.8px呢？根据我的理解，这里的20.8px即内容区域（content area），即内联盒模型中的一个不可见区域。根据《css世界》作者的理解与实践，可以将其理解为文本选中背景色区域。\n\n这里内容区域是由`font-family`和`font-size`共同决定的,可以做一个测试，比较设置`font-family: simsun`和不设置时的区别。（默认为微软雅黑）\n\n```css\ndiv {\n  background-color: #000000;\n  font-family: simsun;\n}\n```\n\n设置之后，高度变为18.4px\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-2.jpg\">\n\n即内容区域的高度和字体相关。当然这里还是有一个疑惑，设置宋体之后，内容区域应该和`em-box`相同，按照默认16px，高度应该是16px而非18.4px。这里暂未找到原因。\n\n## line-height\n\n`line-height`属性可以说是内联元素的基石\n\n### 决定非替换元素的高度\n\n决定高度要分成两部分来讲，对于替换元素和非替换元素来讲是不同的\n\n#### 非替换元素\n\n对于非替换元素（替换元素比如img）的内联元素来将，其高度是由`line-height`决定的。比如说一个`<div></div>`是高度为0，当写上几个字之后就有了高度，但是这里的高度并非由`font-size`决定，而是由`line-height`决定的。可以用代码测试一下。\n\n```html\n<div>\n  <div class=\"test1\">高度</div>\n</div>\n<div style=\"margin-top: 20px\">\n  <div class=\"test2\">高度</div>\n</div>\n```\n\ncss代码如下\n\n```css\n.test1 {\n  font-size: 16px;\n  line-height: 0;\n  border: 1px solid #ccc;\n  background-color: #eee;\n}\n\n.test2 {\n  font-size: 0;\n  line-height: 16px;\n  border: 1px solid #ccc;\n  background-color: #eee;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-1.jpg\">\n\n可以看到，上面`font-size`为16px的只有border撑起来的2px，而下面的`line-height`为16px的则是一共18px的高度。由此可以得出结论，内联元素的高度是由`line-height`来决定的。\n\n#### 替换元素\n\n对于替换元素来讲，比如说图片，设置其容器的`line-height`并不会影响到图片，但是由于图片为内联元素，前面也然会有一个幽灵空白，所以会造成容器被撑大的现象，但并未影响到图片。\n\n只有在非替换元素下，才能决定高度，在混合情况下，比如说图文混排时，则只能决定最小高度，不仅是替换元素不受`line-height`影响，同时也有`vertical-align`的影响。\n\n### 行距\n\n行距是内容排版上很重要的一点，但是由于平时开发中，也都是看着差不多就行了，并没有对其中的实现有所了解。这里也通过行距来进一步理解`line-height`在内联元素中重要的作用。\n\n行距在css里是分成上半部分和下半部分的，即第一行文字上面也是会有一半行距的。行距的计算公式即`行距 = 行高 - em-box`，简单讲就是`行距 = line-height - font-size`。\n\n这里要注意一点，内容区域和`em-box`不一样，内容区域受`font-family`和`font-size`共同决定的，而`em-box`只受`font-size`决定，所以你会发现，设置不同的字体，同样的`font-size`，按照公式计算的话行距是一样的，但是肉眼看到的行距似乎却并不一样。\n\n但是有一个字体例外，宋体的内容区域和`em-box`的区域是等同的。\n\n```html\n<div class=\"test\">\n  <span>sphinx</span>\n</div>\n```\n\ncss代码如下\n\n```css\n.test {\n  font-family: simsun;\n  font-size: 80px;\n  line-height: 120px;\n  background-color: yellow;\n}\n.test > span {\n  background-color: white;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-2.jpg\">\n\n行距即上下两边黄色的部分，这里可以做一个测试，将字体改为微软雅黑之后\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-3.jpg\">\n\n可以明显的看到，内容区域的高度并不一致。\n\n### 内联元素垂直居中\n\n#### 单行文字\n\n这里要纠正一个之前一直犯的错误，单行文字垂直居中只需要`line-height`即可，并不需要画蛇添足加一个`height`。\n\n举个例子，一个高度为50px的标题垂直居中\n\n```css\n.title{\n  /* height: 50px; */\n  line-height: 50px;\n  background: #000;\n  color: #fff;\n}\n```\n\n并不需要注释掉的那一行\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-4.jpg\">\n\n#### 多行文字或替换元素\n\n这里需要`line-height`和`vertical-align`共同作用\n\n```html\n<div class=\"box\">\n  <div class=\"content\">基于行高实现的多行文字垂直居中效果，垂直居中效果</div>\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  line-height: 120px;\n  background-color: #f0f3f9;\n  margin: auto;\n}\n.content {\n  display: inline-block;\n  line-height: 20px;\n  margin: 0 20px;\n  text-align: left;\n  vertical-align: middle;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-5.jpg\">\n\n这里需要解释一下原理\n* box里的width和margin共同作用外部容器水平居中\n* box里的line-height决定容器高度\n* content里的display很关键\n  1 这里重置了外部line-height大小，不能指定为block等块级元素，需要保持内联元素特性，因为需要使用vertical-align属性\n  2 同时产生行框盒子及幽灵空白。这里需要幽灵空白被box的line-height作用，撑开外部容器。\n* vertical-align: middle是为了调整对其方式，默认向基线对齐，需将其改成近似居中对齐\n\n### line-height的大值特性\n\n大值特性，其实内在原因同样是由于幽灵空白的作用。举个例子\n\n```html\n<div class=\"box box1\">\n  <span>span: line-height:30px</span>\n</div>\n<div class=\"box box2\">\n  <span>span: line-height:96px</span>\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  margin: 1em auto;\n  outline: 1px solid #beceeb;\n  background: #f0f3f9;\n}\n.box1 {\n  line-height: 96px;\n}\n.box1 span {\n  /* display: inline-block; */\n  background-color: #ddd;\n  line-height: 30px;\n}\n.box2 {\n  line-height: 30px;\n}\n.box2 span {\n  /* display: inline-block; */\n  background-color: #ddd;\n  line-height: 96px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-6.jpg\">\n\n可以看到box容器高度都是96px，那么解释一下原因，还是由于幽灵空白，`span`元素前面可以假设把它加上一个x匿名内联元素。\n\n加入是外部设置`line-height`为96px，那么则是作用到了x这个幽灵空白上，倘若是子元素设置了`line-height`，则是作用到了子元素的行框盒子上。整体行框盒子由最大的决定，因此还是96px。\n\n如果想避免幽灵空白的干扰，将上面注释掉的代码恢复，即设置`inline-block`创建一个独立的行框盒子，就能将里面的子元素不受干扰。同时满足大值特性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-7.jpg\">\n\n## vertical-align\n\n说到这个属性，就要提到基线，这也是很多现象产生的原因，比如说`vertical-align: middle`其实是近似垂直居中。\n\n而这近似垂直居中又导致了很多现象的出现，比如说很常见的一个布局，一行字加上一个下拉符号\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-2.jpg\">\n\n设置的都是20px大小，而且也使用了`vertical-align: middle`，但是最后的结果整个容器总是要大于20px，原因就和基线的定义有关了，如下图所示\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-1.jpg\">\n\n那么基线的定义就是字母x的下边缘，middle则是指基线往上1/2的x-height的位置，可以理解为x中间的那个交点。看似没有什么问题，但实际上问题就由此产生，每个字体在行内盒子的位置是不一样的，上面也比较了微软雅黑和宋体两个字体的差异，可以明显发现微软雅黑字体会下沉，那么也就导致了middle和实际的中线位置会往下偏一点。那么这个偏一点具体偏多少由`font-size`的大小决定，越大则下沉的效果越明显。所以实现真正意义上的居中是很困难的。\n\n拿一个作者博客的例子\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-7.jpg\">\n\n可以很明显的看到，确实如我上文所说，要想实现真正意义上的垂直居中，可以设置`font-size`为0，这样x就缩小为一个点，就能实现垂直居中效果，当然开发中并非一定要真正实现这种，一般情况下也看不出来\n\n### 单行文本高度不等于行高现象\n\n```html\n<div>\n  <span>123</span>\n</div>\n```\n\ncss代码如下\n\n```css\ndiv {\n  background-color: #000;\n  line-height: 32px;\n}\n\nspan {\n  color: #fff;\n  font-size: 24px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-3.jpg\">\n\n可以看到如图中所示，高度并不为32px，出现这一现象也是由于`vertical-align`以及幽灵空白作用的结果，理解这一现象本质，有助于理解内联元素。\n\n这似乎与上面行高决定非替换元素的高度这一观点相矛盾，其实并非如此，很多现象都是很多属性共同作用的结果。这里产生的原因就是子元素设置了`font-size`属性，导致和父元素字体大小不同，而内联元素又是和基线对齐，导致错位。\n\n我们可以在span前面加上一个x作为匿名内联盒子，在span里面加上一个x作为内联盒子\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-4.jpg\">\n\n可以看到，本来匿名内联盒子的x位置好好的，但是由于内联盒子字体太大了，导致为了基线对其，而将文字上移，就把父级容器撑开了，导致高度大于32px也就是这个原因。\n\n解决方案很简单，原因是`font-size`产生的，自然可以从字体大小上改动，指定父元素的`font-size`为24px与子元素相同，就能使高度为32px\n\n### 图片底部留有间隙现象\n\n这个现象可以说是从我刚开始学css起就遇到过了，结果之一也就不了了之了，只知如何解决，却不理解产生这种现象的原因。\n\n```html\n<div class=\"box\">\n　 <img src=\"1.png\">\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  outline: 1px solid #aaa;\n  text-align: center;\n}\n\n.box > img {\n  height: 96px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-5.jpg\">\n\n可以看到，按照代码来看，应该是容器被图片撑开，然后是96px才对，然而实际确实100px，产生间隙的原因很多情况下都是`line-height`，`vertical-align`，`幽灵空白`造成的，此处也不例外\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-6.jpg\">\n\n这里和前面一样加上x，并添加上背景色辅助观察。可以很明显地看到产生间隙的原因，内联元素中，图片的基线按照下边缘来决定。\n\n\n因此，图片下边缘和x下边缘对齐，那么下边的间隙就是半行距，没错，间隙就是半行距撑开的。既然知道了产生的原因，那么解决起来就很简单了，消除半行距即可。比如让父元素line-height足够小，另行距为0或者是负值，即可解决。当然，也可以直接消除幽灵空白，将图片块状化，幽灵空白就消失了。或者改变对齐方式也可以解决。\n\n## 总结\n\ncss看似简单但也确实是有很多值得去探讨的地方，理解内在的原理也许才能更好的设计出更加合理的布局。\n","source":"_posts/23. 内联元素的一些探究.md","raw":"---\ntitle: 内联元素的一些探究\ndate: 2019-01-19 13:53:59\ntoc: true\ncategories:\n- 前端\ntags:\n- CSS\n---\n\n本文依然是对《CSS世界》这本书中的一些知识点进行探究和实践。内联元素在CSS中极为重要，块级元素负责结构，内联元素负责内容，而CSS又是为图文展示而设计，因此显得尤为重要。同时多个属性混合在一起共同作用又会产生较为复杂的结果，比较典型的就是`line-height`和`vertical-align`，以及“幽灵空白”（CSS文档中叫strut）产生的一些现象了。\n\n文中也将从这三个方面去入手，实践一些现象产生的原因。\n\n<!--more-->\n\n## 幽灵空白\n\n“幽灵空白”这个概念并非没有意义，内联元素中产生的很多看似很难解释的现象其实很多都和这个“幽灵空白”息息相关。\n\n### 证明幽灵空白存在\n\n> line box starts with a zero-width inline box with the element's font and line height properties. We call that imaginary box a \"strut.\" \n\n上面是一段对strut的描述，书中将其称为幽灵空白，表现为看不见摸不着，但却真实存在，可以用一段代码证明其存在。\n\n```html\n<div>\n  <span></span>\n</div>\n```\n\ncss代码如下\n\n```css\ndiv {\n  background-color: #000000;\n}\n\nspan {\n  display: inline-block;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-1.jpg\">\n\n从上图可以看出来，其中并没有内容，内部的`span`宽高也都是0，但是`div`的高度却并不为0，而是20.8px，即可以认为`span`元素前面还有一个宽度为0的空白字符，那么都可以解释通了。\n\n> Line boxes that contain no text, no preserved white space, no inline elements with non-zero margins, padding, or borders, and no other in-flow content (such as images, inline blocks or inline tables), and do not end with a preserved newline must be treated as zero-height line boxes\n\n同样还要注意，这里`display`要指定为`inline-block`,否则按照上述文档的描述，高度会被视为0\n\n这里为什么是20.8px呢？根据我的理解，这里的20.8px即内容区域（content area），即内联盒模型中的一个不可见区域。根据《css世界》作者的理解与实践，可以将其理解为文本选中背景色区域。\n\n这里内容区域是由`font-family`和`font-size`共同决定的,可以做一个测试，比较设置`font-family: simsun`和不设置时的区别。（默认为微软雅黑）\n\n```css\ndiv {\n  background-color: #000000;\n  font-family: simsun;\n}\n```\n\n设置之后，高度变为18.4px\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-2.jpg\">\n\n即内容区域的高度和字体相关。当然这里还是有一个疑惑，设置宋体之后，内容区域应该和`em-box`相同，按照默认16px，高度应该是16px而非18.4px。这里暂未找到原因。\n\n## line-height\n\n`line-height`属性可以说是内联元素的基石\n\n### 决定非替换元素的高度\n\n决定高度要分成两部分来讲，对于替换元素和非替换元素来讲是不同的\n\n#### 非替换元素\n\n对于非替换元素（替换元素比如img）的内联元素来将，其高度是由`line-height`决定的。比如说一个`<div></div>`是高度为0，当写上几个字之后就有了高度，但是这里的高度并非由`font-size`决定，而是由`line-height`决定的。可以用代码测试一下。\n\n```html\n<div>\n  <div class=\"test1\">高度</div>\n</div>\n<div style=\"margin-top: 20px\">\n  <div class=\"test2\">高度</div>\n</div>\n```\n\ncss代码如下\n\n```css\n.test1 {\n  font-size: 16px;\n  line-height: 0;\n  border: 1px solid #ccc;\n  background-color: #eee;\n}\n\n.test2 {\n  font-size: 0;\n  line-height: 16px;\n  border: 1px solid #ccc;\n  background-color: #eee;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-1.jpg\">\n\n可以看到，上面`font-size`为16px的只有border撑起来的2px，而下面的`line-height`为16px的则是一共18px的高度。由此可以得出结论，内联元素的高度是由`line-height`来决定的。\n\n#### 替换元素\n\n对于替换元素来讲，比如说图片，设置其容器的`line-height`并不会影响到图片，但是由于图片为内联元素，前面也然会有一个幽灵空白，所以会造成容器被撑大的现象，但并未影响到图片。\n\n只有在非替换元素下，才能决定高度，在混合情况下，比如说图文混排时，则只能决定最小高度，不仅是替换元素不受`line-height`影响，同时也有`vertical-align`的影响。\n\n### 行距\n\n行距是内容排版上很重要的一点，但是由于平时开发中，也都是看着差不多就行了，并没有对其中的实现有所了解。这里也通过行距来进一步理解`line-height`在内联元素中重要的作用。\n\n行距在css里是分成上半部分和下半部分的，即第一行文字上面也是会有一半行距的。行距的计算公式即`行距 = 行高 - em-box`，简单讲就是`行距 = line-height - font-size`。\n\n这里要注意一点，内容区域和`em-box`不一样，内容区域受`font-family`和`font-size`共同决定的，而`em-box`只受`font-size`决定，所以你会发现，设置不同的字体，同样的`font-size`，按照公式计算的话行距是一样的，但是肉眼看到的行距似乎却并不一样。\n\n但是有一个字体例外，宋体的内容区域和`em-box`的区域是等同的。\n\n```html\n<div class=\"test\">\n  <span>sphinx</span>\n</div>\n```\n\ncss代码如下\n\n```css\n.test {\n  font-family: simsun;\n  font-size: 80px;\n  line-height: 120px;\n  background-color: yellow;\n}\n.test > span {\n  background-color: white;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-2.jpg\">\n\n行距即上下两边黄色的部分，这里可以做一个测试，将字体改为微软雅黑之后\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-3.jpg\">\n\n可以明显的看到，内容区域的高度并不一致。\n\n### 内联元素垂直居中\n\n#### 单行文字\n\n这里要纠正一个之前一直犯的错误，单行文字垂直居中只需要`line-height`即可，并不需要画蛇添足加一个`height`。\n\n举个例子，一个高度为50px的标题垂直居中\n\n```css\n.title{\n  /* height: 50px; */\n  line-height: 50px;\n  background: #000;\n  color: #fff;\n}\n```\n\n并不需要注释掉的那一行\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-4.jpg\">\n\n#### 多行文字或替换元素\n\n这里需要`line-height`和`vertical-align`共同作用\n\n```html\n<div class=\"box\">\n  <div class=\"content\">基于行高实现的多行文字垂直居中效果，垂直居中效果</div>\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  line-height: 120px;\n  background-color: #f0f3f9;\n  margin: auto;\n}\n.content {\n  display: inline-block;\n  line-height: 20px;\n  margin: 0 20px;\n  text-align: left;\n  vertical-align: middle;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-5.jpg\">\n\n这里需要解释一下原理\n* box里的width和margin共同作用外部容器水平居中\n* box里的line-height决定容器高度\n* content里的display很关键\n  1 这里重置了外部line-height大小，不能指定为block等块级元素，需要保持内联元素特性，因为需要使用vertical-align属性\n  2 同时产生行框盒子及幽灵空白。这里需要幽灵空白被box的line-height作用，撑开外部容器。\n* vertical-align: middle是为了调整对其方式，默认向基线对齐，需将其改成近似居中对齐\n\n### line-height的大值特性\n\n大值特性，其实内在原因同样是由于幽灵空白的作用。举个例子\n\n```html\n<div class=\"box box1\">\n  <span>span: line-height:30px</span>\n</div>\n<div class=\"box box2\">\n  <span>span: line-height:96px</span>\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  margin: 1em auto;\n  outline: 1px solid #beceeb;\n  background: #f0f3f9;\n}\n.box1 {\n  line-height: 96px;\n}\n.box1 span {\n  /* display: inline-block; */\n  background-color: #ddd;\n  line-height: 30px;\n}\n.box2 {\n  line-height: 30px;\n}\n.box2 span {\n  /* display: inline-block; */\n  background-color: #ddd;\n  line-height: 96px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-6.jpg\">\n\n可以看到box容器高度都是96px，那么解释一下原因，还是由于幽灵空白，`span`元素前面可以假设把它加上一个x匿名内联元素。\n\n加入是外部设置`line-height`为96px，那么则是作用到了x这个幽灵空白上，倘若是子元素设置了`line-height`，则是作用到了子元素的行框盒子上。整体行框盒子由最大的决定，因此还是96px。\n\n如果想避免幽灵空白的干扰，将上面注释掉的代码恢复，即设置`inline-block`创建一个独立的行框盒子，就能将里面的子元素不受干扰。同时满足大值特性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-7.jpg\">\n\n## vertical-align\n\n说到这个属性，就要提到基线，这也是很多现象产生的原因，比如说`vertical-align: middle`其实是近似垂直居中。\n\n而这近似垂直居中又导致了很多现象的出现，比如说很常见的一个布局，一行字加上一个下拉符号\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-2.jpg\">\n\n设置的都是20px大小，而且也使用了`vertical-align: middle`，但是最后的结果整个容器总是要大于20px，原因就和基线的定义有关了，如下图所示\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-1.jpg\">\n\n那么基线的定义就是字母x的下边缘，middle则是指基线往上1/2的x-height的位置，可以理解为x中间的那个交点。看似没有什么问题，但实际上问题就由此产生，每个字体在行内盒子的位置是不一样的，上面也比较了微软雅黑和宋体两个字体的差异，可以明显发现微软雅黑字体会下沉，那么也就导致了middle和实际的中线位置会往下偏一点。那么这个偏一点具体偏多少由`font-size`的大小决定，越大则下沉的效果越明显。所以实现真正意义上的居中是很困难的。\n\n拿一个作者博客的例子\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-7.jpg\">\n\n可以很明显的看到，确实如我上文所说，要想实现真正意义上的垂直居中，可以设置`font-size`为0，这样x就缩小为一个点，就能实现垂直居中效果，当然开发中并非一定要真正实现这种，一般情况下也看不出来\n\n### 单行文本高度不等于行高现象\n\n```html\n<div>\n  <span>123</span>\n</div>\n```\n\ncss代码如下\n\n```css\ndiv {\n  background-color: #000;\n  line-height: 32px;\n}\n\nspan {\n  color: #fff;\n  font-size: 24px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-3.jpg\">\n\n可以看到如图中所示，高度并不为32px，出现这一现象也是由于`vertical-align`以及幽灵空白作用的结果，理解这一现象本质，有助于理解内联元素。\n\n这似乎与上面行高决定非替换元素的高度这一观点相矛盾，其实并非如此，很多现象都是很多属性共同作用的结果。这里产生的原因就是子元素设置了`font-size`属性，导致和父元素字体大小不同，而内联元素又是和基线对齐，导致错位。\n\n我们可以在span前面加上一个x作为匿名内联盒子，在span里面加上一个x作为内联盒子\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-4.jpg\">\n\n可以看到，本来匿名内联盒子的x位置好好的，但是由于内联盒子字体太大了，导致为了基线对其，而将文字上移，就把父级容器撑开了，导致高度大于32px也就是这个原因。\n\n解决方案很简单，原因是`font-size`产生的，自然可以从字体大小上改动，指定父元素的`font-size`为24px与子元素相同，就能使高度为32px\n\n### 图片底部留有间隙现象\n\n这个现象可以说是从我刚开始学css起就遇到过了，结果之一也就不了了之了，只知如何解决，却不理解产生这种现象的原因。\n\n```html\n<div class=\"box\">\n　 <img src=\"1.png\">\n</div>\n```\n\ncss代码如下\n\n```css\n.box {\n  width: 280px;\n  outline: 1px solid #aaa;\n  text-align: center;\n}\n\n.box > img {\n  height: 96px;\n}\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-5.jpg\">\n\n可以看到，按照代码来看，应该是容器被图片撑开，然后是96px才对，然而实际确实100px，产生间隙的原因很多情况下都是`line-height`，`vertical-align`，`幽灵空白`造成的，此处也不例外\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-6.jpg\">\n\n这里和前面一样加上x，并添加上背景色辅助观察。可以很明显地看到产生间隙的原因，内联元素中，图片的基线按照下边缘来决定。\n\n\n因此，图片下边缘和x下边缘对齐，那么下边的间隙就是半行距，没错，间隙就是半行距撑开的。既然知道了产生的原因，那么解决起来就很简单了，消除半行距即可。比如让父元素line-height足够小，另行距为0或者是负值，即可解决。当然，也可以直接消除幽灵空白，将图片块状化，幽灵空白就消失了。或者改变对齐方式也可以解决。\n\n## 总结\n\ncss看似简单但也确实是有很多值得去探讨的地方，理解内在的原理也许才能更好的设计出更加合理的布局。\n","slug":"23. 内联元素的一些探究","published":1,"updated":"2021-09-30T06:47:11.375Z","_id":"cku41le8q000sidp23ldb2o5b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文依然是对《CSS世界》这本书中的一些知识点进行探究和实践。内联元素在CSS中极为重要，块级元素负责结构，内联元素负责内容，而CSS又是为图文展示而设计，因此显得尤为重要。同时多个属性混合在一起共同作用又会产生较为复杂的结果，比较典型的就是<code>line-height</code>和<code>vertical-align</code>，以及“幽灵空白”（CSS文档中叫strut）产生的一些现象了。</p>\n<p>文中也将从这三个方面去入手，实践一些现象产生的原因。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"幽灵空白\"><a href=\"#幽灵空白\" class=\"headerlink\" title=\"幽灵空白\"></a>幽灵空白</h2><p>“幽灵空白”这个概念并非没有意义，内联元素中产生的很多看似很难解释的现象其实很多都和这个“幽灵空白”息息相关。</p>\n<h3 id=\"证明幽灵空白存在\"><a href=\"#证明幽灵空白存在\" class=\"headerlink\" title=\"证明幽灵空白存在\"></a>证明幽灵空白存在</h3><blockquote>\n<p>line box starts with a zero-width inline box with the element’s font and line height properties. We call that imaginary box a “strut.” </p>\n</blockquote>\n<p>上面是一段对strut的描述，书中将其称为幽灵空白，表现为看不见摸不着，但却真实存在，可以用一段代码证明其存在。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-1.jpg\">\n\n<p>从上图可以看出来，其中并没有内容，内部的<code>span</code>宽高也都是0，但是<code>div</code>的高度却并不为0，而是20.8px，即可以认为<code>span</code>元素前面还有一个宽度为0的空白字符，那么都可以解释通了。</p>\n<blockquote>\n<p>Line boxes that contain no text, no preserved white space, no inline elements with non-zero margins, padding, or borders, and no other in-flow content (such as images, inline blocks or inline tables), and do not end with a preserved newline must be treated as zero-height line boxes</p>\n</blockquote>\n<p>同样还要注意，这里<code>display</code>要指定为<code>inline-block</code>,否则按照上述文档的描述，高度会被视为0</p>\n<p>这里为什么是20.8px呢？根据我的理解，这里的20.8px即内容区域（content area），即内联盒模型中的一个不可见区域。根据《css世界》作者的理解与实践，可以将其理解为文本选中背景色区域。</p>\n<p>这里内容区域是由<code>font-family</code>和<code>font-size</code>共同决定的,可以做一个测试，比较设置<code>font-family: simsun</code>和不设置时的区别。（默认为微软雅黑）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: simsun;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置之后，高度变为18.4px</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-2.jpg\">\n\n<p>即内容区域的高度和字体相关。当然这里还是有一个疑惑，设置宋体之后，内容区域应该和<code>em-box</code>相同，按照默认16px，高度应该是16px而非18.4px。这里暂未找到原因。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p><code>line-height</code>属性可以说是内联元素的基石</p>\n<h3 id=\"决定非替换元素的高度\"><a href=\"#决定非替换元素的高度\" class=\"headerlink\" title=\"决定非替换元素的高度\"></a>决定非替换元素的高度</h3><p>决定高度要分成两部分来讲，对于替换元素和非替换元素来讲是不同的</p>\n<h4 id=\"非替换元素\"><a href=\"#非替换元素\" class=\"headerlink\" title=\"非替换元素\"></a>非替换元素</h4><p>对于非替换元素（替换元素比如img）的内联元素来将，其高度是由<code>line-height</code>决定的。比如说一个<code>&lt;div&gt;&lt;/div&gt;</code>是高度为0，当写上几个字之后就有了高度，但是这里的高度并非由<code>font-size</code>决定，而是由<code>line-height</code>决定的。可以用代码测试一下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test1&quot;</span>&gt;</span>高度<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 20px&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test2&quot;</span>&gt;</span>高度<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-1.jpg\">\n\n<p>可以看到，上面<code>font-size</code>为16px的只有border撑起来的2px，而下面的<code>line-height</code>为16px的则是一共18px的高度。由此可以得出结论，内联元素的高度是由<code>line-height</code>来决定的。</p>\n<h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>对于替换元素来讲，比如说图片，设置其容器的<code>line-height</code>并不会影响到图片，但是由于图片为内联元素，前面也然会有一个幽灵空白，所以会造成容器被撑大的现象，但并未影响到图片。</p>\n<p>只有在非替换元素下，才能决定高度，在混合情况下，比如说图文混排时，则只能决定最小高度，不仅是替换元素不受<code>line-height</code>影响，同时也有<code>vertical-align</code>的影响。</p>\n<h3 id=\"行距\"><a href=\"#行距\" class=\"headerlink\" title=\"行距\"></a>行距</h3><p>行距是内容排版上很重要的一点，但是由于平时开发中，也都是看着差不多就行了，并没有对其中的实现有所了解。这里也通过行距来进一步理解<code>line-height</code>在内联元素中重要的作用。</p>\n<p>行距在css里是分成上半部分和下半部分的，即第一行文字上面也是会有一半行距的。行距的计算公式即<code>行距 = 行高 - em-box</code>，简单讲就是<code>行距 = line-height - font-size</code>。</p>\n<p>这里要注意一点，内容区域和<code>em-box</code>不一样，内容区域受<code>font-family</code>和<code>font-size</code>共同决定的，而<code>em-box</code>只受<code>font-size</code>决定，所以你会发现，设置不同的字体，同样的<code>font-size</code>，按照公式计算的话行距是一样的，但是肉眼看到的行距似乎却并不一样。</p>\n<p>但是有一个字体例外，宋体的内容区域和<code>em-box</code>的区域是等同的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>sphinx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: simsun;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &gt; <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-2.jpg\">\n\n<p>行距即上下两边黄色的部分，这里可以做一个测试，将字体改为微软雅黑之后</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-3.jpg\">\n\n<p>可以明显的看到，内容区域的高度并不一致。</p>\n<h3 id=\"内联元素垂直居中\"><a href=\"#内联元素垂直居中\" class=\"headerlink\" title=\"内联元素垂直居中\"></a>内联元素垂直居中</h3><h4 id=\"单行文字\"><a href=\"#单行文字\" class=\"headerlink\" title=\"单行文字\"></a>单行文字</h4><p>这里要纠正一个之前一直犯的错误，单行文字垂直居中只需要<code>line-height</code>即可，并不需要画蛇添足加一个<code>height</code>。</p>\n<p>举个例子，一个高度为50px的标题垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 50px; */</span></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并不需要注释掉的那一行</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-4.jpg\">\n\n<h4 id=\"多行文字或替换元素\"><a href=\"#多行文字或替换元素\" class=\"headerlink\" title=\"多行文字或替换元素\"></a>多行文字或替换元素</h4><p>这里需要<code>line-height</code>和<code>vertical-align</code>共同作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>基于行高实现的多行文字垂直居中效果，垂直居中效果<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f3f9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-5.jpg\">\n\n<p>这里需要解释一下原理</p>\n<ul>\n<li>box里的width和margin共同作用外部容器水平居中</li>\n<li>box里的line-height决定容器高度</li>\n<li>content里的display很关键<br>1 这里重置了外部line-height大小，不能指定为block等块级元素，需要保持内联元素特性，因为需要使用vertical-align属性<br>2 同时产生行框盒子及幽灵空白。这里需要幽灵空白被box的line-height作用，撑开外部容器。</li>\n<li>vertical-align: middle是为了调整对其方式，默认向基线对齐，需将其改成近似居中对齐</li>\n</ul>\n<h3 id=\"line-height的大值特性\"><a href=\"#line-height的大值特性\" class=\"headerlink\" title=\"line-height的大值特性\"></a>line-height的大值特性</h3><p>大值特性，其实内在原因同样是由于幽灵空白的作用。举个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span: line-height:30px<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span: line-height:96px<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#beceeb</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f0f3f9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* display: inline-block; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* display: inline-block; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-6.jpg\">\n\n<p>可以看到box容器高度都是96px，那么解释一下原因，还是由于幽灵空白，<code>span</code>元素前面可以假设把它加上一个x匿名内联元素。</p>\n<p>加入是外部设置<code>line-height</code>为96px，那么则是作用到了x这个幽灵空白上，倘若是子元素设置了<code>line-height</code>，则是作用到了子元素的行框盒子上。整体行框盒子由最大的决定，因此还是96px。</p>\n<p>如果想避免幽灵空白的干扰，将上面注释掉的代码恢复，即设置<code>inline-block</code>创建一个独立的行框盒子，就能将里面的子元素不受干扰。同时满足大值特性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-7.jpg\">\n\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>说到这个属性，就要提到基线，这也是很多现象产生的原因，比如说<code>vertical-align: middle</code>其实是近似垂直居中。</p>\n<p>而这近似垂直居中又导致了很多现象的出现，比如说很常见的一个布局，一行字加上一个下拉符号</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-2.jpg\">\n\n<p>设置的都是20px大小，而且也使用了<code>vertical-align: middle</code>，但是最后的结果整个容器总是要大于20px，原因就和基线的定义有关了，如下图所示</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-1.jpg\">\n\n<p>那么基线的定义就是字母x的下边缘，middle则是指基线往上1/2的x-height的位置，可以理解为x中间的那个交点。看似没有什么问题，但实际上问题就由此产生，每个字体在行内盒子的位置是不一样的，上面也比较了微软雅黑和宋体两个字体的差异，可以明显发现微软雅黑字体会下沉，那么也就导致了middle和实际的中线位置会往下偏一点。那么这个偏一点具体偏多少由<code>font-size</code>的大小决定，越大则下沉的效果越明显。所以实现真正意义上的居中是很困难的。</p>\n<p>拿一个作者博客的例子</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-7.jpg\">\n\n<p>可以很明显的看到，确实如我上文所说，要想实现真正意义上的垂直居中，可以设置<code>font-size</code>为0，这样x就缩小为一个点，就能实现垂直居中效果，当然开发中并非一定要真正实现这种，一般情况下也看不出来</p>\n<h3 id=\"单行文本高度不等于行高现象\"><a href=\"#单行文本高度不等于行高现象\" class=\"headerlink\" title=\"单行文本高度不等于行高现象\"></a>单行文本高度不等于行高现象</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-3.jpg\">\n\n<p>可以看到如图中所示，高度并不为32px，出现这一现象也是由于<code>vertical-align</code>以及幽灵空白作用的结果，理解这一现象本质，有助于理解内联元素。</p>\n<p>这似乎与上面行高决定非替换元素的高度这一观点相矛盾，其实并非如此，很多现象都是很多属性共同作用的结果。这里产生的原因就是子元素设置了<code>font-size</code>属性，导致和父元素字体大小不同，而内联元素又是和基线对齐，导致错位。</p>\n<p>我们可以在span前面加上一个x作为匿名内联盒子，在span里面加上一个x作为内联盒子</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-4.jpg\">\n\n<p>可以看到，本来匿名内联盒子的x位置好好的，但是由于内联盒子字体太大了，导致为了基线对其，而将文字上移，就把父级容器撑开了，导致高度大于32px也就是这个原因。</p>\n<p>解决方案很简单，原因是<code>font-size</code>产生的，自然可以从字体大小上改动，指定父元素的<code>font-size</code>为24px与子元素相同，就能使高度为32px</p>\n<h3 id=\"图片底部留有间隙现象\"><a href=\"#图片底部留有间隙现象\" class=\"headerlink\" title=\"图片底部留有间隙现象\"></a>图片底部留有间隙现象</h3><p>这个现象可以说是从我刚开始学css起就遇到过了，结果之一也就不了了之了，只知如何解决，却不理解产生这种现象的原因。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">　 <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;1.png&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-5.jpg\">\n\n<p>可以看到，按照代码来看，应该是容器被图片撑开，然后是96px才对，然而实际确实100px，产生间隙的原因很多情况下都是<code>line-height</code>，<code>vertical-align</code>，<code>幽灵空白</code>造成的，此处也不例外</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-6.jpg\">\n\n<p>这里和前面一样加上x，并添加上背景色辅助观察。可以很明显地看到产生间隙的原因，内联元素中，图片的基线按照下边缘来决定。</p>\n<p>因此，图片下边缘和x下边缘对齐，那么下边的间隙就是半行距，没错，间隙就是半行距撑开的。既然知道了产生的原因，那么解决起来就很简单了，消除半行距即可。比如让父元素line-height足够小，另行距为0或者是负值，即可解决。当然，也可以直接消除幽灵空白，将图片块状化，幽灵空白就消失了。或者改变对齐方式也可以解决。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>css看似简单但也确实是有很多值得去探讨的地方，理解内在的原理也许才能更好的设计出更加合理的布局。</p>\n","site":{"data":{}},"excerpt":"<p>本文依然是对《CSS世界》这本书中的一些知识点进行探究和实践。内联元素在CSS中极为重要，块级元素负责结构，内联元素负责内容，而CSS又是为图文展示而设计，因此显得尤为重要。同时多个属性混合在一起共同作用又会产生较为复杂的结果，比较典型的就是<code>line-height</code>和<code>vertical-align</code>，以及“幽灵空白”（CSS文档中叫strut）产生的一些现象了。</p>\n<p>文中也将从这三个方面去入手，实践一些现象产生的原因。</p>","more":"<h2 id=\"幽灵空白\"><a href=\"#幽灵空白\" class=\"headerlink\" title=\"幽灵空白\"></a>幽灵空白</h2><p>“幽灵空白”这个概念并非没有意义，内联元素中产生的很多看似很难解释的现象其实很多都和这个“幽灵空白”息息相关。</p>\n<h3 id=\"证明幽灵空白存在\"><a href=\"#证明幽灵空白存在\" class=\"headerlink\" title=\"证明幽灵空白存在\"></a>证明幽灵空白存在</h3><blockquote>\n<p>line box starts with a zero-width inline box with the element’s font and line height properties. We call that imaginary box a “strut.” </p>\n</blockquote>\n<p>上面是一段对strut的描述，书中将其称为幽灵空白，表现为看不见摸不着，但却真实存在，可以用一段代码证明其存在。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-1.jpg\">\n\n<p>从上图可以看出来，其中并没有内容，内部的<code>span</code>宽高也都是0，但是<code>div</code>的高度却并不为0，而是20.8px，即可以认为<code>span</code>元素前面还有一个宽度为0的空白字符，那么都可以解释通了。</p>\n<blockquote>\n<p>Line boxes that contain no text, no preserved white space, no inline elements with non-zero margins, padding, or borders, and no other in-flow content (such as images, inline blocks or inline tables), and do not end with a preserved newline must be treated as zero-height line boxes</p>\n</blockquote>\n<p>同样还要注意，这里<code>display</code>要指定为<code>inline-block</code>,否则按照上述文档的描述，高度会被视为0</p>\n<p>这里为什么是20.8px呢？根据我的理解，这里的20.8px即内容区域（content area），即内联盒模型中的一个不可见区域。根据《css世界》作者的理解与实践，可以将其理解为文本选中背景色区域。</p>\n<p>这里内容区域是由<code>font-family</code>和<code>font-size</code>共同决定的,可以做一个测试，比较设置<code>font-family: simsun</code>和不设置时的区别。（默认为微软雅黑）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: simsun;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置之后，高度变为18.4px</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/strut-2.jpg\">\n\n<p>即内容区域的高度和字体相关。当然这里还是有一个疑惑，设置宋体之后，内容区域应该和<code>em-box</code>相同，按照默认16px，高度应该是16px而非18.4px。这里暂未找到原因。</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p><code>line-height</code>属性可以说是内联元素的基石</p>\n<h3 id=\"决定非替换元素的高度\"><a href=\"#决定非替换元素的高度\" class=\"headerlink\" title=\"决定非替换元素的高度\"></a>决定非替换元素的高度</h3><p>决定高度要分成两部分来讲，对于替换元素和非替换元素来讲是不同的</p>\n<h4 id=\"非替换元素\"><a href=\"#非替换元素\" class=\"headerlink\" title=\"非替换元素\"></a>非替换元素</h4><p>对于非替换元素（替换元素比如img）的内联元素来将，其高度是由<code>line-height</code>决定的。比如说一个<code>&lt;div&gt;&lt;/div&gt;</code>是高度为0，当写上几个字之后就有了高度，但是这里的高度并非由<code>font-size</code>决定，而是由<code>line-height</code>决定的。可以用代码测试一下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test1&quot;</span>&gt;</span>高度<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 20px&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test2&quot;</span>&gt;</span>高度<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-1.jpg\">\n\n<p>可以看到，上面<code>font-size</code>为16px的只有border撑起来的2px，而下面的<code>line-height</code>为16px的则是一共18px的高度。由此可以得出结论，内联元素的高度是由<code>line-height</code>来决定的。</p>\n<h4 id=\"替换元素\"><a href=\"#替换元素\" class=\"headerlink\" title=\"替换元素\"></a>替换元素</h4><p>对于替换元素来讲，比如说图片，设置其容器的<code>line-height</code>并不会影响到图片，但是由于图片为内联元素，前面也然会有一个幽灵空白，所以会造成容器被撑大的现象，但并未影响到图片。</p>\n<p>只有在非替换元素下，才能决定高度，在混合情况下，比如说图文混排时，则只能决定最小高度，不仅是替换元素不受<code>line-height</code>影响，同时也有<code>vertical-align</code>的影响。</p>\n<h3 id=\"行距\"><a href=\"#行距\" class=\"headerlink\" title=\"行距\"></a>行距</h3><p>行距是内容排版上很重要的一点，但是由于平时开发中，也都是看着差不多就行了，并没有对其中的实现有所了解。这里也通过行距来进一步理解<code>line-height</code>在内联元素中重要的作用。</p>\n<p>行距在css里是分成上半部分和下半部分的，即第一行文字上面也是会有一半行距的。行距的计算公式即<code>行距 = 行高 - em-box</code>，简单讲就是<code>行距 = line-height - font-size</code>。</p>\n<p>这里要注意一点，内容区域和<code>em-box</code>不一样，内容区域受<code>font-family</code>和<code>font-size</code>共同决定的，而<code>em-box</code>只受<code>font-size</code>决定，所以你会发现，设置不同的字体，同样的<code>font-size</code>，按照公式计算的话行距是一样的，但是肉眼看到的行距似乎却并不一样。</p>\n<p>但是有一个字体例外，宋体的内容区域和<code>em-box</code>的区域是等同的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>sphinx<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: simsun;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &gt; <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-2.jpg\">\n\n<p>行距即上下两边黄色的部分，这里可以做一个测试，将字体改为微软雅黑之后</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-3.jpg\">\n\n<p>可以明显的看到，内容区域的高度并不一致。</p>\n<h3 id=\"内联元素垂直居中\"><a href=\"#内联元素垂直居中\" class=\"headerlink\" title=\"内联元素垂直居中\"></a>内联元素垂直居中</h3><h4 id=\"单行文字\"><a href=\"#单行文字\" class=\"headerlink\" title=\"单行文字\"></a>单行文字</h4><p>这里要纠正一个之前一直犯的错误，单行文字垂直居中只需要<code>line-height</code>即可，并不需要画蛇添足加一个<code>height</code>。</p>\n<p>举个例子，一个高度为50px的标题垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 50px; */</span></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并不需要注释掉的那一行</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-4.jpg\">\n\n<h4 id=\"多行文字或替换元素\"><a href=\"#多行文字或替换元素\" class=\"headerlink\" title=\"多行文字或替换元素\"></a>多行文字或替换元素</h4><p>这里需要<code>line-height</code>和<code>vertical-align</code>共同作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>基于行高实现的多行文字垂直居中效果，垂直居中效果<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f0f3f9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-5.jpg\">\n\n<p>这里需要解释一下原理</p>\n<ul>\n<li>box里的width和margin共同作用外部容器水平居中</li>\n<li>box里的line-height决定容器高度</li>\n<li>content里的display很关键<br>1 这里重置了外部line-height大小，不能指定为block等块级元素，需要保持内联元素特性，因为需要使用vertical-align属性<br>2 同时产生行框盒子及幽灵空白。这里需要幽灵空白被box的line-height作用，撑开外部容器。</li>\n<li>vertical-align: middle是为了调整对其方式，默认向基线对齐，需将其改成近似居中对齐</li>\n</ul>\n<h3 id=\"line-height的大值特性\"><a href=\"#line-height的大值特性\" class=\"headerlink\" title=\"line-height的大值特性\"></a>line-height的大值特性</h3><p>大值特性，其实内在原因同样是由于幽灵空白的作用。举个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span: line-height:30px<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>span: line-height:96px<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#beceeb</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f0f3f9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* display: inline-block; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* display: inline-block; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-6.jpg\">\n\n<p>可以看到box容器高度都是96px，那么解释一下原因，还是由于幽灵空白，<code>span</code>元素前面可以假设把它加上一个x匿名内联元素。</p>\n<p>加入是外部设置<code>line-height</code>为96px，那么则是作用到了x这个幽灵空白上，倘若是子元素设置了<code>line-height</code>，则是作用到了子元素的行框盒子上。整体行框盒子由最大的决定，因此还是96px。</p>\n<p>如果想避免幽灵空白的干扰，将上面注释掉的代码恢复，即设置<code>inline-block</code>创建一个独立的行框盒子，就能将里面的子元素不受干扰。同时满足大值特性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/line_height-7.jpg\">\n\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p>说到这个属性，就要提到基线，这也是很多现象产生的原因，比如说<code>vertical-align: middle</code>其实是近似垂直居中。</p>\n<p>而这近似垂直居中又导致了很多现象的出现，比如说很常见的一个布局，一行字加上一个下拉符号</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-2.jpg\">\n\n<p>设置的都是20px大小，而且也使用了<code>vertical-align: middle</code>，但是最后的结果整个容器总是要大于20px，原因就和基线的定义有关了，如下图所示</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-1.jpg\">\n\n<p>那么基线的定义就是字母x的下边缘，middle则是指基线往上1/2的x-height的位置，可以理解为x中间的那个交点。看似没有什么问题，但实际上问题就由此产生，每个字体在行内盒子的位置是不一样的，上面也比较了微软雅黑和宋体两个字体的差异，可以明显发现微软雅黑字体会下沉，那么也就导致了middle和实际的中线位置会往下偏一点。那么这个偏一点具体偏多少由<code>font-size</code>的大小决定，越大则下沉的效果越明显。所以实现真正意义上的居中是很困难的。</p>\n<p>拿一个作者博客的例子</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-7.jpg\">\n\n<p>可以很明显的看到，确实如我上文所说，要想实现真正意义上的垂直居中，可以设置<code>font-size</code>为0，这样x就缩小为一个点，就能实现垂直居中效果，当然开发中并非一定要真正实现这种，一般情况下也看不出来</p>\n<h3 id=\"单行文本高度不等于行高现象\"><a href=\"#单行文本高度不等于行高现象\" class=\"headerlink\" title=\"单行文本高度不等于行高现象\"></a>单行文本高度不等于行高现象</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-3.jpg\">\n\n<p>可以看到如图中所示，高度并不为32px，出现这一现象也是由于<code>vertical-align</code>以及幽灵空白作用的结果，理解这一现象本质，有助于理解内联元素。</p>\n<p>这似乎与上面行高决定非替换元素的高度这一观点相矛盾，其实并非如此，很多现象都是很多属性共同作用的结果。这里产生的原因就是子元素设置了<code>font-size</code>属性，导致和父元素字体大小不同，而内联元素又是和基线对齐，导致错位。</p>\n<p>我们可以在span前面加上一个x作为匿名内联盒子，在span里面加上一个x作为内联盒子</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-4.jpg\">\n\n<p>可以看到，本来匿名内联盒子的x位置好好的，但是由于内联盒子字体太大了，导致为了基线对其，而将文字上移，就把父级容器撑开了，导致高度大于32px也就是这个原因。</p>\n<p>解决方案很简单，原因是<code>font-size</code>产生的，自然可以从字体大小上改动，指定父元素的<code>font-size</code>为24px与子元素相同，就能使高度为32px</p>\n<h3 id=\"图片底部留有间隙现象\"><a href=\"#图片底部留有间隙现象\" class=\"headerlink\" title=\"图片底部留有间隙现象\"></a>图片底部留有间隙现象</h3><p>这个现象可以说是从我刚开始学css起就遇到过了，结果之一也就不了了之了，只知如何解决，却不理解产生这种现象的原因。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">　 <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;1.png&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>css代码如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">280px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">96px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-5.jpg\">\n\n<p>可以看到，按照代码来看，应该是容器被图片撑开，然后是96px才对，然而实际确实100px，产生间隙的原因很多情况下都是<code>line-height</code>，<code>vertical-align</code>，<code>幽灵空白</code>造成的，此处也不例外</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-1-19/vertical_align-6.jpg\">\n\n<p>这里和前面一样加上x，并添加上背景色辅助观察。可以很明显地看到产生间隙的原因，内联元素中，图片的基线按照下边缘来决定。</p>\n<p>因此，图片下边缘和x下边缘对齐，那么下边的间隙就是半行距，没错，间隙就是半行距撑开的。既然知道了产生的原因，那么解决起来就很简单了，消除半行距即可。比如让父元素line-height足够小，另行距为0或者是负值，即可解决。当然，也可以直接消除幽灵空白，将图片块状化，幽灵空白就消失了。或者改变对齐方式也可以解决。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>css看似简单但也确实是有很多值得去探讨的地方，理解内在的原理也许才能更好的设计出更加合理的布局。</p>"},{"title":"解决回调地狱","date":"2019-02-18T14:21:27.000Z","toc":true,"_content":"\n文中将简单整理一下js异步编程的方法。关于js异步编程，早期很容易出现回调地狱这一现象，也出现了一些相应的解决办法，从`Promise`到`Generator`再到`async/await`,解决了回调地狱这一问题，当然本文只是浅显的举出一些实例，以及个人简单的理解。\n\n异步编程这一块确实还有很多可以继续深入的地方。\n\n<!--more-->\n\n## 异步编程方法\n\n* 回调函数\n* 事件监听\n* Promise对象\n* Generator函数\n* Generator的语法糖async/await\n\n文中将着重放在`Promise`，`Generator函数`，`async/await`这三个方面进行举例\n\n## 回调地狱产生\n\n这里首先使用node随便写三个接口测试，具体代码就不贴了，两个Get请求，一个Post请求。\n\n```js\n$.get(url + \"/first\", function(resFirst) {\n  console.log(resFirst);\n  $.get(url + \"/second\", function(resSecond) {\n    console.log(resSecond);\n    $.post(url + \"/login\", userData, function(res) {\n      console.log(res);\n    })\n  })\n})\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-2-18/img1.jpg\">\n\n可以看到上面代码就是一个简单的回调地狱，每一个请求都是外层请求的回调。那么有什么问题呢？最明显的一点就是，代码可读性差，就像洋葱一样一层包裹着一层，改动一处，其余地方也要改动，可维护性也不好。\n\n当然回调地狱不止是这么一个问题，还有一个问题就是异常处理上的问题，即在回调中出现的异常无法被捕获，举个例子\n\n```js\nfunction throwError(){\n  // console.log(\"throw\");\n  throw new Error('ERROR');\n}\n\ntry{\n  setTimeout(throwError, 3000);\n  // throwError();\n} catch(e){\n  alert(e);//这里的异常无法捕获\n}\n```\n\n上面代码运行后并不会弹出窗口，也就是无法被捕获到，那么类比到最开始举的三个请求的例子，我们不能直接在三个请求整体的外面写try/catch，因为这样无法捕获，而需要在每个回调内部写才能捕获到，如下\n\n```js\n$.get(url + \"/first\", function(resFirst) {\n  console.log(resFirst);\n  try {\n    throwError();\n  } catch(e) {\n    alert(e);\n  }\n  $.get(url + \"/second\", function(resSecond) {\n    console.log(resSecond);\n    try {\n      throwError();\n    } catch(e) {\n      alert(e);\n    }\n    $.post(url + \"/login\", userData, function(res) {\n      console.log(res);\n      try {\n        throwError();\n      } catch(e) {\n        alert(e);\n      }\n    })\n  })\n})\n```\n\n这样代码的弊端非常明显，代码量不仅大，而且异常非常不方便处理，那么下面就将使用Promise改写该段代码，解决上述问题。\n\n## Promise改写\n\nPromise是一种异步编程解决方案，有三种状态`pending`，`fulfilled`，`rejected`，使用Promise就可以让上面的代码异步操作以同步操作的流程写出来，避免过多嵌套，每一个`then`都可以当成回调，根据链式调用，其参数是上一个取决于上一个链发送的参数\n\n```js\n// 封装的请求\nconst reqJSON = function(url, data) {\n  const promise = new Promise(function(resolve, reject){\n    // 箭头函数不会创建this，而是向上找\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    if (data === null) {\n      // get请求\n      client.open(\"GET\", url);\n      client.onreadystatechange = handler;\n      client.send(null);\n    } else {\n      // post请求\n      client.open(\"POST\", url);\n      client.onreadystatechange = handler;\n      client.responseType = \"json\";\n      client.setRequestHeader(\"Content-Type\", \"application/json\");\n      client.send(JSON.stringify(data));\n      // client.send(data);\n    }\n  });\n\n  return promise;\n};\n\n// Promise改写\nnew Promise((resolve, reject) => {\n  reqJSON(localUrl + \"/first\", null)\n    .then(json => {\n      console.log('Contents: ', json);\n      // 上面reqJSON()封装的请求里面的resolve代表的是封装的成功，两者不一样\n      // 下面的resolve代表请求成功后成功（可以理解为收到200后）\n      resolve();\n      // reject(\"first接口报错\");\n    })\n})\n.then(data => {\n  return new Promise((resolve, reject) => {\n    reqJSON(localUrl + \"/second\", null)\n      .then(json => {\n        console.log('Contents: ', json);\n        resolve();\n        // reject(\"second接口报错\");\n      })\n  })\n})\n.then(data => {\n  return new Promise((resolve, reject) => {\n    reqJSON(localUrl + \"/login\", userData)\n      .then(json => {\n        console.log('Contents: ', json);\n        resolve();\n        // reject(\"login接口报错\");\n      })\n  })\n})\n.catch(err => {\n  console.log(\"捕捉到error:\", err);\n})\n```\n\n上面代码的上部分是使用Promise实现Ajax操作，下部分则是三个请求，虽然还是有点丑，可以进一步封装，但是确实把嵌套打开了。并且最重要的是异常捕获没有问题，`resolve`代表可以继续往下进行，`reject`则表示出错，只需要在最后面写上`catch`既可以全部捕获\n\n## Promise实现原理\n\n这里照着[链接](https://github.com/xieranmaya/blog/issues/3)敲了一遍，然后自己打断点跑了几遍，也算是理解了Promise的大致实现流程。\n\n首先分析一下，Promise一共三种状态，`pending`，`resolved`，`rejected`三种状态，然后常用方法两种`then`和`catch`。那么我们要做的就是将这些逐个实现。\n\n首先就是构造函数的编写，这里就不贴代码了，想看代码得可以去上面链接自己敲一遍。由上述可得，内部属性`status`用来存三种状态，`data`用来存`resolve`传入的数据。然后`Promise`接收的参数是一个函数，函数有两个参数，分别是`resolve`和`reject`两个方法。因此，构造函数还需要实现`resolve`和`reject`两个方法，方法功能是调用后将状态改变，以及将`resolve`或`reject`的参数存入`data`。这里有一个要注意的地方就是，`Promise`的状态一经改变，就会凝固，不会再改变了。所以这里要注意一下。\n\n然后就是`then`方法的实现，`then`方法接收两个参数，一个是成功回调函数，一个是失败回掉函数。而且这里的`then`返回的是新的Promise实例，但是属性还是之前的数据，原因是，假如是同一个对象，那么假如`then`的`promise`抛出一个异常的话，状态就变成了`rejected`，这就违背了`Promise`状态一经改变就不会再变的原则。之后`then`内部会调用传入的回掉函数，并改变此时的`promise`对象属性。\n\n需要注意的一点是，`new Promise(resolve => resolve(8)).then().then((value) => console.log(value)})`这种情况下需要值穿透，方法就是假如`then`不传参数的话，我们默认给它一个参数，让其return自己，就能实现值穿透。\n\n`catch`方法的话实现起来就比较简单了，直接调用`then(null, onRejected)`即可。\n\n这里有一点要注意的，就是之前构造函数里还有两个属性`_self.onResolvedCallbacks`，`_self.onRejectedCallbacks`这两个属性分别是数组，存的是函数。之前一直不了解两个属性的作用。后来仔细查看之后，这两个属性存的是状态`pending`情况下的回调。那么是什么意思呢，意思就是说当触发`then`方法的时候，`status`有可能是`pending`状态，那么这个时候并不知道是要调用成功回调还是失败回调。拿方案就是都存下来，当后面状态改变的时候，当触发`resolve`时，会遍历`callback`数组，并执行函数。我们可以用一段代码，打断点测试一下，如下\n\n```js\nconst promise = new MPromise(function(resolve, reject) {\n  console.log(\"MPromise\");\n});\n\npromise\n  .then(response => {\n    console.log(response);\n    console.log(\"then回调\");\n  })\n\npromise.resolve(\"second\");\n\npromise\n  .then()\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  })\n```\n\n上述代码的第一个then时，状态还是pending，就会触发存入callback的操作。而且后面有一个无参数的then，可以测试值穿透的情况。\n\n那么实现原理大概就是这样了，自己动手写一遍就很清楚了。其实我上面讲的肯定很乱，没有代码空口白说，直接看估计也看不懂。主要是为了自己梳理一下思路吧，想具体了解原理的请点上述链接自行查看。\n\n\n## Generator改写\n\nGenerator封装了多个内部状态，其使用`next()`来继续运行，使用`throw()`来抛出错误。内部使用`yield`来定义内部状态\n\n```js\nfunction* reqFun() {\n  try {\n    yield reqJSON(localUrl + \"/first\", null)\n      .then(json => { console.log('Contents: ', json); it.next();})\n\n    yield reqJSON(localUrl + \"/second\", null)\n      .then(json => { console.log('Contents: ', json); it.throw(new Error('error'));})\n\n    yield reqJSON(localUrl + \"/login\", userData)\n      .then(json => { console.log('Contents: ', json); it.next();})\n  } catch(e) {\n    console.log(e);\n  }\n\n}\n\nlet it = reqFun();\nit.next();\n```\n\n代码如上图，发送请求依然是用上面Promise封装的ajax操作，优点代码更加简洁，而且也解决了在外部使用一个`try/catch`就能捕获内部所有状态\n\n其中需要手动执行函数，并使用`next()`让其继续运行。当然可以使用co模块让其自动运行，这里就不再赘述\n\n## async函数改写\n\nasync函数使异步操作更加方便，简单讲就是Generator函数的语法糖，其内置了执行器，会自动执行结果\n\n```js\nasync function reqFun() {\n  try {\n    await reqJSON(localUrl + \"/first\", null)\n      .then(json => { console.log('Contents: ', json);})\n\n    await reqJSON(localUrl + \"/second\", null)\n      .then(json => { console.log('Contents: ', json); throw new Error(\"error\");})\n\n    await reqJSON(localUrl + \"/login\", userData)\n      .then(json => { console.log('Contents: ', json);})\n  } catch(e) {\n    console.log(e);\n  }\n}\n\nreqFun();\n```\n\n和上面Generator改写的很相似，async有更广的适应性，其返回值是Promise，也就意味着定义的`reqFun()`函数可以继续`then()`或者`catch()`，可以构造更加合理的代码结构\n\n## 总结\n\n文中只是整理了一下基本的使用，以及自己的一些见解吧，也参考了很多博客。也算是对ES6的一些内容的进一步实践吧\n","source":"_posts/24. 解决回调地狱.md","raw":"---\ntitle: 解决回调地狱\ndate: 2019-02-18 22:21:27\ntoc: true\ncategories:\n- 前端\ntags:\n- JS\n- Promise\n---\n\n文中将简单整理一下js异步编程的方法。关于js异步编程，早期很容易出现回调地狱这一现象，也出现了一些相应的解决办法，从`Promise`到`Generator`再到`async/await`,解决了回调地狱这一问题，当然本文只是浅显的举出一些实例，以及个人简单的理解。\n\n异步编程这一块确实还有很多可以继续深入的地方。\n\n<!--more-->\n\n## 异步编程方法\n\n* 回调函数\n* 事件监听\n* Promise对象\n* Generator函数\n* Generator的语法糖async/await\n\n文中将着重放在`Promise`，`Generator函数`，`async/await`这三个方面进行举例\n\n## 回调地狱产生\n\n这里首先使用node随便写三个接口测试，具体代码就不贴了，两个Get请求，一个Post请求。\n\n```js\n$.get(url + \"/first\", function(resFirst) {\n  console.log(resFirst);\n  $.get(url + \"/second\", function(resSecond) {\n    console.log(resSecond);\n    $.post(url + \"/login\", userData, function(res) {\n      console.log(res);\n    })\n  })\n})\n```\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-2-18/img1.jpg\">\n\n可以看到上面代码就是一个简单的回调地狱，每一个请求都是外层请求的回调。那么有什么问题呢？最明显的一点就是，代码可读性差，就像洋葱一样一层包裹着一层，改动一处，其余地方也要改动，可维护性也不好。\n\n当然回调地狱不止是这么一个问题，还有一个问题就是异常处理上的问题，即在回调中出现的异常无法被捕获，举个例子\n\n```js\nfunction throwError(){\n  // console.log(\"throw\");\n  throw new Error('ERROR');\n}\n\ntry{\n  setTimeout(throwError, 3000);\n  // throwError();\n} catch(e){\n  alert(e);//这里的异常无法捕获\n}\n```\n\n上面代码运行后并不会弹出窗口，也就是无法被捕获到，那么类比到最开始举的三个请求的例子，我们不能直接在三个请求整体的外面写try/catch，因为这样无法捕获，而需要在每个回调内部写才能捕获到，如下\n\n```js\n$.get(url + \"/first\", function(resFirst) {\n  console.log(resFirst);\n  try {\n    throwError();\n  } catch(e) {\n    alert(e);\n  }\n  $.get(url + \"/second\", function(resSecond) {\n    console.log(resSecond);\n    try {\n      throwError();\n    } catch(e) {\n      alert(e);\n    }\n    $.post(url + \"/login\", userData, function(res) {\n      console.log(res);\n      try {\n        throwError();\n      } catch(e) {\n        alert(e);\n      }\n    })\n  })\n})\n```\n\n这样代码的弊端非常明显，代码量不仅大，而且异常非常不方便处理，那么下面就将使用Promise改写该段代码，解决上述问题。\n\n## Promise改写\n\nPromise是一种异步编程解决方案，有三种状态`pending`，`fulfilled`，`rejected`，使用Promise就可以让上面的代码异步操作以同步操作的流程写出来，避免过多嵌套，每一个`then`都可以当成回调，根据链式调用，其参数是上一个取决于上一个链发送的参数\n\n```js\n// 封装的请求\nconst reqJSON = function(url, data) {\n  const promise = new Promise(function(resolve, reject){\n    // 箭头函数不会创建this，而是向上找\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    if (data === null) {\n      // get请求\n      client.open(\"GET\", url);\n      client.onreadystatechange = handler;\n      client.send(null);\n    } else {\n      // post请求\n      client.open(\"POST\", url);\n      client.onreadystatechange = handler;\n      client.responseType = \"json\";\n      client.setRequestHeader(\"Content-Type\", \"application/json\");\n      client.send(JSON.stringify(data));\n      // client.send(data);\n    }\n  });\n\n  return promise;\n};\n\n// Promise改写\nnew Promise((resolve, reject) => {\n  reqJSON(localUrl + \"/first\", null)\n    .then(json => {\n      console.log('Contents: ', json);\n      // 上面reqJSON()封装的请求里面的resolve代表的是封装的成功，两者不一样\n      // 下面的resolve代表请求成功后成功（可以理解为收到200后）\n      resolve();\n      // reject(\"first接口报错\");\n    })\n})\n.then(data => {\n  return new Promise((resolve, reject) => {\n    reqJSON(localUrl + \"/second\", null)\n      .then(json => {\n        console.log('Contents: ', json);\n        resolve();\n        // reject(\"second接口报错\");\n      })\n  })\n})\n.then(data => {\n  return new Promise((resolve, reject) => {\n    reqJSON(localUrl + \"/login\", userData)\n      .then(json => {\n        console.log('Contents: ', json);\n        resolve();\n        // reject(\"login接口报错\");\n      })\n  })\n})\n.catch(err => {\n  console.log(\"捕捉到error:\", err);\n})\n```\n\n上面代码的上部分是使用Promise实现Ajax操作，下部分则是三个请求，虽然还是有点丑，可以进一步封装，但是确实把嵌套打开了。并且最重要的是异常捕获没有问题，`resolve`代表可以继续往下进行，`reject`则表示出错，只需要在最后面写上`catch`既可以全部捕获\n\n## Promise实现原理\n\n这里照着[链接](https://github.com/xieranmaya/blog/issues/3)敲了一遍，然后自己打断点跑了几遍，也算是理解了Promise的大致实现流程。\n\n首先分析一下，Promise一共三种状态，`pending`，`resolved`，`rejected`三种状态，然后常用方法两种`then`和`catch`。那么我们要做的就是将这些逐个实现。\n\n首先就是构造函数的编写，这里就不贴代码了，想看代码得可以去上面链接自己敲一遍。由上述可得，内部属性`status`用来存三种状态，`data`用来存`resolve`传入的数据。然后`Promise`接收的参数是一个函数，函数有两个参数，分别是`resolve`和`reject`两个方法。因此，构造函数还需要实现`resolve`和`reject`两个方法，方法功能是调用后将状态改变，以及将`resolve`或`reject`的参数存入`data`。这里有一个要注意的地方就是，`Promise`的状态一经改变，就会凝固，不会再改变了。所以这里要注意一下。\n\n然后就是`then`方法的实现，`then`方法接收两个参数，一个是成功回调函数，一个是失败回掉函数。而且这里的`then`返回的是新的Promise实例，但是属性还是之前的数据，原因是，假如是同一个对象，那么假如`then`的`promise`抛出一个异常的话，状态就变成了`rejected`，这就违背了`Promise`状态一经改变就不会再变的原则。之后`then`内部会调用传入的回掉函数，并改变此时的`promise`对象属性。\n\n需要注意的一点是，`new Promise(resolve => resolve(8)).then().then((value) => console.log(value)})`这种情况下需要值穿透，方法就是假如`then`不传参数的话，我们默认给它一个参数，让其return自己，就能实现值穿透。\n\n`catch`方法的话实现起来就比较简单了，直接调用`then(null, onRejected)`即可。\n\n这里有一点要注意的，就是之前构造函数里还有两个属性`_self.onResolvedCallbacks`，`_self.onRejectedCallbacks`这两个属性分别是数组，存的是函数。之前一直不了解两个属性的作用。后来仔细查看之后，这两个属性存的是状态`pending`情况下的回调。那么是什么意思呢，意思就是说当触发`then`方法的时候，`status`有可能是`pending`状态，那么这个时候并不知道是要调用成功回调还是失败回调。拿方案就是都存下来，当后面状态改变的时候，当触发`resolve`时，会遍历`callback`数组，并执行函数。我们可以用一段代码，打断点测试一下，如下\n\n```js\nconst promise = new MPromise(function(resolve, reject) {\n  console.log(\"MPromise\");\n});\n\npromise\n  .then(response => {\n    console.log(response);\n    console.log(\"then回调\");\n  })\n\npromise.resolve(\"second\");\n\npromise\n  .then()\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    console.log(error);\n  })\n```\n\n上述代码的第一个then时，状态还是pending，就会触发存入callback的操作。而且后面有一个无参数的then，可以测试值穿透的情况。\n\n那么实现原理大概就是这样了，自己动手写一遍就很清楚了。其实我上面讲的肯定很乱，没有代码空口白说，直接看估计也看不懂。主要是为了自己梳理一下思路吧，想具体了解原理的请点上述链接自行查看。\n\n\n## Generator改写\n\nGenerator封装了多个内部状态，其使用`next()`来继续运行，使用`throw()`来抛出错误。内部使用`yield`来定义内部状态\n\n```js\nfunction* reqFun() {\n  try {\n    yield reqJSON(localUrl + \"/first\", null)\n      .then(json => { console.log('Contents: ', json); it.next();})\n\n    yield reqJSON(localUrl + \"/second\", null)\n      .then(json => { console.log('Contents: ', json); it.throw(new Error('error'));})\n\n    yield reqJSON(localUrl + \"/login\", userData)\n      .then(json => { console.log('Contents: ', json); it.next();})\n  } catch(e) {\n    console.log(e);\n  }\n\n}\n\nlet it = reqFun();\nit.next();\n```\n\n代码如上图，发送请求依然是用上面Promise封装的ajax操作，优点代码更加简洁，而且也解决了在外部使用一个`try/catch`就能捕获内部所有状态\n\n其中需要手动执行函数，并使用`next()`让其继续运行。当然可以使用co模块让其自动运行，这里就不再赘述\n\n## async函数改写\n\nasync函数使异步操作更加方便，简单讲就是Generator函数的语法糖，其内置了执行器，会自动执行结果\n\n```js\nasync function reqFun() {\n  try {\n    await reqJSON(localUrl + \"/first\", null)\n      .then(json => { console.log('Contents: ', json);})\n\n    await reqJSON(localUrl + \"/second\", null)\n      .then(json => { console.log('Contents: ', json); throw new Error(\"error\");})\n\n    await reqJSON(localUrl + \"/login\", userData)\n      .then(json => { console.log('Contents: ', json);})\n  } catch(e) {\n    console.log(e);\n  }\n}\n\nreqFun();\n```\n\n和上面Generator改写的很相似，async有更广的适应性，其返回值是Promise，也就意味着定义的`reqFun()`函数可以继续`then()`或者`catch()`，可以构造更加合理的代码结构\n\n## 总结\n\n文中只是整理了一下基本的使用，以及自己的一些见解吧，也参考了很多博客。也算是对ES6的一些内容的进一步实践吧\n","slug":"24. 解决回调地狱","published":1,"updated":"2021-09-30T06:47:16.051Z","_id":"cku41le8r000uidp2fud7c23w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>文中将简单整理一下js异步编程的方法。关于js异步编程，早期很容易出现回调地狱这一现象，也出现了一些相应的解决办法，从<code>Promise</code>到<code>Generator</code>再到<code>async/await</code>,解决了回调地狱这一问题，当然本文只是浅显的举出一些实例，以及个人简单的理解。</p>\n<p>异步编程这一块确实还有很多可以继续深入的地方。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"异步编程方法\"><a href=\"#异步编程方法\" class=\"headerlink\" title=\"异步编程方法\"></a>异步编程方法</h2><ul>\n<li>回调函数</li>\n<li>事件监听</li>\n<li>Promise对象</li>\n<li>Generator函数</li>\n<li>Generator的语法糖async/await</li>\n</ul>\n<p>文中将着重放在<code>Promise</code>，<code>Generator函数</code>，<code>async/await</code>这三个方面进行举例</p>\n<h2 id=\"回调地狱产生\"><a href=\"#回调地狱产生\" class=\"headerlink\" title=\"回调地狱产生\"></a>回调地狱产生</h2><p>这里首先使用node随便写三个接口测试，具体代码就不贴了，两个Get请求，一个Post请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resFirst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(resFirst);</span><br><span class=\"line\">  $.get(url + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resSecond</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resSecond);</span><br><span class=\"line\">    $.post(url + <span class=\"string\">&quot;/login&quot;</span>, userData, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-2-18/img1.jpg\">\n\n<p>可以看到上面代码就是一个简单的回调地狱，每一个请求都是外层请求的回调。那么有什么问题呢？最明显的一点就是，代码可读性差，就像洋葱一样一层包裹着一层，改动一处，其余地方也要改动，可维护性也不好。</p>\n<p>当然回调地狱不止是这么一个问题，还有一个问题就是异常处理上的问题，即在回调中出现的异常无法被捕获，举个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwError</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;throw&quot;);</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;ERROR&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(throwError, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  <span class=\"comment\">// throwError();</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">  alert(e);<span class=\"comment\">//这里的异常无法捕获</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码运行后并不会弹出窗口，也就是无法被捕获到，那么类比到最开始举的三个请求的例子，我们不能直接在三个请求整体的外面写try/catch，因为这样无法捕获，而需要在每个回调内部写才能捕获到，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resFirst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(resFirst);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwError();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    alert(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $.get(url + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resSecond</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resSecond);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      throwError();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      alert(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $.post(url + <span class=\"string\">&quot;/login&quot;</span>, userData, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        throwError();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        alert(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样代码的弊端非常明显，代码量不仅大，而且异常非常不方便处理，那么下面就将使用Promise改写该段代码，解决上述问题。</p>\n<h2 id=\"Promise改写\"><a href=\"#Promise改写\" class=\"headerlink\" title=\"Promise改写\"></a>Promise改写</h2><p>Promise是一种异步编程解决方案，有三种状态<code>pending</code>，<code>fulfilled</code>，<code>rejected</code>，使用Promise就可以让上面的代码异步操作以同步操作的流程写出来，避免过多嵌套，每一个<code>then</code>都可以当成回调，根据链式调用，其参数是上一个取决于上一个链发送的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装的请求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reqJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数不会创建this，而是向上找</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"built_in\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// get请求</span></span><br><span class=\"line\">      client.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">      client.onreadystatechange = handler;</span><br><span class=\"line\">      client.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// post请求</span></span><br><span class=\"line\">      client.open(<span class=\"string\">&quot;POST&quot;</span>, url);</span><br><span class=\"line\">      client.onreadystatechange = handler;</span><br><span class=\"line\">      client.responseType = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">      client.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">      <span class=\"comment\">// client.send(data);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise改写</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">      <span class=\"comment\">// 上面reqJSON()封装的请求里面的resolve代表的是封装的成功，两者不一样</span></span><br><span class=\"line\">      <span class=\"comment\">// 下面的resolve代表请求成功后成功（可以理解为收到200后）</span></span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">      <span class=\"comment\">// reject(&quot;first接口报错&quot;);</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;second接口报错&quot;);</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;login接口报错&quot;);</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;捕捉到error:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的上部分是使用Promise实现Ajax操作，下部分则是三个请求，虽然还是有点丑，可以进一步封装，但是确实把嵌套打开了。并且最重要的是异常捕获没有问题，<code>resolve</code>代表可以继续往下进行，<code>reject</code>则表示出错，只需要在最后面写上<code>catch</code>既可以全部捕获</p>\n<h2 id=\"Promise实现原理\"><a href=\"#Promise实现原理\" class=\"headerlink\" title=\"Promise实现原理\"></a>Promise实现原理</h2><p>这里照着<a href=\"https://github.com/xieranmaya/blog/issues/3\">链接</a>敲了一遍，然后自己打断点跑了几遍，也算是理解了Promise的大致实现流程。</p>\n<p>首先分析一下，Promise一共三种状态，<code>pending</code>，<code>resolved</code>，<code>rejected</code>三种状态，然后常用方法两种<code>then</code>和<code>catch</code>。那么我们要做的就是将这些逐个实现。</p>\n<p>首先就是构造函数的编写，这里就不贴代码了，想看代码得可以去上面链接自己敲一遍。由上述可得，内部属性<code>status</code>用来存三种状态，<code>data</code>用来存<code>resolve</code>传入的数据。然后<code>Promise</code>接收的参数是一个函数，函数有两个参数，分别是<code>resolve</code>和<code>reject</code>两个方法。因此，构造函数还需要实现<code>resolve</code>和<code>reject</code>两个方法，方法功能是调用后将状态改变，以及将<code>resolve</code>或<code>reject</code>的参数存入<code>data</code>。这里有一个要注意的地方就是，<code>Promise</code>的状态一经改变，就会凝固，不会再改变了。所以这里要注意一下。</p>\n<p>然后就是<code>then</code>方法的实现，<code>then</code>方法接收两个参数，一个是成功回调函数，一个是失败回掉函数。而且这里的<code>then</code>返回的是新的Promise实例，但是属性还是之前的数据，原因是，假如是同一个对象，那么假如<code>then</code>的<code>promise</code>抛出一个异常的话，状态就变成了<code>rejected</code>，这就违背了<code>Promise</code>状态一经改变就不会再变的原则。之后<code>then</code>内部会调用传入的回掉函数，并改变此时的<code>promise</code>对象属性。</p>\n<p>需要注意的一点是，<code>new Promise(resolve =&gt; resolve(8)).then().then((value) =&gt; console.log(value)&#125;)</code>这种情况下需要值穿透，方法就是假如<code>then</code>不传参数的话，我们默认给它一个参数，让其return自己，就能实现值穿透。</p>\n<p><code>catch</code>方法的话实现起来就比较简单了，直接调用<code>then(null, onRejected)</code>即可。</p>\n<p>这里有一点要注意的，就是之前构造函数里还有两个属性<code>_self.onResolvedCallbacks</code>，<code>_self.onRejectedCallbacks</code>这两个属性分别是数组，存的是函数。之前一直不了解两个属性的作用。后来仔细查看之后，这两个属性存的是状态<code>pending</code>情况下的回调。那么是什么意思呢，意思就是说当触发<code>then</code>方法的时候，<code>status</code>有可能是<code>pending</code>状态，那么这个时候并不知道是要调用成功回调还是失败回调。拿方案就是都存下来，当后面状态改变的时候，当触发<code>resolve</code>时，会遍历<code>callback</code>数组，并执行函数。我们可以用一段代码，打断点测试一下，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> MPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;MPromise&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;then回调&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.resolve(<span class=\"string\">&quot;second&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码的第一个then时，状态还是pending，就会触发存入callback的操作。而且后面有一个无参数的then，可以测试值穿透的情况。</p>\n<p>那么实现原理大概就是这样了，自己动手写一遍就很清楚了。其实我上面讲的肯定很乱，没有代码空口白说，直接看估计也看不懂。主要是为了自己梳理一下思路吧，想具体了解原理的请点上述链接自行查看。</p>\n<h2 id=\"Generator改写\"><a href=\"#Generator改写\" class=\"headerlink\" title=\"Generator改写\"></a>Generator改写</h2><p>Generator封装了多个内部状态，其使用<code>next()</code>来继续运行，使用<code>throw()</code>来抛出错误。内部使用<code>yield</code>来定义内部状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">reqFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.next();&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;error&#x27;</span>));&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.next();&#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = reqFun();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n\n<p>代码如上图，发送请求依然是用上面Promise封装的ajax操作，优点代码更加简洁，而且也解决了在外部使用一个<code>try/catch</code>就能捕获内部所有状态</p>\n<p>其中需要手动执行函数，并使用<code>next()</code>让其继续运行。当然可以使用co模块让其自动运行，这里就不再赘述</p>\n<h2 id=\"async函数改写\"><a href=\"#async函数改写\" class=\"headerlink\" title=\"async函数改写\"></a>async函数改写</h2><p>async函数使异步操作更加方便，简单讲就是Generator函数的语法糖，其内置了执行器，会自动执行结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reqFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;error&quot;</span>);&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);&#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">reqFun();</span><br></pre></td></tr></table></figure>\n\n<p>和上面Generator改写的很相似，async有更广的适应性，其返回值是Promise，也就意味着定义的<code>reqFun()</code>函数可以继续<code>then()</code>或者<code>catch()</code>，可以构造更加合理的代码结构</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>文中只是整理了一下基本的使用，以及自己的一些见解吧，也参考了很多博客。也算是对ES6的一些内容的进一步实践吧</p>\n","site":{"data":{}},"excerpt":"<p>文中将简单整理一下js异步编程的方法。关于js异步编程，早期很容易出现回调地狱这一现象，也出现了一些相应的解决办法，从<code>Promise</code>到<code>Generator</code>再到<code>async/await</code>,解决了回调地狱这一问题，当然本文只是浅显的举出一些实例，以及个人简单的理解。</p>\n<p>异步编程这一块确实还有很多可以继续深入的地方。</p>","more":"<h2 id=\"异步编程方法\"><a href=\"#异步编程方法\" class=\"headerlink\" title=\"异步编程方法\"></a>异步编程方法</h2><ul>\n<li>回调函数</li>\n<li>事件监听</li>\n<li>Promise对象</li>\n<li>Generator函数</li>\n<li>Generator的语法糖async/await</li>\n</ul>\n<p>文中将着重放在<code>Promise</code>，<code>Generator函数</code>，<code>async/await</code>这三个方面进行举例</p>\n<h2 id=\"回调地狱产生\"><a href=\"#回调地狱产生\" class=\"headerlink\" title=\"回调地狱产生\"></a>回调地狱产生</h2><p>这里首先使用node随便写三个接口测试，具体代码就不贴了，两个Get请求，一个Post请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resFirst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(resFirst);</span><br><span class=\"line\">  $.get(url + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resSecond</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resSecond);</span><br><span class=\"line\">    $.post(url + <span class=\"string\">&quot;/login&quot;</span>, userData, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-2-18/img1.jpg\">\n\n<p>可以看到上面代码就是一个简单的回调地狱，每一个请求都是外层请求的回调。那么有什么问题呢？最明显的一点就是，代码可读性差，就像洋葱一样一层包裹着一层，改动一处，其余地方也要改动，可维护性也不好。</p>\n<p>当然回调地狱不止是这么一个问题，还有一个问题就是异常处理上的问题，即在回调中出现的异常无法被捕获，举个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwError</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;throw&quot;);</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;ERROR&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(throwError, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  <span class=\"comment\">// throwError();</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">  alert(e);<span class=\"comment\">//这里的异常无法捕获</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码运行后并不会弹出窗口，也就是无法被捕获到，那么类比到最开始举的三个请求的例子，我们不能直接在三个请求整体的外面写try/catch，因为这样无法捕获，而需要在每个回调内部写才能捕获到，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resFirst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(resFirst);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwError();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    alert(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $.get(url + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resSecond</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(resSecond);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      throwError();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      alert(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $.post(url + <span class=\"string\">&quot;/login&quot;</span>, userData, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        throwError();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        alert(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样代码的弊端非常明显，代码量不仅大，而且异常非常不方便处理，那么下面就将使用Promise改写该段代码，解决上述问题。</p>\n<h2 id=\"Promise改写\"><a href=\"#Promise改写\" class=\"headerlink\" title=\"Promise改写\"></a>Promise改写</h2><p>Promise是一种异步编程解决方案，有三种状态<code>pending</code>，<code>fulfilled</code>，<code>rejected</code>，使用Promise就可以让上面的代码异步操作以同步操作的流程写出来，避免过多嵌套，每一个<code>then</code>都可以当成回调，根据链式调用，其参数是上一个取决于上一个链发送的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装的请求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reqJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数不会创建this，而是向上找</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"built_in\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// get请求</span></span><br><span class=\"line\">      client.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">      client.onreadystatechange = handler;</span><br><span class=\"line\">      client.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// post请求</span></span><br><span class=\"line\">      client.open(<span class=\"string\">&quot;POST&quot;</span>, url);</span><br><span class=\"line\">      client.onreadystatechange = handler;</span><br><span class=\"line\">      client.responseType = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">      client.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">      client.send(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">      <span class=\"comment\">// client.send(data);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise改写</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">      <span class=\"comment\">// 上面reqJSON()封装的请求里面的resolve代表的是封装的成功，两者不一样</span></span><br><span class=\"line\">      <span class=\"comment\">// 下面的resolve代表请求成功后成功（可以理解为收到200后）</span></span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">      <span class=\"comment\">// reject(&quot;first接口报错&quot;);</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;second接口报错&quot;);</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;login接口报错&quot;);</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;捕捉到error:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的上部分是使用Promise实现Ajax操作，下部分则是三个请求，虽然还是有点丑，可以进一步封装，但是确实把嵌套打开了。并且最重要的是异常捕获没有问题，<code>resolve</code>代表可以继续往下进行，<code>reject</code>则表示出错，只需要在最后面写上<code>catch</code>既可以全部捕获</p>\n<h2 id=\"Promise实现原理\"><a href=\"#Promise实现原理\" class=\"headerlink\" title=\"Promise实现原理\"></a>Promise实现原理</h2><p>这里照着<a href=\"https://github.com/xieranmaya/blog/issues/3\">链接</a>敲了一遍，然后自己打断点跑了几遍，也算是理解了Promise的大致实现流程。</p>\n<p>首先分析一下，Promise一共三种状态，<code>pending</code>，<code>resolved</code>，<code>rejected</code>三种状态，然后常用方法两种<code>then</code>和<code>catch</code>。那么我们要做的就是将这些逐个实现。</p>\n<p>首先就是构造函数的编写，这里就不贴代码了，想看代码得可以去上面链接自己敲一遍。由上述可得，内部属性<code>status</code>用来存三种状态，<code>data</code>用来存<code>resolve</code>传入的数据。然后<code>Promise</code>接收的参数是一个函数，函数有两个参数，分别是<code>resolve</code>和<code>reject</code>两个方法。因此，构造函数还需要实现<code>resolve</code>和<code>reject</code>两个方法，方法功能是调用后将状态改变，以及将<code>resolve</code>或<code>reject</code>的参数存入<code>data</code>。这里有一个要注意的地方就是，<code>Promise</code>的状态一经改变，就会凝固，不会再改变了。所以这里要注意一下。</p>\n<p>然后就是<code>then</code>方法的实现，<code>then</code>方法接收两个参数，一个是成功回调函数，一个是失败回掉函数。而且这里的<code>then</code>返回的是新的Promise实例，但是属性还是之前的数据，原因是，假如是同一个对象，那么假如<code>then</code>的<code>promise</code>抛出一个异常的话，状态就变成了<code>rejected</code>，这就违背了<code>Promise</code>状态一经改变就不会再变的原则。之后<code>then</code>内部会调用传入的回掉函数，并改变此时的<code>promise</code>对象属性。</p>\n<p>需要注意的一点是，<code>new Promise(resolve =&gt; resolve(8)).then().then((value) =&gt; console.log(value)&#125;)</code>这种情况下需要值穿透，方法就是假如<code>then</code>不传参数的话，我们默认给它一个参数，让其return自己，就能实现值穿透。</p>\n<p><code>catch</code>方法的话实现起来就比较简单了，直接调用<code>then(null, onRejected)</code>即可。</p>\n<p>这里有一点要注意的，就是之前构造函数里还有两个属性<code>_self.onResolvedCallbacks</code>，<code>_self.onRejectedCallbacks</code>这两个属性分别是数组，存的是函数。之前一直不了解两个属性的作用。后来仔细查看之后，这两个属性存的是状态<code>pending</code>情况下的回调。那么是什么意思呢，意思就是说当触发<code>then</code>方法的时候，<code>status</code>有可能是<code>pending</code>状态，那么这个时候并不知道是要调用成功回调还是失败回调。拿方案就是都存下来，当后面状态改变的时候，当触发<code>resolve</code>时，会遍历<code>callback</code>数组，并执行函数。我们可以用一段代码，打断点测试一下，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> MPromise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;MPromise&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;then回调&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promise.resolve(<span class=\"string\">&quot;second&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码的第一个then时，状态还是pending，就会触发存入callback的操作。而且后面有一个无参数的then，可以测试值穿透的情况。</p>\n<p>那么实现原理大概就是这样了，自己动手写一遍就很清楚了。其实我上面讲的肯定很乱，没有代码空口白说，直接看估计也看不懂。主要是为了自己梳理一下思路吧，想具体了解原理的请点上述链接自行查看。</p>\n<h2 id=\"Generator改写\"><a href=\"#Generator改写\" class=\"headerlink\" title=\"Generator改写\"></a>Generator改写</h2><p>Generator封装了多个内部状态，其使用<code>next()</code>来继续运行，使用<code>throw()</code>来抛出错误。内部使用<code>yield</code>来定义内部状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">reqFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.next();&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;error&#x27;</span>));&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); it.next();&#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = reqFun();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n\n<p>代码如上图，发送请求依然是用上面Promise封装的ajax操作，优点代码更加简洁，而且也解决了在外部使用一个<code>try/catch</code>就能捕获内部所有状态</p>\n<p>其中需要手动执行函数，并使用<code>next()</code>让其继续运行。当然可以使用co模块让其自动运行，这里就不再赘述</p>\n<h2 id=\"async函数改写\"><a href=\"#async函数改写\" class=\"headerlink\" title=\"async函数改写\"></a>async函数改写</h2><p>async函数使异步操作更加方便，简单讲就是Generator函数的语法糖，其内置了执行器，会自动执行结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reqFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/first&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/second&quot;</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json); <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;error&quot;</span>);&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> reqJSON(localUrl + <span class=\"string\">&quot;/login&quot;</span>, userData)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Contents: &#x27;</span>, json);&#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">reqFun();</span><br></pre></td></tr></table></figure>\n\n<p>和上面Generator改写的很相似，async有更广的适应性，其返回值是Promise，也就意味着定义的<code>reqFun()</code>函数可以继续<code>then()</code>或者<code>catch()</code>，可以构造更加合理的代码结构</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>文中只是整理了一下基本的使用，以及自己的一些见解吧，也参考了很多博客。也算是对ES6的一些内容的进一步实践吧</p>"},{"title":"记一次项目的优化","date":"2019-03-12T11:41:26.000Z","toc":true,"_content":"\n性能很重要，所以优化一直是一个很大的话题。而且根据项目和需求的不同，优化的策略也不同。项目优化之前做的一直不多，这次着手准备优化一下之前写的一个项目。\n\n<!--more-->\n\n## 字体渲染优化\n\n### 分析\n\n先贴一张最开始的分析图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/origin.jpg\">\n\n首先分析优化的方向，打开Network分析一下资源的加载情况，可以非常明显的看到字体加载上花了很长时间，平均加载8s，甚至更久。也因此在用户没有缓存的情况下，由于字体没有加载出来，而导致字体出现时间比其它DOM出现时间晚的多，而且首屏加载所等待的时间较长。因此，首先优化字体的渲染势在必行。\n\n### 方案\n\n分析出来首要优化目标之后，就是针对情况进行优化。其中我发现了一个现象，按道理讲字体渲染出来应该是在字体文件加载完毕之后才会出现。但是实际情况并非如此，而是大致在其它DOM出现后的近4s时就已经出现了。\n\n由于首页（登录页）字体比较少，我并未发现此时渲染出来的字体和下载字体的区别。直到偶然看一些字体优化策略的文章之后才发现，浏览器实行的是FOUT和FOIT策略（文章上讲IE和Edge实行FOUT策略，其它实行FOIT策略），但我经过测试Chrome下并非完全的FOIT策略，而是采取FOUT和FOIT折中的策略。即3s内如果字体加载出来，那么加载出来之前隐藏文本，如果3s内没有加载出来，那么则显示降级字体。\n\n那么此时了解了浏览器对字体渲染的策略之后，就可以下手了。项目里引入了fontfaceobserver，一个字体加载器。可在字体加载完后，执行编写的js。\n\n我们几乎可以确定，在无缓存情况下，3s内Chrome下字体文件加载不出来（Chrome需要近7s，而Firefox仅需2s多）。即使能加载出来，也需要一定时间，和其它DOM显示有一定时间间隔。那么如何让他们同时渲染出来？中间也考虑了几种方案\n\n* 方案一：登录页默认使用安全字体，0.5s内如果能加载出来下载字体，则使用下载字体，否则登陆页就使用安全字体。\n\n该方案其实就是FOIT策略的变形，不过不同之处是加载不出来就不换了（因为登录页就没几个字，字体切换如果不细看的话几乎看出来。）但是并不是FOIT策略，因为使用FOIT策略的话，字体切换虽然不细看看不出来，但是假如用户在填写账号密码的时候字体发生了切换，那么这个时候是非常明显的，几乎可以很明显的察觉到字体抖动，体验非常不好。因此我将时间点缩到了0.5s（如果有字体缓存，那么还是可以直接使用下载字体）。\n\n这个方案虽然比较合适，但是这个方案也有缺点，大部分情况下（用户进入时是有字体缓存的），那么登陆页在0.5s时会发生一个轻微的字体抖动，虽然在不知情的情况下几乎察觉不出来，但在我看来仍不是一个最佳方案。\n\n* 方案二：登录页默认使用下载字体，如果0.5s内不能加载出来，那么则使用降级安全字体。\n\n该方案是方案一的另一种思路，也就是FOUT的变形，不同之处是将3s缩减到了0.5s，经过多次测试之后，缩减到了0.1s，0.1s在有缓存的情况下足以加载出来（再小的话有缓存也加载不出来）。该方案可以说D字体和其它DOM同时出现，可以说是体验非常好了。而且等用户将登录信息填写完整之后，字体已经加载好了，进入内容页直接就是下载字体。\n\n### 其它\n\n同时在这一阶段，将ttf字体转成了woff2和woff，直接缩小了一半多。同时也将图片进行了压缩，同样压缩了一半多。同时服务端又开启了gzip将js和css文件进一步压缩，加载速度又提升了一截。中间也用了uglifyjs试图进一步压缩js，但是效果并不明显，应该是编译之后已经压缩过一次的缘故。\n\n贴一下第一阶段优化之后的加载情况\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/compress-res.jpg\">\n\n可以看到，提升了很多，几乎可以说是天壤之别。但其实除了字体渲染策略上考虑了一番以外，别的对资源的压缩之类的并没有花很多功夫，但是提升确实是很显著的。因此静态资源的压缩确实是对优化项目有很大的提高。\n\n\n## 懒加载\n\n### 分析\n\n首先，项目可以简单分为前台页面（一般用户使用的），以及后台管理页面（管理员管理上传之类的）。那么，此时采用单页应用就存在一个问题，那就是，对于普通用户来讲，是不需要进入后台的，但是单页应用不做处理的时候，在首屏直接会将所有文件加载，这对用户体验来讲，是不合适的。因此，需要进行更改。\n\n方案1：懒加载，即将后台的一个大组件以及其包含的三个组件懒加载，令其空闲时加载，减少首屏引入的包体积。\n\n先放一张拆分后的结构，当然经过拆分后发现其实我把问题想简单了，想当然的觉得将共用的抽离出来是最优解。但其实未必，后面也将写一些优化过程中产生的一些想法。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/lazy-load-res.jpg\">\n\n这里vue-cli默认为初始化渲染需要的文件生成`preload`提示，即预加载。我们这里使用vue-router的懒加载，vue-cli会将将异步组件单独打包生成chunk，并添加`prefetch`提示，打开network分析可看出，带有`prefetch`的会在后面加载，当用户进入后台时，此时发起的请求会直接从缓存中拿出来。\n\n中间也发现了一个小问题，发现在开发环境下，css按照style里引入，而在生产环境下是用link引入的。经查阅后才发现`MiniCssExtractPlugin`这个插件在开发环境下热重载会有问题，所以默认在生产环境下才开启。这里也发现了使用vue-cli确实方便了很多，但是也有很多东西没有明显的配置文件，并不清楚内部如何配置的，后面也是自己都实现了一遍，才大致了解。\n\n继续说懒加载，如此操作产生一个问题，每一个懒加载的组件都会被分成单独的chunk，发现其单独的js和css的chunk里都有重复引入的部分，如下图所示。也就是说进入后台的三个页面，会重复加载其共用的组件。这里经过查阅发现webpack4的`SplitChunksPlugin`插件默认最下30k才会单独打包。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/example1.jpg\">\n\n\n在最开始，我并不理解webpack的默认策略为什么要这样制定，重复引入组件按道理讲肯定是造成了一些损耗。但其实少考虑了一点，按目前所作的方法，将懒加载的组件单独chunk，但其实每一个chunk才不到8k，甚至有的1k，2k这样子。那么我们为了不重复引入这2k，3k的组件而将其单独抽离出来一个chunk-common，是会额外增加一次http请求的，这样其实未必更优。\n\n其实关于优化，我认为是没有最优的方法的，只有根据业务和需求的不同，尽可能地采取最合适或者说最能适应大部分用户的方案。\n\n在思考代码分离方案时候，首先第三方引入的依赖可以单独打成一个chunk，比如`vue`,`vuex`等等这些，这些几乎每个组件都要使用，将其和自己写的业务组件打成一个包很不合理。然后就是引用频率较高的组件或者文件可以单独打成一个chunk，但是还要根据其包的大小具体考虑是否需要单独打包。然后就是一些懒加载引入的单独业务代码了。这里有一篇文章，觉得整理的很好，看后也有很多收获->[链接](https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc)\n\n我上面把包拆分的太颗粒化了，其实未必比都打到一个包里更优，因为后台页面的大小其实并没有很大。那么后面我将尝试，将多个chunk适当合并，即减少首屏加载，也同样减少过多chunk造成的不必要的http请求。\n\n","source":"_posts/25. 使用webpack做一次项目优化.md","raw":"---\ntitle: 记一次项目的优化\ndate: 2019-03-12 19:41:26\ntoc: true\ncategories:\n- 前端\ntags: \n- 优化\n- 项目\n- webpack\n- 性能\n---\n\n性能很重要，所以优化一直是一个很大的话题。而且根据项目和需求的不同，优化的策略也不同。项目优化之前做的一直不多，这次着手准备优化一下之前写的一个项目。\n\n<!--more-->\n\n## 字体渲染优化\n\n### 分析\n\n先贴一张最开始的分析图\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/origin.jpg\">\n\n首先分析优化的方向，打开Network分析一下资源的加载情况，可以非常明显的看到字体加载上花了很长时间，平均加载8s，甚至更久。也因此在用户没有缓存的情况下，由于字体没有加载出来，而导致字体出现时间比其它DOM出现时间晚的多，而且首屏加载所等待的时间较长。因此，首先优化字体的渲染势在必行。\n\n### 方案\n\n分析出来首要优化目标之后，就是针对情况进行优化。其中我发现了一个现象，按道理讲字体渲染出来应该是在字体文件加载完毕之后才会出现。但是实际情况并非如此，而是大致在其它DOM出现后的近4s时就已经出现了。\n\n由于首页（登录页）字体比较少，我并未发现此时渲染出来的字体和下载字体的区别。直到偶然看一些字体优化策略的文章之后才发现，浏览器实行的是FOUT和FOIT策略（文章上讲IE和Edge实行FOUT策略，其它实行FOIT策略），但我经过测试Chrome下并非完全的FOIT策略，而是采取FOUT和FOIT折中的策略。即3s内如果字体加载出来，那么加载出来之前隐藏文本，如果3s内没有加载出来，那么则显示降级字体。\n\n那么此时了解了浏览器对字体渲染的策略之后，就可以下手了。项目里引入了fontfaceobserver，一个字体加载器。可在字体加载完后，执行编写的js。\n\n我们几乎可以确定，在无缓存情况下，3s内Chrome下字体文件加载不出来（Chrome需要近7s，而Firefox仅需2s多）。即使能加载出来，也需要一定时间，和其它DOM显示有一定时间间隔。那么如何让他们同时渲染出来？中间也考虑了几种方案\n\n* 方案一：登录页默认使用安全字体，0.5s内如果能加载出来下载字体，则使用下载字体，否则登陆页就使用安全字体。\n\n该方案其实就是FOIT策略的变形，不过不同之处是加载不出来就不换了（因为登录页就没几个字，字体切换如果不细看的话几乎看出来。）但是并不是FOIT策略，因为使用FOIT策略的话，字体切换虽然不细看看不出来，但是假如用户在填写账号密码的时候字体发生了切换，那么这个时候是非常明显的，几乎可以很明显的察觉到字体抖动，体验非常不好。因此我将时间点缩到了0.5s（如果有字体缓存，那么还是可以直接使用下载字体）。\n\n这个方案虽然比较合适，但是这个方案也有缺点，大部分情况下（用户进入时是有字体缓存的），那么登陆页在0.5s时会发生一个轻微的字体抖动，虽然在不知情的情况下几乎察觉不出来，但在我看来仍不是一个最佳方案。\n\n* 方案二：登录页默认使用下载字体，如果0.5s内不能加载出来，那么则使用降级安全字体。\n\n该方案是方案一的另一种思路，也就是FOUT的变形，不同之处是将3s缩减到了0.5s，经过多次测试之后，缩减到了0.1s，0.1s在有缓存的情况下足以加载出来（再小的话有缓存也加载不出来）。该方案可以说D字体和其它DOM同时出现，可以说是体验非常好了。而且等用户将登录信息填写完整之后，字体已经加载好了，进入内容页直接就是下载字体。\n\n### 其它\n\n同时在这一阶段，将ttf字体转成了woff2和woff，直接缩小了一半多。同时也将图片进行了压缩，同样压缩了一半多。同时服务端又开启了gzip将js和css文件进一步压缩，加载速度又提升了一截。中间也用了uglifyjs试图进一步压缩js，但是效果并不明显，应该是编译之后已经压缩过一次的缘故。\n\n贴一下第一阶段优化之后的加载情况\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/compress-res.jpg\">\n\n可以看到，提升了很多，几乎可以说是天壤之别。但其实除了字体渲染策略上考虑了一番以外，别的对资源的压缩之类的并没有花很多功夫，但是提升确实是很显著的。因此静态资源的压缩确实是对优化项目有很大的提高。\n\n\n## 懒加载\n\n### 分析\n\n首先，项目可以简单分为前台页面（一般用户使用的），以及后台管理页面（管理员管理上传之类的）。那么，此时采用单页应用就存在一个问题，那就是，对于普通用户来讲，是不需要进入后台的，但是单页应用不做处理的时候，在首屏直接会将所有文件加载，这对用户体验来讲，是不合适的。因此，需要进行更改。\n\n方案1：懒加载，即将后台的一个大组件以及其包含的三个组件懒加载，令其空闲时加载，减少首屏引入的包体积。\n\n先放一张拆分后的结构，当然经过拆分后发现其实我把问题想简单了，想当然的觉得将共用的抽离出来是最优解。但其实未必，后面也将写一些优化过程中产生的一些想法。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/lazy-load-res.jpg\">\n\n这里vue-cli默认为初始化渲染需要的文件生成`preload`提示，即预加载。我们这里使用vue-router的懒加载，vue-cli会将将异步组件单独打包生成chunk，并添加`prefetch`提示，打开network分析可看出，带有`prefetch`的会在后面加载，当用户进入后台时，此时发起的请求会直接从缓存中拿出来。\n\n中间也发现了一个小问题，发现在开发环境下，css按照style里引入，而在生产环境下是用link引入的。经查阅后才发现`MiniCssExtractPlugin`这个插件在开发环境下热重载会有问题，所以默认在生产环境下才开启。这里也发现了使用vue-cli确实方便了很多，但是也有很多东西没有明显的配置文件，并不清楚内部如何配置的，后面也是自己都实现了一遍，才大致了解。\n\n继续说懒加载，如此操作产生一个问题，每一个懒加载的组件都会被分成单独的chunk，发现其单独的js和css的chunk里都有重复引入的部分，如下图所示。也就是说进入后台的三个页面，会重复加载其共用的组件。这里经过查阅发现webpack4的`SplitChunksPlugin`插件默认最下30k才会单独打包。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/example1.jpg\">\n\n\n在最开始，我并不理解webpack的默认策略为什么要这样制定，重复引入组件按道理讲肯定是造成了一些损耗。但其实少考虑了一点，按目前所作的方法，将懒加载的组件单独chunk，但其实每一个chunk才不到8k，甚至有的1k，2k这样子。那么我们为了不重复引入这2k，3k的组件而将其单独抽离出来一个chunk-common，是会额外增加一次http请求的，这样其实未必更优。\n\n其实关于优化，我认为是没有最优的方法的，只有根据业务和需求的不同，尽可能地采取最合适或者说最能适应大部分用户的方案。\n\n在思考代码分离方案时候，首先第三方引入的依赖可以单独打成一个chunk，比如`vue`,`vuex`等等这些，这些几乎每个组件都要使用，将其和自己写的业务组件打成一个包很不合理。然后就是引用频率较高的组件或者文件可以单独打成一个chunk，但是还要根据其包的大小具体考虑是否需要单独打包。然后就是一些懒加载引入的单独业务代码了。这里有一篇文章，觉得整理的很好，看后也有很多收获->[链接](https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc)\n\n我上面把包拆分的太颗粒化了，其实未必比都打到一个包里更优，因为后台页面的大小其实并没有很大。那么后面我将尝试，将多个chunk适当合并，即减少首屏加载，也同样减少过多chunk造成的不必要的http请求。\n\n","slug":"25. 使用webpack做一次项目优化","published":1,"updated":"2021-09-30T06:47:26.858Z","_id":"cku41le8s000xidp28xyd357x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>性能很重要，所以优化一直是一个很大的话题。而且根据项目和需求的不同，优化的策略也不同。项目优化之前做的一直不多，这次着手准备优化一下之前写的一个项目。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"字体渲染优化\"><a href=\"#字体渲染优化\" class=\"headerlink\" title=\"字体渲染优化\"></a>字体渲染优化</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>先贴一张最开始的分析图</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/origin.jpg\">\n\n<p>首先分析优化的方向，打开Network分析一下资源的加载情况，可以非常明显的看到字体加载上花了很长时间，平均加载8s，甚至更久。也因此在用户没有缓存的情况下，由于字体没有加载出来，而导致字体出现时间比其它DOM出现时间晚的多，而且首屏加载所等待的时间较长。因此，首先优化字体的渲染势在必行。</p>\n<h3 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h3><p>分析出来首要优化目标之后，就是针对情况进行优化。其中我发现了一个现象，按道理讲字体渲染出来应该是在字体文件加载完毕之后才会出现。但是实际情况并非如此，而是大致在其它DOM出现后的近4s时就已经出现了。</p>\n<p>由于首页（登录页）字体比较少，我并未发现此时渲染出来的字体和下载字体的区别。直到偶然看一些字体优化策略的文章之后才发现，浏览器实行的是FOUT和FOIT策略（文章上讲IE和Edge实行FOUT策略，其它实行FOIT策略），但我经过测试Chrome下并非完全的FOIT策略，而是采取FOUT和FOIT折中的策略。即3s内如果字体加载出来，那么加载出来之前隐藏文本，如果3s内没有加载出来，那么则显示降级字体。</p>\n<p>那么此时了解了浏览器对字体渲染的策略之后，就可以下手了。项目里引入了fontfaceobserver，一个字体加载器。可在字体加载完后，执行编写的js。</p>\n<p>我们几乎可以确定，在无缓存情况下，3s内Chrome下字体文件加载不出来（Chrome需要近7s，而Firefox仅需2s多）。即使能加载出来，也需要一定时间，和其它DOM显示有一定时间间隔。那么如何让他们同时渲染出来？中间也考虑了几种方案</p>\n<ul>\n<li>方案一：登录页默认使用安全字体，0.5s内如果能加载出来下载字体，则使用下载字体，否则登陆页就使用安全字体。</li>\n</ul>\n<p>该方案其实就是FOIT策略的变形，不过不同之处是加载不出来就不换了（因为登录页就没几个字，字体切换如果不细看的话几乎看出来。）但是并不是FOIT策略，因为使用FOIT策略的话，字体切换虽然不细看看不出来，但是假如用户在填写账号密码的时候字体发生了切换，那么这个时候是非常明显的，几乎可以很明显的察觉到字体抖动，体验非常不好。因此我将时间点缩到了0.5s（如果有字体缓存，那么还是可以直接使用下载字体）。</p>\n<p>这个方案虽然比较合适，但是这个方案也有缺点，大部分情况下（用户进入时是有字体缓存的），那么登陆页在0.5s时会发生一个轻微的字体抖动，虽然在不知情的情况下几乎察觉不出来，但在我看来仍不是一个最佳方案。</p>\n<ul>\n<li>方案二：登录页默认使用下载字体，如果0.5s内不能加载出来，那么则使用降级安全字体。</li>\n</ul>\n<p>该方案是方案一的另一种思路，也就是FOUT的变形，不同之处是将3s缩减到了0.5s，经过多次测试之后，缩减到了0.1s，0.1s在有缓存的情况下足以加载出来（再小的话有缓存也加载不出来）。该方案可以说D字体和其它DOM同时出现，可以说是体验非常好了。而且等用户将登录信息填写完整之后，字体已经加载好了，进入内容页直接就是下载字体。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>同时在这一阶段，将ttf字体转成了woff2和woff，直接缩小了一半多。同时也将图片进行了压缩，同样压缩了一半多。同时服务端又开启了gzip将js和css文件进一步压缩，加载速度又提升了一截。中间也用了uglifyjs试图进一步压缩js，但是效果并不明显，应该是编译之后已经压缩过一次的缘故。</p>\n<p>贴一下第一阶段优化之后的加载情况</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/compress-res.jpg\">\n\n<p>可以看到，提升了很多，几乎可以说是天壤之别。但其实除了字体渲染策略上考虑了一番以外，别的对资源的压缩之类的并没有花很多功夫，但是提升确实是很显著的。因此静态资源的压缩确实是对优化项目有很大的提高。</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>首先，项目可以简单分为前台页面（一般用户使用的），以及后台管理页面（管理员管理上传之类的）。那么，此时采用单页应用就存在一个问题，那就是，对于普通用户来讲，是不需要进入后台的，但是单页应用不做处理的时候，在首屏直接会将所有文件加载，这对用户体验来讲，是不合适的。因此，需要进行更改。</p>\n<p>方案1：懒加载，即将后台的一个大组件以及其包含的三个组件懒加载，令其空闲时加载，减少首屏引入的包体积。</p>\n<p>先放一张拆分后的结构，当然经过拆分后发现其实我把问题想简单了，想当然的觉得将共用的抽离出来是最优解。但其实未必，后面也将写一些优化过程中产生的一些想法。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/lazy-load-res.jpg\">\n\n<p>这里vue-cli默认为初始化渲染需要的文件生成<code>preload</code>提示，即预加载。我们这里使用vue-router的懒加载，vue-cli会将将异步组件单独打包生成chunk，并添加<code>prefetch</code>提示，打开network分析可看出，带有<code>prefetch</code>的会在后面加载，当用户进入后台时，此时发起的请求会直接从缓存中拿出来。</p>\n<p>中间也发现了一个小问题，发现在开发环境下，css按照style里引入，而在生产环境下是用link引入的。经查阅后才发现<code>MiniCssExtractPlugin</code>这个插件在开发环境下热重载会有问题，所以默认在生产环境下才开启。这里也发现了使用vue-cli确实方便了很多，但是也有很多东西没有明显的配置文件，并不清楚内部如何配置的，后面也是自己都实现了一遍，才大致了解。</p>\n<p>继续说懒加载，如此操作产生一个问题，每一个懒加载的组件都会被分成单独的chunk，发现其单独的js和css的chunk里都有重复引入的部分，如下图所示。也就是说进入后台的三个页面，会重复加载其共用的组件。这里经过查阅发现webpack4的<code>SplitChunksPlugin</code>插件默认最下30k才会单独打包。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/example1.jpg\">\n\n\n<p>在最开始，我并不理解webpack的默认策略为什么要这样制定，重复引入组件按道理讲肯定是造成了一些损耗。但其实少考虑了一点，按目前所作的方法，将懒加载的组件单独chunk，但其实每一个chunk才不到8k，甚至有的1k，2k这样子。那么我们为了不重复引入这2k，3k的组件而将其单独抽离出来一个chunk-common，是会额外增加一次http请求的，这样其实未必更优。</p>\n<p>其实关于优化，我认为是没有最优的方法的，只有根据业务和需求的不同，尽可能地采取最合适或者说最能适应大部分用户的方案。</p>\n<p>在思考代码分离方案时候，首先第三方引入的依赖可以单独打成一个chunk，比如<code>vue</code>,<code>vuex</code>等等这些，这些几乎每个组件都要使用，将其和自己写的业务组件打成一个包很不合理。然后就是引用频率较高的组件或者文件可以单独打成一个chunk，但是还要根据其包的大小具体考虑是否需要单独打包。然后就是一些懒加载引入的单独业务代码了。这里有一篇文章，觉得整理的很好，看后也有很多收获-&gt;<a href=\"https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc\">链接</a></p>\n<p>我上面把包拆分的太颗粒化了，其实未必比都打到一个包里更优，因为后台页面的大小其实并没有很大。那么后面我将尝试，将多个chunk适当合并，即减少首屏加载，也同样减少过多chunk造成的不必要的http请求。</p>\n","site":{"data":{}},"excerpt":"<p>性能很重要，所以优化一直是一个很大的话题。而且根据项目和需求的不同，优化的策略也不同。项目优化之前做的一直不多，这次着手准备优化一下之前写的一个项目。</p>","more":"<h2 id=\"字体渲染优化\"><a href=\"#字体渲染优化\" class=\"headerlink\" title=\"字体渲染优化\"></a>字体渲染优化</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>先贴一张最开始的分析图</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/origin.jpg\">\n\n<p>首先分析优化的方向，打开Network分析一下资源的加载情况，可以非常明显的看到字体加载上花了很长时间，平均加载8s，甚至更久。也因此在用户没有缓存的情况下，由于字体没有加载出来，而导致字体出现时间比其它DOM出现时间晚的多，而且首屏加载所等待的时间较长。因此，首先优化字体的渲染势在必行。</p>\n<h3 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h3><p>分析出来首要优化目标之后，就是针对情况进行优化。其中我发现了一个现象，按道理讲字体渲染出来应该是在字体文件加载完毕之后才会出现。但是实际情况并非如此，而是大致在其它DOM出现后的近4s时就已经出现了。</p>\n<p>由于首页（登录页）字体比较少，我并未发现此时渲染出来的字体和下载字体的区别。直到偶然看一些字体优化策略的文章之后才发现，浏览器实行的是FOUT和FOIT策略（文章上讲IE和Edge实行FOUT策略，其它实行FOIT策略），但我经过测试Chrome下并非完全的FOIT策略，而是采取FOUT和FOIT折中的策略。即3s内如果字体加载出来，那么加载出来之前隐藏文本，如果3s内没有加载出来，那么则显示降级字体。</p>\n<p>那么此时了解了浏览器对字体渲染的策略之后，就可以下手了。项目里引入了fontfaceobserver，一个字体加载器。可在字体加载完后，执行编写的js。</p>\n<p>我们几乎可以确定，在无缓存情况下，3s内Chrome下字体文件加载不出来（Chrome需要近7s，而Firefox仅需2s多）。即使能加载出来，也需要一定时间，和其它DOM显示有一定时间间隔。那么如何让他们同时渲染出来？中间也考虑了几种方案</p>\n<ul>\n<li>方案一：登录页默认使用安全字体，0.5s内如果能加载出来下载字体，则使用下载字体，否则登陆页就使用安全字体。</li>\n</ul>\n<p>该方案其实就是FOIT策略的变形，不过不同之处是加载不出来就不换了（因为登录页就没几个字，字体切换如果不细看的话几乎看出来。）但是并不是FOIT策略，因为使用FOIT策略的话，字体切换虽然不细看看不出来，但是假如用户在填写账号密码的时候字体发生了切换，那么这个时候是非常明显的，几乎可以很明显的察觉到字体抖动，体验非常不好。因此我将时间点缩到了0.5s（如果有字体缓存，那么还是可以直接使用下载字体）。</p>\n<p>这个方案虽然比较合适，但是这个方案也有缺点，大部分情况下（用户进入时是有字体缓存的），那么登陆页在0.5s时会发生一个轻微的字体抖动，虽然在不知情的情况下几乎察觉不出来，但在我看来仍不是一个最佳方案。</p>\n<ul>\n<li>方案二：登录页默认使用下载字体，如果0.5s内不能加载出来，那么则使用降级安全字体。</li>\n</ul>\n<p>该方案是方案一的另一种思路，也就是FOUT的变形，不同之处是将3s缩减到了0.5s，经过多次测试之后，缩减到了0.1s，0.1s在有缓存的情况下足以加载出来（再小的话有缓存也加载不出来）。该方案可以说D字体和其它DOM同时出现，可以说是体验非常好了。而且等用户将登录信息填写完整之后，字体已经加载好了，进入内容页直接就是下载字体。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>同时在这一阶段，将ttf字体转成了woff2和woff，直接缩小了一半多。同时也将图片进行了压缩，同样压缩了一半多。同时服务端又开启了gzip将js和css文件进一步压缩，加载速度又提升了一截。中间也用了uglifyjs试图进一步压缩js，但是效果并不明显，应该是编译之后已经压缩过一次的缘故。</p>\n<p>贴一下第一阶段优化之后的加载情况</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/compress-res.jpg\">\n\n<p>可以看到，提升了很多，几乎可以说是天壤之别。但其实除了字体渲染策略上考虑了一番以外，别的对资源的压缩之类的并没有花很多功夫，但是提升确实是很显著的。因此静态资源的压缩确实是对优化项目有很大的提高。</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>首先，项目可以简单分为前台页面（一般用户使用的），以及后台管理页面（管理员管理上传之类的）。那么，此时采用单页应用就存在一个问题，那就是，对于普通用户来讲，是不需要进入后台的，但是单页应用不做处理的时候，在首屏直接会将所有文件加载，这对用户体验来讲，是不合适的。因此，需要进行更改。</p>\n<p>方案1：懒加载，即将后台的一个大组件以及其包含的三个组件懒加载，令其空闲时加载，减少首屏引入的包体积。</p>\n<p>先放一张拆分后的结构，当然经过拆分后发现其实我把问题想简单了，想当然的觉得将共用的抽离出来是最优解。但其实未必，后面也将写一些优化过程中产生的一些想法。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/lazy-load-res.jpg\">\n\n<p>这里vue-cli默认为初始化渲染需要的文件生成<code>preload</code>提示，即预加载。我们这里使用vue-router的懒加载，vue-cli会将将异步组件单独打包生成chunk，并添加<code>prefetch</code>提示，打开network分析可看出，带有<code>prefetch</code>的会在后面加载，当用户进入后台时，此时发起的请求会直接从缓存中拿出来。</p>\n<p>中间也发现了一个小问题，发现在开发环境下，css按照style里引入，而在生产环境下是用link引入的。经查阅后才发现<code>MiniCssExtractPlugin</code>这个插件在开发环境下热重载会有问题，所以默认在生产环境下才开启。这里也发现了使用vue-cli确实方便了很多，但是也有很多东西没有明显的配置文件，并不清楚内部如何配置的，后面也是自己都实现了一遍，才大致了解。</p>\n<p>继续说懒加载，如此操作产生一个问题，每一个懒加载的组件都会被分成单独的chunk，发现其单独的js和css的chunk里都有重复引入的部分，如下图所示。也就是说进入后台的三个页面，会重复加载其共用的组件。这里经过查阅发现webpack4的<code>SplitChunksPlugin</code>插件默认最下30k才会单独打包。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-3-12/example1.jpg\">\n\n\n<p>在最开始，我并不理解webpack的默认策略为什么要这样制定，重复引入组件按道理讲肯定是造成了一些损耗。但其实少考虑了一点，按目前所作的方法，将懒加载的组件单独chunk，但其实每一个chunk才不到8k，甚至有的1k，2k这样子。那么我们为了不重复引入这2k，3k的组件而将其单独抽离出来一个chunk-common，是会额外增加一次http请求的，这样其实未必更优。</p>\n<p>其实关于优化，我认为是没有最优的方法的，只有根据业务和需求的不同，尽可能地采取最合适或者说最能适应大部分用户的方案。</p>\n<p>在思考代码分离方案时候，首先第三方引入的依赖可以单独打成一个chunk，比如<code>vue</code>,<code>vuex</code>等等这些，这些几乎每个组件都要使用，将其和自己写的业务组件打成一个包很不合理。然后就是引用频率较高的组件或者文件可以单独打成一个chunk，但是还要根据其包的大小具体考虑是否需要单独打包。然后就是一些懒加载引入的单独业务代码了。这里有一篇文章，觉得整理的很好，看后也有很多收获-&gt;<a href=\"https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc\">链接</a></p>\n<p>我上面把包拆分的太颗粒化了，其实未必比都打到一个包里更优，因为后台页面的大小其实并没有很大。那么后面我将尝试，将多个chunk适当合并，即减少首屏加载，也同样减少过多chunk造成的不必要的http请求。</p>"},{"title":"Git分支相关","date":"2019-07-12T13:59:59.000Z","toc":true,"_content":"\ngit分支在多人协作开发里非常重要，之前没有这方面的需求，所以对这方面了解不多。公司实习多人协作开发，需要这部分的掌握，就重新整理了一下。\n\n<!--more-->\n\n## git分支\n\n一般远程仓库有多个分支，master为主分支，应该是非常稳定的，也就是仅用来发布新版本，一般开发都在其它分支进行，当稳定后合并到master分支下，如果出现问题，及时回滚。\n\n多人协作中，每个人都在dev分支上提交，每个人都应该创建自己的分支，然后往dev分支上合并。\n\n\n### 实际开发\n\n假设，远程仓库有master分支和dev分支，当我们`git clone`后，将分支切换到dev分支，然后进行开发，当然此处也可以再新加一个分支，当该功能做完后，再合并到dev分支，最后没问题的情况下合并到master分支。其它修bug或者新增一个功能的时候，也都可以新增一个分支，完成后合并，最后将分支删除。（当然，此处说的可能和实际开发还会有些出入，因为还没有真正在公司开发中尝试。如果后面有别的理解后，会再做做修改）。\n\n### 分支合并\n\n两种方式：\n* merge\n* rebase\n\n首先merge便于理解，merge会把两分支的最新快照以及二者共同祖先进行三方合并，结果是产生一个新的快照。\n\n而rebase命令能将提交到某一分支上的所有修改都移至另一分支上，其最直接的结果就是能确保在向远程分支推送时，能保持提交历史的整洁，即使用`git log --graph`查看分支提交历史时，是一条直线，更加简洁。\n\n### 相关命令整理\n\n<b>提交文件到git仓库</b>\n\n```bash\ngit add <file>  #将工作区文件提交到暂存区\ngit commit -m <message> #将暂存区提交到分支\n```\n\n<b>远程仓库</b>\n\n```bash\ngit remote  #查看远程仓库信息\ngit remote -v #查看更加详细的远程仓库信息\ngit push orgin <分支>   #推送到远程仓库分支\n```\n\n<b>分支相关</b>\n\n```bash\ngit branch  #查看分支\ngit branch <name>   #创建分支\ngit checkout <name> #切换分支\ngit checkout -b <name>  #创建+切换分支\ngit merge <name>    #将目标分支合并到当前分支\ngit branch -d <name>    #删除目标分支\n\ngit rebase <name>\n```\n\n<b>解决冲突</b>\n\n当提交到远程仓库时，目标与当前不一致（即可能别人在这条分支上提交后），就会产生冲突。需要先在本地把冲突解决，然后提交。\n\n```bash\ngit pull    #将最新的提交从orgin分支上抓取下来\ngit branch --set-upstream-to <branch-name> origin/<branch-name> #本地分支与远程分支链接\n# 然后在本地合并，然后git add，git commit 提交\n```","source":"_posts/26. Git分支相关.md","raw":"---\ntitle: Git分支相关\ndate: 2019-07-12 21:59:59\ntoc: true\ncategories:\n- 前端\ntags:\n- Git\n---\n\ngit分支在多人协作开发里非常重要，之前没有这方面的需求，所以对这方面了解不多。公司实习多人协作开发，需要这部分的掌握，就重新整理了一下。\n\n<!--more-->\n\n## git分支\n\n一般远程仓库有多个分支，master为主分支，应该是非常稳定的，也就是仅用来发布新版本，一般开发都在其它分支进行，当稳定后合并到master分支下，如果出现问题，及时回滚。\n\n多人协作中，每个人都在dev分支上提交，每个人都应该创建自己的分支，然后往dev分支上合并。\n\n\n### 实际开发\n\n假设，远程仓库有master分支和dev分支，当我们`git clone`后，将分支切换到dev分支，然后进行开发，当然此处也可以再新加一个分支，当该功能做完后，再合并到dev分支，最后没问题的情况下合并到master分支。其它修bug或者新增一个功能的时候，也都可以新增一个分支，完成后合并，最后将分支删除。（当然，此处说的可能和实际开发还会有些出入，因为还没有真正在公司开发中尝试。如果后面有别的理解后，会再做做修改）。\n\n### 分支合并\n\n两种方式：\n* merge\n* rebase\n\n首先merge便于理解，merge会把两分支的最新快照以及二者共同祖先进行三方合并，结果是产生一个新的快照。\n\n而rebase命令能将提交到某一分支上的所有修改都移至另一分支上，其最直接的结果就是能确保在向远程分支推送时，能保持提交历史的整洁，即使用`git log --graph`查看分支提交历史时，是一条直线，更加简洁。\n\n### 相关命令整理\n\n<b>提交文件到git仓库</b>\n\n```bash\ngit add <file>  #将工作区文件提交到暂存区\ngit commit -m <message> #将暂存区提交到分支\n```\n\n<b>远程仓库</b>\n\n```bash\ngit remote  #查看远程仓库信息\ngit remote -v #查看更加详细的远程仓库信息\ngit push orgin <分支>   #推送到远程仓库分支\n```\n\n<b>分支相关</b>\n\n```bash\ngit branch  #查看分支\ngit branch <name>   #创建分支\ngit checkout <name> #切换分支\ngit checkout -b <name>  #创建+切换分支\ngit merge <name>    #将目标分支合并到当前分支\ngit branch -d <name>    #删除目标分支\n\ngit rebase <name>\n```\n\n<b>解决冲突</b>\n\n当提交到远程仓库时，目标与当前不一致（即可能别人在这条分支上提交后），就会产生冲突。需要先在本地把冲突解决，然后提交。\n\n```bash\ngit pull    #将最新的提交从orgin分支上抓取下来\ngit branch --set-upstream-to <branch-name> origin/<branch-name> #本地分支与远程分支链接\n# 然后在本地合并，然后git add，git commit 提交\n```","slug":"26. Git分支相关","published":1,"updated":"2021-09-30T06:47:30.435Z","_id":"cku41le8t000yidp23au128wu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>git分支在多人协作开发里非常重要，之前没有这方面的需求，所以对这方面了解不多。公司实习多人协作开发，需要这部分的掌握，就重新整理了一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"git分支\"><a href=\"#git分支\" class=\"headerlink\" title=\"git分支\"></a>git分支</h2><p>一般远程仓库有多个分支，master为主分支，应该是非常稳定的，也就是仅用来发布新版本，一般开发都在其它分支进行，当稳定后合并到master分支下，如果出现问题，及时回滚。</p>\n<p>多人协作中，每个人都在dev分支上提交，每个人都应该创建自己的分支，然后往dev分支上合并。</p>\n<h3 id=\"实际开发\"><a href=\"#实际开发\" class=\"headerlink\" title=\"实际开发\"></a>实际开发</h3><p>假设，远程仓库有master分支和dev分支，当我们<code>git clone</code>后，将分支切换到dev分支，然后进行开发，当然此处也可以再新加一个分支，当该功能做完后，再合并到dev分支，最后没问题的情况下合并到master分支。其它修bug或者新增一个功能的时候，也都可以新增一个分支，完成后合并，最后将分支删除。（当然，此处说的可能和实际开发还会有些出入，因为还没有真正在公司开发中尝试。如果后面有别的理解后，会再做做修改）。</p>\n<h3 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h3><p>两种方式：</p>\n<ul>\n<li>merge</li>\n<li>rebase</li>\n</ul>\n<p>首先merge便于理解，merge会把两分支的最新快照以及二者共同祖先进行三方合并，结果是产生一个新的快照。</p>\n<p>而rebase命令能将提交到某一分支上的所有修改都移至另一分支上，其最直接的结果就是能确保在向远程分支推送时，能保持提交历史的整洁，即使用<code>git log --graph</code>查看分支提交历史时，是一条直线，更加简洁。</p>\n<h3 id=\"相关命令整理\"><a href=\"#相关命令整理\" class=\"headerlink\" title=\"相关命令整理\"></a>相关命令整理</h3><p><b>提交文件到git仓库</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;  <span class=\"comment\">#将工作区文件提交到暂存区</span></span><br><span class=\"line\">git commit -m &lt;message&gt; <span class=\"comment\">#将暂存区提交到分支</span></span><br></pre></td></tr></table></figure>\n\n<p><b>远程仓库</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote  <span class=\"comment\">#查看远程仓库信息</span></span><br><span class=\"line\">git remote -v <span class=\"comment\">#查看更加详细的远程仓库信息</span></span><br><span class=\"line\">git push orgin &lt;分支&gt;   <span class=\"comment\">#推送到远程仓库分支</span></span><br></pre></td></tr></table></figure>\n\n<p><b>分支相关</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\">#查看分支</span></span><br><span class=\"line\">git branch &lt;name&gt;   <span class=\"comment\">#创建分支</span></span><br><span class=\"line\">git checkout &lt;name&gt; <span class=\"comment\">#切换分支</span></span><br><span class=\"line\">git checkout -b &lt;name&gt;  <span class=\"comment\">#创建+切换分支</span></span><br><span class=\"line\">git merge &lt;name&gt;    <span class=\"comment\">#将目标分支合并到当前分支</span></span><br><span class=\"line\">git branch -d &lt;name&gt;    <span class=\"comment\">#删除目标分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rebase &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p><b>解决冲突</b></p>\n<p>当提交到远程仓库时，目标与当前不一致（即可能别人在这条分支上提交后），就会产生冲突。需要先在本地把冲突解决，然后提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull    <span class=\"comment\">#将最新的提交从orgin分支上抓取下来</span></span><br><span class=\"line\">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt; <span class=\"comment\">#本地分支与远程分支链接</span></span><br><span class=\"line\"><span class=\"comment\"># 然后在本地合并，然后git add，git commit 提交</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>git分支在多人协作开发里非常重要，之前没有这方面的需求，所以对这方面了解不多。公司实习多人协作开发，需要这部分的掌握，就重新整理了一下。</p>","more":"<h2 id=\"git分支\"><a href=\"#git分支\" class=\"headerlink\" title=\"git分支\"></a>git分支</h2><p>一般远程仓库有多个分支，master为主分支，应该是非常稳定的，也就是仅用来发布新版本，一般开发都在其它分支进行，当稳定后合并到master分支下，如果出现问题，及时回滚。</p>\n<p>多人协作中，每个人都在dev分支上提交，每个人都应该创建自己的分支，然后往dev分支上合并。</p>\n<h3 id=\"实际开发\"><a href=\"#实际开发\" class=\"headerlink\" title=\"实际开发\"></a>实际开发</h3><p>假设，远程仓库有master分支和dev分支，当我们<code>git clone</code>后，将分支切换到dev分支，然后进行开发，当然此处也可以再新加一个分支，当该功能做完后，再合并到dev分支，最后没问题的情况下合并到master分支。其它修bug或者新增一个功能的时候，也都可以新增一个分支，完成后合并，最后将分支删除。（当然，此处说的可能和实际开发还会有些出入，因为还没有真正在公司开发中尝试。如果后面有别的理解后，会再做做修改）。</p>\n<h3 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h3><p>两种方式：</p>\n<ul>\n<li>merge</li>\n<li>rebase</li>\n</ul>\n<p>首先merge便于理解，merge会把两分支的最新快照以及二者共同祖先进行三方合并，结果是产生一个新的快照。</p>\n<p>而rebase命令能将提交到某一分支上的所有修改都移至另一分支上，其最直接的结果就是能确保在向远程分支推送时，能保持提交历史的整洁，即使用<code>git log --graph</code>查看分支提交历史时，是一条直线，更加简洁。</p>\n<h3 id=\"相关命令整理\"><a href=\"#相关命令整理\" class=\"headerlink\" title=\"相关命令整理\"></a>相关命令整理</h3><p><b>提交文件到git仓库</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;  <span class=\"comment\">#将工作区文件提交到暂存区</span></span><br><span class=\"line\">git commit -m &lt;message&gt; <span class=\"comment\">#将暂存区提交到分支</span></span><br></pre></td></tr></table></figure>\n\n<p><b>远程仓库</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote  <span class=\"comment\">#查看远程仓库信息</span></span><br><span class=\"line\">git remote -v <span class=\"comment\">#查看更加详细的远程仓库信息</span></span><br><span class=\"line\">git push orgin &lt;分支&gt;   <span class=\"comment\">#推送到远程仓库分支</span></span><br></pre></td></tr></table></figure>\n\n<p><b>分支相关</b></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  <span class=\"comment\">#查看分支</span></span><br><span class=\"line\">git branch &lt;name&gt;   <span class=\"comment\">#创建分支</span></span><br><span class=\"line\">git checkout &lt;name&gt; <span class=\"comment\">#切换分支</span></span><br><span class=\"line\">git checkout -b &lt;name&gt;  <span class=\"comment\">#创建+切换分支</span></span><br><span class=\"line\">git merge &lt;name&gt;    <span class=\"comment\">#将目标分支合并到当前分支</span></span><br><span class=\"line\">git branch -d &lt;name&gt;    <span class=\"comment\">#删除目标分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rebase &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p><b>解决冲突</b></p>\n<p>当提交到远程仓库时，目标与当前不一致（即可能别人在这条分支上提交后），就会产生冲突。需要先在本地把冲突解决，然后提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull    <span class=\"comment\">#将最新的提交从orgin分支上抓取下来</span></span><br><span class=\"line\">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt; <span class=\"comment\">#本地分支与远程分支链接</span></span><br><span class=\"line\"><span class=\"comment\"># 然后在本地合并，然后git add，git commit 提交</span></span><br></pre></td></tr></table></figure>"},{"title":"vue-cli源码学习1.x","date":"2019-07-24T14:54:41.000Z","toc":true,"_content":"\n说起vue-cli源码的阅读，主要源于公司实习时候，对公司的前端脚手架比较感兴趣，然后就开始看了看，但是看的不是很明白。就准备先看看比较熟悉的vue-cli，而且vue-cli使用人数比较多，也有一些源码分析的文章，有助于代码的理解。\n\n但其实看一遍别人的文章，感觉只是稍微明白了一点。于是，本着学习cli工具的开发思路，因此，从master分支的第一个提交开始看起，准备梳理一下整个cli工具的开发流程，以及作者的一些思考。\n\n这篇文章将主要分析`vue-cli 1.x`版本的一些原理。\n\n<!--more-->\n\n## 整体思路\n\n* bin/  目录下面放命令文件，比如`vue`，`vue-init`，`vue-list`，注意这里没有加js后缀\n* lib/  目录下面放一些公共的方法\n\n其实vue-cli最初只提供了两种命令，分别是`vue init`初始化项目，以及`vue list`查看模板列表。命令行的控制则主要是引入`commander`包来控制。这里选项交互暂时没用到`inquirer`包，后面版本会用到。\n\nbin目录写到package.json文件中作用是可直接命令行启动，即`npm i -g`后可直接使用`vue init <package-name> <project-name>`形式。\n\n同时，为了方便调试，可以直接在目录下面`npm link`到全局，这样改动后可以直接看到效果。原理即创建软连接，使用`npm unlink`即可取消。\n\n### 脚本文件调用\n\n主文件vue如何根据用户输入选择执行不同脚本文件？\n\n最开始使用`child_process.spawn(脚本路径，参数)`直接执行，如下\n\n```js\n// 这里执行子进程，根据命令行输入，执行不同bin下文件\n// 注意这里有一个执行权限问题，chmod 755 file\n// 但是不太清楚如果发布以后，npm下载之后，是否可执行，如果权限是不可执行，那其它用户下载后又该如何解决？已解决，用commander特性\nspawn(bin, args, { stdio: 'inherit' })\n  .on('close', process.exit.bind(process))\n```\n\n后来的提交直接使用了commander特性，如下所示，command加入第二个参数，就可以在目录下面寻找vue-init与vue-list文件执行，省了一大段调用nodeAPI获取输入参数，选择脚本路径与参数的代码。\n\n```js\nrequire('commander')\n  .version(require('../package').version)\n  .usage('<command> [options]')\n  .command('init', 'generate a new project from a template')\n  .command('list', 'list available official templates')\n  .parse(process.argv)\n```\n\n### vue init\n\n`vue init`的思路很简单，就是预先写好一个模板，放到远程仓库中。然后当使用`vue init`选择不同模板构建时，则下载不同的模板。先将模板下载到`/tmp`下，然后再将其`generate`到项目位置，而不是直接将其下载到目标位置。\n\n一些预设选项是通过下载下来的模板中`meta.json`中的选项来交互。版本目前暂时还不能`init`成功，据我推测是代码比较老，和template不太匹配的缘故。比较有意思的是作者最初使用的`Khaos`包来`generate`到目标位置，可能作者觉得这个太麻烦了，重新封装了一下这个包叫`khaos-patched`，一行代码就能实现功能。也有些借鉴意义。\n\n这里有一个用法比较独特（之前没见过）\n\n```js\n// 举例：如果返回-1，则 ~-1 为 0， 也就是说没有找到，即为false，加上！，即为 true，既没有找到就进入\n// 如果返回其他值，则 ~number为 非0，即找到true，加上！即为false\nif (!~template.indexOf('/')) {\n  template = 'vuejs-templates/' + template\n}\n```\n\n算的上奇淫巧技吧，但是有意思的事，作者在后面的版本中修改了，变成了如下，可能是觉得可读性不太好？\n\n```js\nvar hasSlash = template.indexOf('/') > -1\nif (!hasSlash) {\n  template = 'vuejs-templates/' + template\n}\n```\n\n### vue list\n\nvue list实现思路很简单，直接发请求获取一些模板列表，显示出来。这里就不多做解释了。\n\n\n## 更新情况\n\n### 2.0.x\n\n#### 依赖\n\n#### 完成功能 \n\n* 使用 inquirer 和 metalsmith 代替 Khaos 和 prompt-for\n* 添加lint和test,以及重构项目,将Metalsmith所用插件方法单独抽离,放进lib\n* 使用ora代替lib/spinner.js\n* 添加vue-cli版本检查\n\n### 1.4.x\n\n#### 完成功能 \n\n* 添加lib/spinner.js下载动画\n\n### 1.3.x\n\n#### 依赖\n\n* prompt-for-patched: 命令行问题及选择\n\n#### 完成功能\n\n* 添加-c参数，可直接下载任意git仓库\n* 添加没有指定project-name时，可将当前目录初始化功能\n\n### 1.2.x\n\n#### 依赖\n\n* download-git-repo: 下载github仓库\n\n#### 完成功能\n\n* 使用download-git-repo替换download-github-repo\n\n### 1.1.x\n\n#### 依赖\n\n* khaos-patched: yyx自己基于khaos写的\n\n#### 完成功能\n\n* 将khaos替换为khaos-patched\n* 添加lib/git-user.js获取作者\n\n### 1.0.x\n\n#### 依赖\n\n* commander: 命令行交互\n* chalk: 命令行高亮\n* cross-spawn: Node子进程\n* download-github-repo: 下载github上仓库\n* khaos: 生成项目\n* rimraf: rm -rf\n* uid: 生成一串随机数\n\n#### 完成功能\n\n* 构建项目主框架，完成vue init功能和vue list功能，使用子进程切换执行脚本\n* 抽离lig/logger.js信息输出\n* 使用commander的方法,删除大量vue脚本代码\n* 增加目录下是否已有模板判断\n\n\n## 总结\n\n当然，目前只是看了最初的几次提交，1.x版本还有好多次提交，代码结构比较简单，后面会愈发复杂。同时上述原理只是1.x的前期版本，不包括2.x以及3.x版本。特别是3.x有了较大的改进。\n\n----------------------2019.8.3----------------------------\n\n1.x版本已经看完了，2.x版本也已经看完了。看完后觉得还是非常清晰地，当然和3.x版本相比，之前的版本还是有比较大的去别的。1.x和2.x版本总体上来讲，还是从远程仓库下载模板，可配置性虽然有但还是不够灵活，而且扩展性非常不好。3.x版本的最大特点就是插件式引入，而且开发者也可以直接开发自己的插件，更加灵活。\n","source":"_posts/27. vue-cli源码学习1.x.md","raw":"---\ntitle: vue-cli源码学习1.x\ndate: 2019-07-24 22:54:41\ntoc: true\ncategories:\n- 前端\ntags:\n- vue\n- cli\n---\n\n说起vue-cli源码的阅读，主要源于公司实习时候，对公司的前端脚手架比较感兴趣，然后就开始看了看，但是看的不是很明白。就准备先看看比较熟悉的vue-cli，而且vue-cli使用人数比较多，也有一些源码分析的文章，有助于代码的理解。\n\n但其实看一遍别人的文章，感觉只是稍微明白了一点。于是，本着学习cli工具的开发思路，因此，从master分支的第一个提交开始看起，准备梳理一下整个cli工具的开发流程，以及作者的一些思考。\n\n这篇文章将主要分析`vue-cli 1.x`版本的一些原理。\n\n<!--more-->\n\n## 整体思路\n\n* bin/  目录下面放命令文件，比如`vue`，`vue-init`，`vue-list`，注意这里没有加js后缀\n* lib/  目录下面放一些公共的方法\n\n其实vue-cli最初只提供了两种命令，分别是`vue init`初始化项目，以及`vue list`查看模板列表。命令行的控制则主要是引入`commander`包来控制。这里选项交互暂时没用到`inquirer`包，后面版本会用到。\n\nbin目录写到package.json文件中作用是可直接命令行启动，即`npm i -g`后可直接使用`vue init <package-name> <project-name>`形式。\n\n同时，为了方便调试，可以直接在目录下面`npm link`到全局，这样改动后可以直接看到效果。原理即创建软连接，使用`npm unlink`即可取消。\n\n### 脚本文件调用\n\n主文件vue如何根据用户输入选择执行不同脚本文件？\n\n最开始使用`child_process.spawn(脚本路径，参数)`直接执行，如下\n\n```js\n// 这里执行子进程，根据命令行输入，执行不同bin下文件\n// 注意这里有一个执行权限问题，chmod 755 file\n// 但是不太清楚如果发布以后，npm下载之后，是否可执行，如果权限是不可执行，那其它用户下载后又该如何解决？已解决，用commander特性\nspawn(bin, args, { stdio: 'inherit' })\n  .on('close', process.exit.bind(process))\n```\n\n后来的提交直接使用了commander特性，如下所示，command加入第二个参数，就可以在目录下面寻找vue-init与vue-list文件执行，省了一大段调用nodeAPI获取输入参数，选择脚本路径与参数的代码。\n\n```js\nrequire('commander')\n  .version(require('../package').version)\n  .usage('<command> [options]')\n  .command('init', 'generate a new project from a template')\n  .command('list', 'list available official templates')\n  .parse(process.argv)\n```\n\n### vue init\n\n`vue init`的思路很简单，就是预先写好一个模板，放到远程仓库中。然后当使用`vue init`选择不同模板构建时，则下载不同的模板。先将模板下载到`/tmp`下，然后再将其`generate`到项目位置，而不是直接将其下载到目标位置。\n\n一些预设选项是通过下载下来的模板中`meta.json`中的选项来交互。版本目前暂时还不能`init`成功，据我推测是代码比较老，和template不太匹配的缘故。比较有意思的是作者最初使用的`Khaos`包来`generate`到目标位置，可能作者觉得这个太麻烦了，重新封装了一下这个包叫`khaos-patched`，一行代码就能实现功能。也有些借鉴意义。\n\n这里有一个用法比较独特（之前没见过）\n\n```js\n// 举例：如果返回-1，则 ~-1 为 0， 也就是说没有找到，即为false，加上！，即为 true，既没有找到就进入\n// 如果返回其他值，则 ~number为 非0，即找到true，加上！即为false\nif (!~template.indexOf('/')) {\n  template = 'vuejs-templates/' + template\n}\n```\n\n算的上奇淫巧技吧，但是有意思的事，作者在后面的版本中修改了，变成了如下，可能是觉得可读性不太好？\n\n```js\nvar hasSlash = template.indexOf('/') > -1\nif (!hasSlash) {\n  template = 'vuejs-templates/' + template\n}\n```\n\n### vue list\n\nvue list实现思路很简单，直接发请求获取一些模板列表，显示出来。这里就不多做解释了。\n\n\n## 更新情况\n\n### 2.0.x\n\n#### 依赖\n\n#### 完成功能 \n\n* 使用 inquirer 和 metalsmith 代替 Khaos 和 prompt-for\n* 添加lint和test,以及重构项目,将Metalsmith所用插件方法单独抽离,放进lib\n* 使用ora代替lib/spinner.js\n* 添加vue-cli版本检查\n\n### 1.4.x\n\n#### 完成功能 \n\n* 添加lib/spinner.js下载动画\n\n### 1.3.x\n\n#### 依赖\n\n* prompt-for-patched: 命令行问题及选择\n\n#### 完成功能\n\n* 添加-c参数，可直接下载任意git仓库\n* 添加没有指定project-name时，可将当前目录初始化功能\n\n### 1.2.x\n\n#### 依赖\n\n* download-git-repo: 下载github仓库\n\n#### 完成功能\n\n* 使用download-git-repo替换download-github-repo\n\n### 1.1.x\n\n#### 依赖\n\n* khaos-patched: yyx自己基于khaos写的\n\n#### 完成功能\n\n* 将khaos替换为khaos-patched\n* 添加lib/git-user.js获取作者\n\n### 1.0.x\n\n#### 依赖\n\n* commander: 命令行交互\n* chalk: 命令行高亮\n* cross-spawn: Node子进程\n* download-github-repo: 下载github上仓库\n* khaos: 生成项目\n* rimraf: rm -rf\n* uid: 生成一串随机数\n\n#### 完成功能\n\n* 构建项目主框架，完成vue init功能和vue list功能，使用子进程切换执行脚本\n* 抽离lig/logger.js信息输出\n* 使用commander的方法,删除大量vue脚本代码\n* 增加目录下是否已有模板判断\n\n\n## 总结\n\n当然，目前只是看了最初的几次提交，1.x版本还有好多次提交，代码结构比较简单，后面会愈发复杂。同时上述原理只是1.x的前期版本，不包括2.x以及3.x版本。特别是3.x有了较大的改进。\n\n----------------------2019.8.3----------------------------\n\n1.x版本已经看完了，2.x版本也已经看完了。看完后觉得还是非常清晰地，当然和3.x版本相比，之前的版本还是有比较大的去别的。1.x和2.x版本总体上来讲，还是从远程仓库下载模板，可配置性虽然有但还是不够灵活，而且扩展性非常不好。3.x版本的最大特点就是插件式引入，而且开发者也可以直接开发自己的插件，更加灵活。\n","slug":"27. vue-cli源码学习1.x","published":1,"updated":"2021-09-30T06:47:33.386Z","_id":"cku41le8u0010idp2brzr902l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说起vue-cli源码的阅读，主要源于公司实习时候，对公司的前端脚手架比较感兴趣，然后就开始看了看，但是看的不是很明白。就准备先看看比较熟悉的vue-cli，而且vue-cli使用人数比较多，也有一些源码分析的文章，有助于代码的理解。</p>\n<p>但其实看一遍别人的文章，感觉只是稍微明白了一点。于是，本着学习cli工具的开发思路，因此，从master分支的第一个提交开始看起，准备梳理一下整个cli工具的开发流程，以及作者的一些思考。</p>\n<p>这篇文章将主要分析<code>vue-cli 1.x</code>版本的一些原理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>bin/  目录下面放命令文件，比如<code>vue</code>，<code>vue-init</code>，<code>vue-list</code>，注意这里没有加js后缀</li>\n<li>lib/  目录下面放一些公共的方法</li>\n</ul>\n<p>其实vue-cli最初只提供了两种命令，分别是<code>vue init</code>初始化项目，以及<code>vue list</code>查看模板列表。命令行的控制则主要是引入<code>commander</code>包来控制。这里选项交互暂时没用到<code>inquirer</code>包，后面版本会用到。</p>\n<p>bin目录写到package.json文件中作用是可直接命令行启动，即<code>npm i -g</code>后可直接使用<code>vue init &lt;package-name&gt; &lt;project-name&gt;</code>形式。</p>\n<p>同时，为了方便调试，可以直接在目录下面<code>npm link</code>到全局，这样改动后可以直接看到效果。原理即创建软连接，使用<code>npm unlink</code>即可取消。</p>\n<h3 id=\"脚本文件调用\"><a href=\"#脚本文件调用\" class=\"headerlink\" title=\"脚本文件调用\"></a>脚本文件调用</h3><p>主文件vue如何根据用户输入选择执行不同脚本文件？</p>\n<p>最开始使用<code>child_process.spawn(脚本路径，参数)</code>直接执行，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里执行子进程，根据命令行输入，执行不同bin下文件</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里有一个执行权限问题，chmod 755 file</span></span><br><span class=\"line\"><span class=\"comment\">// 但是不太清楚如果发布以后，npm下载之后，是否可执行，如果权限是不可执行，那其它用户下载后又该如何解决？已解决，用commander特性</span></span><br><span class=\"line\">spawn(bin, args, &#123; <span class=\"attr\">stdio</span>: <span class=\"string\">&#x27;inherit&#x27;</span> &#125;)</span><br><span class=\"line\">  .on(<span class=\"string\">&#x27;close&#x27;</span>, process.exit.bind(process))</span><br></pre></td></tr></table></figure>\n\n<p>后来的提交直接使用了commander特性，如下所示，command加入第二个参数，就可以在目录下面寻找vue-init与vue-list文件执行，省了一大段调用nodeAPI获取输入参数，选择脚本路径与参数的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version)</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt; [options]&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;generate a new project from a template&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>, <span class=\"string\">&#x27;list available official templates&#x27;</span>)</span><br><span class=\"line\">  .parse(process.argv)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-init\"><a href=\"#vue-init\" class=\"headerlink\" title=\"vue init\"></a>vue init</h3><p><code>vue init</code>的思路很简单，就是预先写好一个模板，放到远程仓库中。然后当使用<code>vue init</code>选择不同模板构建时，则下载不同的模板。先将模板下载到<code>/tmp</code>下，然后再将其<code>generate</code>到项目位置，而不是直接将其下载到目标位置。</p>\n<p>一些预设选项是通过下载下来的模板中<code>meta.json</code>中的选项来交互。版本目前暂时还不能<code>init</code>成功，据我推测是代码比较老，和template不太匹配的缘故。比较有意思的是作者最初使用的<code>Khaos</code>包来<code>generate</code>到目标位置，可能作者觉得这个太麻烦了，重新封装了一下这个包叫<code>khaos-patched</code>，一行代码就能实现功能。也有些借鉴意义。</p>\n<p>这里有一个用法比较独特（之前没见过）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举例：如果返回-1，则 ~-1 为 0， 也就是说没有找到，即为false，加上！，即为 true，既没有找到就进入</span></span><br><span class=\"line\"><span class=\"comment\">// 如果返回其他值，则 ~number为 非0，即找到true，加上！即为false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!~template.indexOf(<span class=\"string\">&#x27;/&#x27;</span>)) &#123;</span><br><span class=\"line\">  template = <span class=\"string\">&#x27;vuejs-templates/&#x27;</span> + template</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算的上奇淫巧技吧，但是有意思的事，作者在后面的版本中修改了，变成了如下，可能是觉得可读性不太好？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasSlash = template.indexOf(<span class=\"string\">&#x27;/&#x27;</span>) &gt; -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!hasSlash) &#123;</span><br><span class=\"line\">  template = <span class=\"string\">&#x27;vuejs-templates/&#x27;</span> + template</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-list\"><a href=\"#vue-list\" class=\"headerlink\" title=\"vue list\"></a>vue list</h3><p>vue list实现思路很简单，直接发请求获取一些模板列表，显示出来。这里就不多做解释了。</p>\n<h2 id=\"更新情况\"><a href=\"#更新情况\" class=\"headerlink\" title=\"更新情况\"></a>更新情况</h2><h3 id=\"2-0-x\"><a href=\"#2-0-x\" class=\"headerlink\" title=\"2.0.x\"></a>2.0.x</h3><h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><h4 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>使用 inquirer 和 metalsmith 代替 Khaos 和 prompt-for</li>\n<li>添加lint和test,以及重构项目,将Metalsmith所用插件方法单独抽离,放进lib</li>\n<li>使用ora代替lib/spinner.js</li>\n<li>添加vue-cli版本检查</li>\n</ul>\n<h3 id=\"1-4-x\"><a href=\"#1-4-x\" class=\"headerlink\" title=\"1.4.x\"></a>1.4.x</h3><h4 id=\"完成功能-1\"><a href=\"#完成功能-1\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>添加lib/spinner.js下载动画</li>\n</ul>\n<h3 id=\"1-3-x\"><a href=\"#1-3-x\" class=\"headerlink\" title=\"1.3.x\"></a>1.3.x</h3><h4 id=\"依赖-1\"><a href=\"#依赖-1\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>prompt-for-patched: 命令行问题及选择</li>\n</ul>\n<h4 id=\"完成功能-2\"><a href=\"#完成功能-2\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>添加-c参数，可直接下载任意git仓库</li>\n<li>添加没有指定project-name时，可将当前目录初始化功能</li>\n</ul>\n<h3 id=\"1-2-x\"><a href=\"#1-2-x\" class=\"headerlink\" title=\"1.2.x\"></a>1.2.x</h3><h4 id=\"依赖-2\"><a href=\"#依赖-2\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>download-git-repo: 下载github仓库</li>\n</ul>\n<h4 id=\"完成功能-3\"><a href=\"#完成功能-3\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>使用download-git-repo替换download-github-repo</li>\n</ul>\n<h3 id=\"1-1-x\"><a href=\"#1-1-x\" class=\"headerlink\" title=\"1.1.x\"></a>1.1.x</h3><h4 id=\"依赖-3\"><a href=\"#依赖-3\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>khaos-patched: yyx自己基于khaos写的</li>\n</ul>\n<h4 id=\"完成功能-4\"><a href=\"#完成功能-4\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>将khaos替换为khaos-patched</li>\n<li>添加lib/git-user.js获取作者</li>\n</ul>\n<h3 id=\"1-0-x\"><a href=\"#1-0-x\" class=\"headerlink\" title=\"1.0.x\"></a>1.0.x</h3><h4 id=\"依赖-4\"><a href=\"#依赖-4\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>commander: 命令行交互</li>\n<li>chalk: 命令行高亮</li>\n<li>cross-spawn: Node子进程</li>\n<li>download-github-repo: 下载github上仓库</li>\n<li>khaos: 生成项目</li>\n<li>rimraf: rm -rf</li>\n<li>uid: 生成一串随机数</li>\n</ul>\n<h4 id=\"完成功能-5\"><a href=\"#完成功能-5\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>构建项目主框架，完成vue init功能和vue list功能，使用子进程切换执行脚本</li>\n<li>抽离lig/logger.js信息输出</li>\n<li>使用commander的方法,删除大量vue脚本代码</li>\n<li>增加目录下是否已有模板判断</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然，目前只是看了最初的几次提交，1.x版本还有好多次提交，代码结构比较简单，后面会愈发复杂。同时上述原理只是1.x的前期版本，不包括2.x以及3.x版本。特别是3.x有了较大的改进。</p>\n<p>———————-2019.8.3—————————-</p>\n<p>1.x版本已经看完了，2.x版本也已经看完了。看完后觉得还是非常清晰地，当然和3.x版本相比，之前的版本还是有比较大的去别的。1.x和2.x版本总体上来讲，还是从远程仓库下载模板，可配置性虽然有但还是不够灵活，而且扩展性非常不好。3.x版本的最大特点就是插件式引入，而且开发者也可以直接开发自己的插件，更加灵活。</p>\n","site":{"data":{}},"excerpt":"<p>说起vue-cli源码的阅读，主要源于公司实习时候，对公司的前端脚手架比较感兴趣，然后就开始看了看，但是看的不是很明白。就准备先看看比较熟悉的vue-cli，而且vue-cli使用人数比较多，也有一些源码分析的文章，有助于代码的理解。</p>\n<p>但其实看一遍别人的文章，感觉只是稍微明白了一点。于是，本着学习cli工具的开发思路，因此，从master分支的第一个提交开始看起，准备梳理一下整个cli工具的开发流程，以及作者的一些思考。</p>\n<p>这篇文章将主要分析<code>vue-cli 1.x</code>版本的一些原理。</p>","more":"<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>bin/  目录下面放命令文件，比如<code>vue</code>，<code>vue-init</code>，<code>vue-list</code>，注意这里没有加js后缀</li>\n<li>lib/  目录下面放一些公共的方法</li>\n</ul>\n<p>其实vue-cli最初只提供了两种命令，分别是<code>vue init</code>初始化项目，以及<code>vue list</code>查看模板列表。命令行的控制则主要是引入<code>commander</code>包来控制。这里选项交互暂时没用到<code>inquirer</code>包，后面版本会用到。</p>\n<p>bin目录写到package.json文件中作用是可直接命令行启动，即<code>npm i -g</code>后可直接使用<code>vue init &lt;package-name&gt; &lt;project-name&gt;</code>形式。</p>\n<p>同时，为了方便调试，可以直接在目录下面<code>npm link</code>到全局，这样改动后可以直接看到效果。原理即创建软连接，使用<code>npm unlink</code>即可取消。</p>\n<h3 id=\"脚本文件调用\"><a href=\"#脚本文件调用\" class=\"headerlink\" title=\"脚本文件调用\"></a>脚本文件调用</h3><p>主文件vue如何根据用户输入选择执行不同脚本文件？</p>\n<p>最开始使用<code>child_process.spawn(脚本路径，参数)</code>直接执行，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里执行子进程，根据命令行输入，执行不同bin下文件</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里有一个执行权限问题，chmod 755 file</span></span><br><span class=\"line\"><span class=\"comment\">// 但是不太清楚如果发布以后，npm下载之后，是否可执行，如果权限是不可执行，那其它用户下载后又该如何解决？已解决，用commander特性</span></span><br><span class=\"line\">spawn(bin, args, &#123; <span class=\"attr\">stdio</span>: <span class=\"string\">&#x27;inherit&#x27;</span> &#125;)</span><br><span class=\"line\">  .on(<span class=\"string\">&#x27;close&#x27;</span>, process.exit.bind(process))</span><br></pre></td></tr></table></figure>\n\n<p>后来的提交直接使用了commander特性，如下所示，command加入第二个参数，就可以在目录下面寻找vue-init与vue-list文件执行，省了一大段调用nodeAPI获取输入参数，选择脚本路径与参数的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>)</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version)</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt; [options]&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;generate a new project from a template&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>, <span class=\"string\">&#x27;list available official templates&#x27;</span>)</span><br><span class=\"line\">  .parse(process.argv)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-init\"><a href=\"#vue-init\" class=\"headerlink\" title=\"vue init\"></a>vue init</h3><p><code>vue init</code>的思路很简单，就是预先写好一个模板，放到远程仓库中。然后当使用<code>vue init</code>选择不同模板构建时，则下载不同的模板。先将模板下载到<code>/tmp</code>下，然后再将其<code>generate</code>到项目位置，而不是直接将其下载到目标位置。</p>\n<p>一些预设选项是通过下载下来的模板中<code>meta.json</code>中的选项来交互。版本目前暂时还不能<code>init</code>成功，据我推测是代码比较老，和template不太匹配的缘故。比较有意思的是作者最初使用的<code>Khaos</code>包来<code>generate</code>到目标位置，可能作者觉得这个太麻烦了，重新封装了一下这个包叫<code>khaos-patched</code>，一行代码就能实现功能。也有些借鉴意义。</p>\n<p>这里有一个用法比较独特（之前没见过）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举例：如果返回-1，则 ~-1 为 0， 也就是说没有找到，即为false，加上！，即为 true，既没有找到就进入</span></span><br><span class=\"line\"><span class=\"comment\">// 如果返回其他值，则 ~number为 非0，即找到true，加上！即为false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!~template.indexOf(<span class=\"string\">&#x27;/&#x27;</span>)) &#123;</span><br><span class=\"line\">  template = <span class=\"string\">&#x27;vuejs-templates/&#x27;</span> + template</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算的上奇淫巧技吧，但是有意思的事，作者在后面的版本中修改了，变成了如下，可能是觉得可读性不太好？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasSlash = template.indexOf(<span class=\"string\">&#x27;/&#x27;</span>) &gt; -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!hasSlash) &#123;</span><br><span class=\"line\">  template = <span class=\"string\">&#x27;vuejs-templates/&#x27;</span> + template</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-list\"><a href=\"#vue-list\" class=\"headerlink\" title=\"vue list\"></a>vue list</h3><p>vue list实现思路很简单，直接发请求获取一些模板列表，显示出来。这里就不多做解释了。</p>\n<h2 id=\"更新情况\"><a href=\"#更新情况\" class=\"headerlink\" title=\"更新情况\"></a>更新情况</h2><h3 id=\"2-0-x\"><a href=\"#2-0-x\" class=\"headerlink\" title=\"2.0.x\"></a>2.0.x</h3><h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><h4 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>使用 inquirer 和 metalsmith 代替 Khaos 和 prompt-for</li>\n<li>添加lint和test,以及重构项目,将Metalsmith所用插件方法单独抽离,放进lib</li>\n<li>使用ora代替lib/spinner.js</li>\n<li>添加vue-cli版本检查</li>\n</ul>\n<h3 id=\"1-4-x\"><a href=\"#1-4-x\" class=\"headerlink\" title=\"1.4.x\"></a>1.4.x</h3><h4 id=\"完成功能-1\"><a href=\"#完成功能-1\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>添加lib/spinner.js下载动画</li>\n</ul>\n<h3 id=\"1-3-x\"><a href=\"#1-3-x\" class=\"headerlink\" title=\"1.3.x\"></a>1.3.x</h3><h4 id=\"依赖-1\"><a href=\"#依赖-1\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>prompt-for-patched: 命令行问题及选择</li>\n</ul>\n<h4 id=\"完成功能-2\"><a href=\"#完成功能-2\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>添加-c参数，可直接下载任意git仓库</li>\n<li>添加没有指定project-name时，可将当前目录初始化功能</li>\n</ul>\n<h3 id=\"1-2-x\"><a href=\"#1-2-x\" class=\"headerlink\" title=\"1.2.x\"></a>1.2.x</h3><h4 id=\"依赖-2\"><a href=\"#依赖-2\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>download-git-repo: 下载github仓库</li>\n</ul>\n<h4 id=\"完成功能-3\"><a href=\"#完成功能-3\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>使用download-git-repo替换download-github-repo</li>\n</ul>\n<h3 id=\"1-1-x\"><a href=\"#1-1-x\" class=\"headerlink\" title=\"1.1.x\"></a>1.1.x</h3><h4 id=\"依赖-3\"><a href=\"#依赖-3\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>khaos-patched: yyx自己基于khaos写的</li>\n</ul>\n<h4 id=\"完成功能-4\"><a href=\"#完成功能-4\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>将khaos替换为khaos-patched</li>\n<li>添加lib/git-user.js获取作者</li>\n</ul>\n<h3 id=\"1-0-x\"><a href=\"#1-0-x\" class=\"headerlink\" title=\"1.0.x\"></a>1.0.x</h3><h4 id=\"依赖-4\"><a href=\"#依赖-4\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><ul>\n<li>commander: 命令行交互</li>\n<li>chalk: 命令行高亮</li>\n<li>cross-spawn: Node子进程</li>\n<li>download-github-repo: 下载github上仓库</li>\n<li>khaos: 生成项目</li>\n<li>rimraf: rm -rf</li>\n<li>uid: 生成一串随机数</li>\n</ul>\n<h4 id=\"完成功能-5\"><a href=\"#完成功能-5\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h4><ul>\n<li>构建项目主框架，完成vue init功能和vue list功能，使用子进程切换执行脚本</li>\n<li>抽离lig/logger.js信息输出</li>\n<li>使用commander的方法,删除大量vue脚本代码</li>\n<li>增加目录下是否已有模板判断</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然，目前只是看了最初的几次提交，1.x版本还有好多次提交，代码结构比较简单，后面会愈发复杂。同时上述原理只是1.x的前期版本，不包括2.x以及3.x版本。特别是3.x有了较大的改进。</p>\n<p>———————-2019.8.3—————————-</p>\n<p>1.x版本已经看完了，2.x版本也已经看完了。看完后觉得还是非常清晰地，当然和3.x版本相比，之前的版本还是有比较大的去别的。1.x和2.x版本总体上来讲，还是从远程仓库下载模板，可配置性虽然有但还是不够灵活，而且扩展性非常不好。3.x版本的最大特点就是插件式引入，而且开发者也可以直接开发自己的插件，更加灵活。</p>"},{"title":"vue-cli源码学习2.x","date":"2019-08-03T12:52:38.000Z","toc":true,"_content":"\n## 前言\n\nvue-cli的2.9.6版本看完之后，对cli脚手架的整个原理才有了一个比较清晰的认识，其可配置性主要体现在三个方面，即可配置性问答，可配置性文件，可配置性文件内容。文章也将主要整理这三个部分是如何实现的。\n\n<!--more-->\n\n## 流程介绍\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-8-3/process.jpg\">\n\n* vue文件开始，根据输入`vue init/list` 执行不同文件\n\n  * 选择`vue init`，进入执行 `vue-init` \n\n  * 根据`isLocalPath()`判断是 本地模板 还是 官方模板\n    \n    * 如果是当前路径的`template`，则调用`getTemplatePath()`确保其是绝对路径，并进入 `generate()`\n    \n    * 如果是官方模板，则需要检查版本（向远程发送请求，获取cli当前latest的版本和本地安装的版本）\n    * 根据选择获取 模板路径，生成路径，项目名，进入 `downloadAndGenerate()`，然后`download()`之后进入`generate()`\n\n  * 进入`generate()` 首先通过`getOptions()`获取模板下`meta.js/meta.json`的配置（其中包含了不同模板的提问），`getOptions()`里面设置项目名，以及设置包名验证，然后调用`getGitUser()`获取git配置的用户名，然后设置作者\n\n  * 然后使用`Metalsmith`，先调用`meta.js`的`metalsmith.before`的方法，其目的是合并一些参数，比如合并isNotTest，然后在test测试的时候，跳过问答部分\n\n  * `metalsmith`可传入插件（函数）产生结果，其实和gulp的pipe管道很像\n\n    * 先调用 `askQuestions()` 获取模板中`meta.js`中的`prompt`数据，使用`inquirer`包来控制问答交互，并将用户输入答案存入`metalsmith.metadata()`全局变量中，以便后面使用\n    \n    * 然后调用 `filterFiles()` 获取模板中`meta.js`中的`filters`数据，然后根据上一步用户输入，来删去模板中用户不需要的文件。其实现方式是：遍历模板`filters`，然后内层遍历所有模板文件，如果符合某条件，则将该文件删去\n\n    * 调用 `renderTemplateFiles()` 跳过一些文件生成以及根据`Handlebars.registerHelper`的定义，替换模板中的部分，使其内容可配置。其中实现方法是：使用`handlebars`，模板渲染的时候将其中的部分替换，首先定义一些条件，然后在模板相应位置写条件（和ejs模板渲染引擎比较像），然后根据一些选项来控制具体内容是否需要，最后生成最终文件\n\n* `vue list`的实现则和vue 1.x版本相同，向远程仓库发起请求，获取对应模板列表，然后输出出来\n\n\n## 细节分析\n\n### 启动\n\n```js\nprogram\n  .version(require('../package').version)\n  .usage('<command> [options]')\n  .command('init', 'generate a new project from a template')\n  .command('list', 'list available official templates')\n  .command('build', 'prototype a new project')\n  .command('create', '(for v3 warning only)')\n\nprogram.parse(process.argv)\n```\n\n入口文件很简单，使用`commonder`的`command`方法，给第二个描述参数，则用户输入命令时执行不同的文件\n\n### 核心generate()\n\n#### npm包\n\n先看一下引入的npm包，注释里简单介绍一下功能\n\n```js\n// 命令行界面高亮\nconst chalk = require('chalk')\n// 传入方法，生成目标文件\nconst Metalsmith = require('metalsmith')\n// 构建语义模板，可以看到下载的模板里面有 if_eq 等字样\nconst Handlebars = require('handlebars')\n// 异步执行\nconst async = require('async')\n// 模板引擎合并库，直接使用了handlebars\nconst render = require('consolidate').handlebars.render\nconst path = require('path')\n// 匹配\nconst multimatch = require('multimatch')\n```\n\n#### generate()\n\n```js\nmodule.exports = function generate (name, src, dest, done) {\n  const opts = getOptions(name, src)\n  // console.log(\"opts:\", opts)\n  console.log(\"src:\", src)\n  const metalsmith = Metalsmith(path.join(src, 'template'))\n  const data = Object.assign(metalsmith.metadata(), {\n    destDirName: name,\n    inPlace: dest === process.cwd(),\n    noEscape: true\n  })\n  // console.log(\"metalsmith1:\", metalsmith)\n  opts.helpers && Object.keys(opts.helpers).map(key => {\n    Handlebars.registerHelper(key, opts.helpers[key])\n  })\n  const helpers = { chalk, logger }\n\n  if (opts.metalsmith && typeof opts.metalsmith.before === 'function') {\n    // 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出\n    // 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】\n    opts.metalsmith.before(metalsmith, opts, helpers)\n  }\n  // console.log(\"metalsmith2:\", metalsmith)\n\n  // 询问问题，\n  // 将不需要的文件过滤掉\n  // 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置\n  metalsmith.use(askQuestions(opts.prompts))\n    .use(filterFiles(opts.filters))\n    .use(renderTemplateFiles(opts.skipInterpolation))\n\n  if (typeof opts.metalsmith === 'function') {\n    opts.metalsmith(metalsmith, opts, helpers)\n  } else if (opts.metalsmith && typeof opts.metalsmith.after === 'function') {\n    opts.metalsmith.after(metalsmith, opts, helpers)\n  }\n\n  metalsmith.clean(false)\n    .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`\n    .destination(dest)\n    .build((err, files) => {\n      done(err)\n      if (typeof opts.complete === 'function') {\n        const helpers = { chalk, logger, files }\n        // 执行meta.js中的complete方法\n        // webpack模板中则是排序依赖包，安装依赖包，输出相应信息\n        opts.complete(data, helpers)\n      } else {\n        logMessage(opts.completeMessage, data)\n      }\n    })\n\n  return data\n}\n```\n\n代码很长，我们分开来讲，细节就不再多说，主要说核心实现。\n\n#### 生成文件前期\n\n```js\nconst opts = getOptions(name, src)\n// console.log(\"opts:\", opts)\nconsole.log(\"src:\", src)\nconst metalsmith = Metalsmith(path.join(src, 'template'))\nconst data = Object.assign(metalsmith.metadata(), {\n  destDirName: name,\n  inPlace: dest === process.cwd(),\n  noEscape: true\n})\n// console.log(\"metalsmith1:\", metalsmith)\nopts.helpers && Object.keys(opts.helpers).map(key => {\n  Handlebars.registerHelper(key, opts.helpers[key])\n})\nconst helpers = { chalk, logger }\n\nif (opts.metalsmith && typeof opts.metalsmith.before === 'function') {\n  // 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出\n  // 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】\n  opts.metalsmith.before(metalsmith, opts, helpers)\n}\n```\n\n这一部分做的事情主要是读取模板下`meta.js`文件中的配置信息，其中包含的信息有\n\n* `metalsmith`全局变量（比如isNotTest，应该就是在test时候跳过问答部分），通过`opts.metalsmith.before(metalsmith, opts, helpers)`合并进来\n\n* `helpers`即handlesbar的渲染模板，通过`Handlebars.registerHelper(key, opts.helpers[key])`合并进来\n\n* `prompts`即inquire需要使用的模板配置问题（后面讲）\n\n* `filters`即根据回答，讲不需要文件删除的部分（后面讲）\n\n* `complete`生成文件时调用（后面讲）\n\n#### 生成文件中期\n\n```js\n  // 询问问题，\n  // 将不需要的文件过滤掉\n  // 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置\n  metalsmith.use(askQuestions(opts.prompts))\n    .use(filterFiles(opts.filters))\n    .use(renderTemplateFiles(opts.skipInterpolation))\n```\n\n这一部分做了三件事，询问问题，过滤文件，模板渲染文件，其实现方式是\n\n* `askQuestions`就不详细说了，比较简单\n\n* `filterFiles`，通过遍历filters规则，然后内层遍历模板下所有文件，如果和filters的value相匹配，则delete掉文件\n\n```js\nconst fileNames = Object.keys(files)\n// console.log(\"fileNames:\", fileNames)\nObject.keys(filters).forEach(glob => {\n  // 遍历filters规则\n  fileNames.forEach(file => {\n    // 遍历生成的所有文件，dot允许匹配.开头的文件\n    if (match(file, glob, { dot: true })) {\n      // condition是filters的value\n      const condition = filters[glob]\n      if (!evaluate(condition, data)) {\n        delete files[file]\n      }\n    }\n  })\n})\n```\n\n* `renderTemplateFiles`，遍历每个文件，异步处理其中的内容，将所有可配置部分根据注册的模板以及回答，来选择文件内容如何生成。可以看下面的handlebars介绍\n\n```js\nreturn (files, metalsmith, done) => {\n  const keys = Object.keys(files)\n  const metalsmithMetadata = metalsmith.metadata()\n  async.each(keys, (file, next) => {\n    // skipping files with skipInterpolation option\n    if (skipInterpolation && multimatch([file], skipInterpolation, { dot: true }).length) {\n      return next()\n    }\n    // str是文件内容\n    const str = files[file].contents.toString()\n    console.log(\"str:\", str)\n    // do not attempt to render files that do not have mustaches\n    if (!/{{([^{}]+)}}/g.test(str)) {\n      return next()\n    }\n    // 使用handlebars，模板渲染的时候将其中的部分替换\n    // 比如：如果选择使用router，那么，模板中的main.js文件中就会渲染出import router部分\n    // {{#router}}\n    // import router from './router'\n    // {{/router}}\n    render(str, metalsmithMetadata, (err, res) => {\n      if (err) {\n        err.message = `[${file}] ${err.message}`\n        return next(err)\n      }\n      files[file].contents = new Buffer(res)\n      next()\n    })\n  }, done)\n}\n```\n\n#### handlebars\n\n```js\n// register handlebars helper\nHandlebars.registerHelper('if_eq', function (a, b, opts) {\n  return a === b\n    ? opts.fn(this)\n    : opts.inverse(this)\n})\n\nHandlebars.registerHelper('unless_eq', function (a, b, opts) {\n  return a === b\n    ? opts.inverse(this)\n    : opts.fn(this)\n})\n```\n\n注册模板渲染，作用是实现模板文件内容的可配置。举个例子，如果选择时，选择引入`vue-router`，那么这个时候，`main.js`肯定要引入，这个时候就可以根据`handlebars`注册的模板进行有选择性渲染。\n\n当然上面的注册并没有注册router的，因为不同模板不一样，并非每一个模板都需要router，那么是如何实现可配置性呢？就是根据用户选择，来选择是否需要渲染。\n\n这里贴一下webpack的模板就明白了\n\n```js\n{{#if_eq build \"standalone\"}}\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\n{{/if_eq}}\nimport Vue from 'vue'\nimport App from './App'\n{{#router}}\nimport router from './router'\n{{/router}}\n```\n\n\n#### 生成文件后期\n\n```js\nmetalsmith.clean(false)\n  .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`\n  .destination(dest)\n  .build((err, files) => {\n    done(err)\n    if (typeof opts.complete === 'function') {\n      const helpers = { chalk, logger, files }\n      // 执行meta.js中的complete方法\n      // webpack模板中则是排序依赖包，安装依赖包，输出相应信息\n      opts.complete(data, helpers)\n    } else {\n      logMessage(opts.completeMessage, data)\n    }\n  })\n```\n\n这一部分就是生成文件的部分了，在经过了前面三个函数的处理之后，此时的文件已经基本成型，内容也已经是配置后的了，这一部分还会调用一下`meta.js`中的`complete`部分，比如这里的`complete`就是先给依赖排序，然后执行`npm install`\n\n```js\ncomplete: function(data, { chalk }) {\n  const green = chalk.green\n\n  sortDependencies(data, green)\n\n  const cwd = path.join(process.cwd(), data.inPlace ? '' : data.destDirName)\n\n  if (data.autoInstall) {\n    installDependencies(cwd, data.autoInstall, green)\n      .then(() => {\n        return runLintFix(cwd, data, green)\n      })\n      .then(() => {\n        printMessage(data, green)\n      })\n      .catch(e => {\n        console.log(chalk.red('Error:'), e)\n      })\n  } else {\n    printMessage(data, chalk)\n  }\n}\n```\n\n\n## 总结\n\nvue cli 2.9.6是 2.x的最后一个版本，其核心内容就是generater()的部分，其包含了三大核心内容，可配置性问答，可配置性文件，可配置性文件内容。正是由于此，才另vue cli 2.x和1.x相比，更加的灵活。\n\n但是虽然如此，2.x和1.x还是都没有逃出其核心原理是直接下载远程模板，其配置性也都是在模板的基础上进行的。还是不够灵活，那vue 3.x则使用插件式，令模板更加灵活（当然这里vue cli 3.x还没有看完，说的不一定对，看完之后会回来修改的）","source":"_posts/28. vue-cli源码学习2.x.md","raw":"---\ntitle: vue-cli源码学习2.x\ndate: 2019-08-03 20:52:38\ntoc: true\ncategories:\n- 前端\ntags:\n- vue\n- cli\n---\n\n## 前言\n\nvue-cli的2.9.6版本看完之后，对cli脚手架的整个原理才有了一个比较清晰的认识，其可配置性主要体现在三个方面，即可配置性问答，可配置性文件，可配置性文件内容。文章也将主要整理这三个部分是如何实现的。\n\n<!--more-->\n\n## 流程介绍\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-8-3/process.jpg\">\n\n* vue文件开始，根据输入`vue init/list` 执行不同文件\n\n  * 选择`vue init`，进入执行 `vue-init` \n\n  * 根据`isLocalPath()`判断是 本地模板 还是 官方模板\n    \n    * 如果是当前路径的`template`，则调用`getTemplatePath()`确保其是绝对路径，并进入 `generate()`\n    \n    * 如果是官方模板，则需要检查版本（向远程发送请求，获取cli当前latest的版本和本地安装的版本）\n    * 根据选择获取 模板路径，生成路径，项目名，进入 `downloadAndGenerate()`，然后`download()`之后进入`generate()`\n\n  * 进入`generate()` 首先通过`getOptions()`获取模板下`meta.js/meta.json`的配置（其中包含了不同模板的提问），`getOptions()`里面设置项目名，以及设置包名验证，然后调用`getGitUser()`获取git配置的用户名，然后设置作者\n\n  * 然后使用`Metalsmith`，先调用`meta.js`的`metalsmith.before`的方法，其目的是合并一些参数，比如合并isNotTest，然后在test测试的时候，跳过问答部分\n\n  * `metalsmith`可传入插件（函数）产生结果，其实和gulp的pipe管道很像\n\n    * 先调用 `askQuestions()` 获取模板中`meta.js`中的`prompt`数据，使用`inquirer`包来控制问答交互，并将用户输入答案存入`metalsmith.metadata()`全局变量中，以便后面使用\n    \n    * 然后调用 `filterFiles()` 获取模板中`meta.js`中的`filters`数据，然后根据上一步用户输入，来删去模板中用户不需要的文件。其实现方式是：遍历模板`filters`，然后内层遍历所有模板文件，如果符合某条件，则将该文件删去\n\n    * 调用 `renderTemplateFiles()` 跳过一些文件生成以及根据`Handlebars.registerHelper`的定义，替换模板中的部分，使其内容可配置。其中实现方法是：使用`handlebars`，模板渲染的时候将其中的部分替换，首先定义一些条件，然后在模板相应位置写条件（和ejs模板渲染引擎比较像），然后根据一些选项来控制具体内容是否需要，最后生成最终文件\n\n* `vue list`的实现则和vue 1.x版本相同，向远程仓库发起请求，获取对应模板列表，然后输出出来\n\n\n## 细节分析\n\n### 启动\n\n```js\nprogram\n  .version(require('../package').version)\n  .usage('<command> [options]')\n  .command('init', 'generate a new project from a template')\n  .command('list', 'list available official templates')\n  .command('build', 'prototype a new project')\n  .command('create', '(for v3 warning only)')\n\nprogram.parse(process.argv)\n```\n\n入口文件很简单，使用`commonder`的`command`方法，给第二个描述参数，则用户输入命令时执行不同的文件\n\n### 核心generate()\n\n#### npm包\n\n先看一下引入的npm包，注释里简单介绍一下功能\n\n```js\n// 命令行界面高亮\nconst chalk = require('chalk')\n// 传入方法，生成目标文件\nconst Metalsmith = require('metalsmith')\n// 构建语义模板，可以看到下载的模板里面有 if_eq 等字样\nconst Handlebars = require('handlebars')\n// 异步执行\nconst async = require('async')\n// 模板引擎合并库，直接使用了handlebars\nconst render = require('consolidate').handlebars.render\nconst path = require('path')\n// 匹配\nconst multimatch = require('multimatch')\n```\n\n#### generate()\n\n```js\nmodule.exports = function generate (name, src, dest, done) {\n  const opts = getOptions(name, src)\n  // console.log(\"opts:\", opts)\n  console.log(\"src:\", src)\n  const metalsmith = Metalsmith(path.join(src, 'template'))\n  const data = Object.assign(metalsmith.metadata(), {\n    destDirName: name,\n    inPlace: dest === process.cwd(),\n    noEscape: true\n  })\n  // console.log(\"metalsmith1:\", metalsmith)\n  opts.helpers && Object.keys(opts.helpers).map(key => {\n    Handlebars.registerHelper(key, opts.helpers[key])\n  })\n  const helpers = { chalk, logger }\n\n  if (opts.metalsmith && typeof opts.metalsmith.before === 'function') {\n    // 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出\n    // 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】\n    opts.metalsmith.before(metalsmith, opts, helpers)\n  }\n  // console.log(\"metalsmith2:\", metalsmith)\n\n  // 询问问题，\n  // 将不需要的文件过滤掉\n  // 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置\n  metalsmith.use(askQuestions(opts.prompts))\n    .use(filterFiles(opts.filters))\n    .use(renderTemplateFiles(opts.skipInterpolation))\n\n  if (typeof opts.metalsmith === 'function') {\n    opts.metalsmith(metalsmith, opts, helpers)\n  } else if (opts.metalsmith && typeof opts.metalsmith.after === 'function') {\n    opts.metalsmith.after(metalsmith, opts, helpers)\n  }\n\n  metalsmith.clean(false)\n    .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`\n    .destination(dest)\n    .build((err, files) => {\n      done(err)\n      if (typeof opts.complete === 'function') {\n        const helpers = { chalk, logger, files }\n        // 执行meta.js中的complete方法\n        // webpack模板中则是排序依赖包，安装依赖包，输出相应信息\n        opts.complete(data, helpers)\n      } else {\n        logMessage(opts.completeMessage, data)\n      }\n    })\n\n  return data\n}\n```\n\n代码很长，我们分开来讲，细节就不再多说，主要说核心实现。\n\n#### 生成文件前期\n\n```js\nconst opts = getOptions(name, src)\n// console.log(\"opts:\", opts)\nconsole.log(\"src:\", src)\nconst metalsmith = Metalsmith(path.join(src, 'template'))\nconst data = Object.assign(metalsmith.metadata(), {\n  destDirName: name,\n  inPlace: dest === process.cwd(),\n  noEscape: true\n})\n// console.log(\"metalsmith1:\", metalsmith)\nopts.helpers && Object.keys(opts.helpers).map(key => {\n  Handlebars.registerHelper(key, opts.helpers[key])\n})\nconst helpers = { chalk, logger }\n\nif (opts.metalsmith && typeof opts.metalsmith.before === 'function') {\n  // 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出\n  // 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】\n  opts.metalsmith.before(metalsmith, opts, helpers)\n}\n```\n\n这一部分做的事情主要是读取模板下`meta.js`文件中的配置信息，其中包含的信息有\n\n* `metalsmith`全局变量（比如isNotTest，应该就是在test时候跳过问答部分），通过`opts.metalsmith.before(metalsmith, opts, helpers)`合并进来\n\n* `helpers`即handlesbar的渲染模板，通过`Handlebars.registerHelper(key, opts.helpers[key])`合并进来\n\n* `prompts`即inquire需要使用的模板配置问题（后面讲）\n\n* `filters`即根据回答，讲不需要文件删除的部分（后面讲）\n\n* `complete`生成文件时调用（后面讲）\n\n#### 生成文件中期\n\n```js\n  // 询问问题，\n  // 将不需要的文件过滤掉\n  // 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置\n  metalsmith.use(askQuestions(opts.prompts))\n    .use(filterFiles(opts.filters))\n    .use(renderTemplateFiles(opts.skipInterpolation))\n```\n\n这一部分做了三件事，询问问题，过滤文件，模板渲染文件，其实现方式是\n\n* `askQuestions`就不详细说了，比较简单\n\n* `filterFiles`，通过遍历filters规则，然后内层遍历模板下所有文件，如果和filters的value相匹配，则delete掉文件\n\n```js\nconst fileNames = Object.keys(files)\n// console.log(\"fileNames:\", fileNames)\nObject.keys(filters).forEach(glob => {\n  // 遍历filters规则\n  fileNames.forEach(file => {\n    // 遍历生成的所有文件，dot允许匹配.开头的文件\n    if (match(file, glob, { dot: true })) {\n      // condition是filters的value\n      const condition = filters[glob]\n      if (!evaluate(condition, data)) {\n        delete files[file]\n      }\n    }\n  })\n})\n```\n\n* `renderTemplateFiles`，遍历每个文件，异步处理其中的内容，将所有可配置部分根据注册的模板以及回答，来选择文件内容如何生成。可以看下面的handlebars介绍\n\n```js\nreturn (files, metalsmith, done) => {\n  const keys = Object.keys(files)\n  const metalsmithMetadata = metalsmith.metadata()\n  async.each(keys, (file, next) => {\n    // skipping files with skipInterpolation option\n    if (skipInterpolation && multimatch([file], skipInterpolation, { dot: true }).length) {\n      return next()\n    }\n    // str是文件内容\n    const str = files[file].contents.toString()\n    console.log(\"str:\", str)\n    // do not attempt to render files that do not have mustaches\n    if (!/{{([^{}]+)}}/g.test(str)) {\n      return next()\n    }\n    // 使用handlebars，模板渲染的时候将其中的部分替换\n    // 比如：如果选择使用router，那么，模板中的main.js文件中就会渲染出import router部分\n    // {{#router}}\n    // import router from './router'\n    // {{/router}}\n    render(str, metalsmithMetadata, (err, res) => {\n      if (err) {\n        err.message = `[${file}] ${err.message}`\n        return next(err)\n      }\n      files[file].contents = new Buffer(res)\n      next()\n    })\n  }, done)\n}\n```\n\n#### handlebars\n\n```js\n// register handlebars helper\nHandlebars.registerHelper('if_eq', function (a, b, opts) {\n  return a === b\n    ? opts.fn(this)\n    : opts.inverse(this)\n})\n\nHandlebars.registerHelper('unless_eq', function (a, b, opts) {\n  return a === b\n    ? opts.inverse(this)\n    : opts.fn(this)\n})\n```\n\n注册模板渲染，作用是实现模板文件内容的可配置。举个例子，如果选择时，选择引入`vue-router`，那么这个时候，`main.js`肯定要引入，这个时候就可以根据`handlebars`注册的模板进行有选择性渲染。\n\n当然上面的注册并没有注册router的，因为不同模板不一样，并非每一个模板都需要router，那么是如何实现可配置性呢？就是根据用户选择，来选择是否需要渲染。\n\n这里贴一下webpack的模板就明白了\n\n```js\n{{#if_eq build \"standalone\"}}\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\n{{/if_eq}}\nimport Vue from 'vue'\nimport App from './App'\n{{#router}}\nimport router from './router'\n{{/router}}\n```\n\n\n#### 生成文件后期\n\n```js\nmetalsmith.clean(false)\n  .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`\n  .destination(dest)\n  .build((err, files) => {\n    done(err)\n    if (typeof opts.complete === 'function') {\n      const helpers = { chalk, logger, files }\n      // 执行meta.js中的complete方法\n      // webpack模板中则是排序依赖包，安装依赖包，输出相应信息\n      opts.complete(data, helpers)\n    } else {\n      logMessage(opts.completeMessage, data)\n    }\n  })\n```\n\n这一部分就是生成文件的部分了，在经过了前面三个函数的处理之后，此时的文件已经基本成型，内容也已经是配置后的了，这一部分还会调用一下`meta.js`中的`complete`部分，比如这里的`complete`就是先给依赖排序，然后执行`npm install`\n\n```js\ncomplete: function(data, { chalk }) {\n  const green = chalk.green\n\n  sortDependencies(data, green)\n\n  const cwd = path.join(process.cwd(), data.inPlace ? '' : data.destDirName)\n\n  if (data.autoInstall) {\n    installDependencies(cwd, data.autoInstall, green)\n      .then(() => {\n        return runLintFix(cwd, data, green)\n      })\n      .then(() => {\n        printMessage(data, green)\n      })\n      .catch(e => {\n        console.log(chalk.red('Error:'), e)\n      })\n  } else {\n    printMessage(data, chalk)\n  }\n}\n```\n\n\n## 总结\n\nvue cli 2.9.6是 2.x的最后一个版本，其核心内容就是generater()的部分，其包含了三大核心内容，可配置性问答，可配置性文件，可配置性文件内容。正是由于此，才另vue cli 2.x和1.x相比，更加的灵活。\n\n但是虽然如此，2.x和1.x还是都没有逃出其核心原理是直接下载远程模板，其配置性也都是在模板的基础上进行的。还是不够灵活，那vue 3.x则使用插件式，令模板更加灵活（当然这里vue cli 3.x还没有看完，说的不一定对，看完之后会回来修改的）","slug":"28. vue-cli源码学习2.x","published":1,"updated":"2021-09-30T06:47:47.426Z","_id":"cku41le8v0012idp2divfhg3l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>vue-cli的2.9.6版本看完之后，对cli脚手架的整个原理才有了一个比较清晰的认识，其可配置性主要体现在三个方面，即可配置性问答，可配置性文件，可配置性文件内容。文章也将主要整理这三个部分是如何实现的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"流程介绍\"><a href=\"#流程介绍\" class=\"headerlink\" title=\"流程介绍\"></a>流程介绍</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-8-3/process.jpg\">\n\n<ul>\n<li><p>vue文件开始，根据输入<code>vue init/list</code> 执行不同文件</p>\n<ul>\n<li><p>选择<code>vue init</code>，进入执行 <code>vue-init</code> </p>\n</li>\n<li><p>根据<code>isLocalPath()</code>判断是 本地模板 还是 官方模板</p>\n<ul>\n<li><p>如果是当前路径的<code>template</code>，则调用<code>getTemplatePath()</code>确保其是绝对路径，并进入 <code>generate()</code></p>\n</li>\n<li><p>如果是官方模板，则需要检查版本（向远程发送请求，获取cli当前latest的版本和本地安装的版本）</p>\n</li>\n<li><p>根据选择获取 模板路径，生成路径，项目名，进入 <code>downloadAndGenerate()</code>，然后<code>download()</code>之后进入<code>generate()</code></p>\n</li>\n</ul>\n</li>\n<li><p>进入<code>generate()</code> 首先通过<code>getOptions()</code>获取模板下<code>meta.js/meta.json</code>的配置（其中包含了不同模板的提问），<code>getOptions()</code>里面设置项目名，以及设置包名验证，然后调用<code>getGitUser()</code>获取git配置的用户名，然后设置作者</p>\n</li>\n<li><p>然后使用<code>Metalsmith</code>，先调用<code>meta.js</code>的<code>metalsmith.before</code>的方法，其目的是合并一些参数，比如合并isNotTest，然后在test测试的时候，跳过问答部分</p>\n</li>\n<li><p><code>metalsmith</code>可传入插件（函数）产生结果，其实和gulp的pipe管道很像</p>\n<ul>\n<li><p>先调用 <code>askQuestions()</code> 获取模板中<code>meta.js</code>中的<code>prompt</code>数据，使用<code>inquirer</code>包来控制问答交互，并将用户输入答案存入<code>metalsmith.metadata()</code>全局变量中，以便后面使用</p>\n</li>\n<li><p>然后调用 <code>filterFiles()</code> 获取模板中<code>meta.js</code>中的<code>filters</code>数据，然后根据上一步用户输入，来删去模板中用户不需要的文件。其实现方式是：遍历模板<code>filters</code>，然后内层遍历所有模板文件，如果符合某条件，则将该文件删去</p>\n</li>\n<li><p>调用 <code>renderTemplateFiles()</code> 跳过一些文件生成以及根据<code>Handlebars.registerHelper</code>的定义，替换模板中的部分，使其内容可配置。其中实现方法是：使用<code>handlebars</code>，模板渲染的时候将其中的部分替换，首先定义一些条件，然后在模板相应位置写条件（和ejs模板渲染引擎比较像），然后根据一些选项来控制具体内容是否需要，最后生成最终文件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>vue list</code>的实现则和vue 1.x版本相同，向远程仓库发起请求，获取对应模板列表，然后输出出来</p>\n</li>\n</ul>\n<h2 id=\"细节分析\"><a href=\"#细节分析\" class=\"headerlink\" title=\"细节分析\"></a>细节分析</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version)</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt; [options]&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;generate a new project from a template&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>, <span class=\"string\">&#x27;list available official templates&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;prototype a new project&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;create&#x27;</span>, <span class=\"string\">&#x27;(for v3 warning only)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br></pre></td></tr></table></figure>\n\n<p>入口文件很简单，使用<code>commonder</code>的<code>command</code>方法，给第二个描述参数，则用户输入命令时执行不同的文件</p>\n<h3 id=\"核心generate\"><a href=\"#核心generate\" class=\"headerlink\" title=\"核心generate()\"></a>核心generate()</h3><h4 id=\"npm包\"><a href=\"#npm包\" class=\"headerlink\" title=\"npm包\"></a>npm包</h4><p>先看一下引入的npm包，注释里简单介绍一下功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令行界面高亮</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 传入方法，生成目标文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Metalsmith = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;metalsmith&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 构建语义模板，可以看到下载的模板里面有 if_eq 等字样</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Handlebars = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;handlebars&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 异步执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">async</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;async&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 模板引擎合并库，直接使用了handlebars</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;consolidate&#x27;</span>).handlebars.render</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 匹配</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> multimatch = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;multimatch&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate()\"></a>generate()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span> (<span class=\"params\">name, src, dest, done</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = getOptions(name, src)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;opts:&quot;, opts)</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;src:&quot;</span>, src)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> metalsmith = Metalsmith(path.join(src, <span class=\"string\">&#x27;template&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(metalsmith.metadata(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">destDirName</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">inPlace</span>: dest === process.cwd(),</span><br><span class=\"line\">    <span class=\"attr\">noEscape</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;metalsmith1:&quot;, metalsmith)</span></span><br><span class=\"line\">  opts.helpers &amp;&amp; <span class=\"built_in\">Object</span>.keys(opts.helpers).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Handlebars.registerHelper(key, opts.helpers[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helpers = &#123; chalk, logger &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.before === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出</span></span><br><span class=\"line\">    <span class=\"comment\">// 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】</span></span><br><span class=\"line\">    opts.metalsmith.before(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;metalsmith2:&quot;, metalsmith)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 询问问题，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将不需要的文件过滤掉</span></span><br><span class=\"line\">  <span class=\"comment\">// 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置</span></span><br><span class=\"line\">  metalsmith.use(askQuestions(opts.prompts))</span><br><span class=\"line\">    .use(filterFiles(opts.filters))</span><br><span class=\"line\">    .use(renderTemplateFiles(opts.skipInterpolation))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.metalsmith === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    opts.metalsmith(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.after === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    opts.metalsmith.after(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  metalsmith.clean(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    .source(<span class=\"string\">&#x27;.&#x27;</span>) <span class=\"comment\">// start from template root instead of `./src` which is Metalsmith&#x27;s default for `source`</span></span><br><span class=\"line\">    .destination(dest)</span><br><span class=\"line\">    .build(<span class=\"function\">(<span class=\"params\">err, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      done(err)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.complete === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> helpers = &#123; chalk, logger, files &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 执行meta.js中的complete方法</span></span><br><span class=\"line\">        <span class=\"comment\">// webpack模板中则是排序依赖包，安装依赖包，输出相应信息</span></span><br><span class=\"line\">        opts.complete(data, helpers)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logMessage(opts.completeMessage, data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码很长，我们分开来讲，细节就不再多说，主要说核心实现。</p>\n<h4 id=\"生成文件前期\"><a href=\"#生成文件前期\" class=\"headerlink\" title=\"生成文件前期\"></a>生成文件前期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> opts = getOptions(name, src)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;opts:&quot;, opts)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;src:&quot;</span>, src)</span><br><span class=\"line\"><span class=\"keyword\">const</span> metalsmith = Metalsmith(path.join(src, <span class=\"string\">&#x27;template&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(metalsmith.metadata(), &#123;</span><br><span class=\"line\">  <span class=\"attr\">destDirName</span>: name,</span><br><span class=\"line\">  <span class=\"attr\">inPlace</span>: dest === process.cwd(),</span><br><span class=\"line\">  <span class=\"attr\">noEscape</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;metalsmith1:&quot;, metalsmith)</span></span><br><span class=\"line\">opts.helpers &amp;&amp; <span class=\"built_in\">Object</span>.keys(opts.helpers).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  Handlebars.registerHelper(key, opts.helpers[key])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> helpers = &#123; chalk, logger &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.before === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出</span></span><br><span class=\"line\">  <span class=\"comment\">// 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】</span></span><br><span class=\"line\">  opts.metalsmith.before(metalsmith, opts, helpers)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分做的事情主要是读取模板下<code>meta.js</code>文件中的配置信息，其中包含的信息有</p>\n<ul>\n<li><p><code>metalsmith</code>全局变量（比如isNotTest，应该就是在test时候跳过问答部分），通过<code>opts.metalsmith.before(metalsmith, opts, helpers)</code>合并进来</p>\n</li>\n<li><p><code>helpers</code>即handlesbar的渲染模板，通过<code>Handlebars.registerHelper(key, opts.helpers[key])</code>合并进来</p>\n</li>\n<li><p><code>prompts</code>即inquire需要使用的模板配置问题（后面讲）</p>\n</li>\n<li><p><code>filters</code>即根据回答，讲不需要文件删除的部分（后面讲）</p>\n</li>\n<li><p><code>complete</code>生成文件时调用（后面讲）</p>\n</li>\n</ul>\n<h4 id=\"生成文件中期\"><a href=\"#生成文件中期\" class=\"headerlink\" title=\"生成文件中期\"></a>生成文件中期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 询问问题，</span></span><br><span class=\"line\"><span class=\"comment\">// 将不需要的文件过滤掉</span></span><br><span class=\"line\"><span class=\"comment\">// 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置</span></span><br><span class=\"line\">metalsmith.use(askQuestions(opts.prompts))</span><br><span class=\"line\">  .use(filterFiles(opts.filters))</span><br><span class=\"line\">  .use(renderTemplateFiles(opts.skipInterpolation))</span><br></pre></td></tr></table></figure>\n\n<p>这一部分做了三件事，询问问题，过滤文件，模板渲染文件，其实现方式是</p>\n<ul>\n<li><p><code>askQuestions</code>就不详细说了，比较简单</p>\n</li>\n<li><p><code>filterFiles</code>，通过遍历filters规则，然后内层遍历模板下所有文件，如果和filters的value相匹配，则delete掉文件</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileNames = <span class=\"built_in\">Object</span>.keys(files)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;fileNames:&quot;, fileNames)</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(filters).forEach(<span class=\"function\"><span class=\"params\">glob</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历filters规则</span></span><br><span class=\"line\">  fileNames.forEach(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历生成的所有文件，dot允许匹配.开头的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match(file, glob, &#123; <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// condition是filters的value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> condition = filters[glob]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!evaluate(condition, data)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> files[file]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>renderTemplateFiles</code>，遍历每个文件，异步处理其中的内容，将所有可配置部分根据注册的模板以及回答，来选择文件内容如何生成。可以看下面的handlebars介绍</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">files, metalsmith, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(files)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> metalsmithMetadata = metalsmith.metadata()</span><br><span class=\"line\">  <span class=\"keyword\">async</span>.each(keys, <span class=\"function\">(<span class=\"params\">file, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// skipping files with skipInterpolation option</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (skipInterpolation &amp;&amp; multimatch([file], skipInterpolation, &#123; <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;).length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// str是文件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = files[file].contents.toString()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;str:&quot;</span>, str)</span><br><span class=\"line\">    <span class=\"comment\">// do not attempt to render files that do not have mustaches</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/&#123;&#123;([^&#123;&#125;]+)&#125;&#125;/g</span>.test(str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用handlebars，模板渲染的时候将其中的部分替换</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如：如果选择使用router，那么，模板中的main.js文件中就会渲染出import router部分</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;&#123;#router&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// import router from &#x27;./router&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;&#123;/router&#125;&#125;</span></span><br><span class=\"line\">    render(str, metalsmithMetadata, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        err.message = <span class=\"string\">`[<span class=\"subst\">$&#123;file&#125;</span>] <span class=\"subst\">$&#123;err.message&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> next(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files[file].contents = <span class=\"keyword\">new</span> Buffer(res)</span><br><span class=\"line\">      next()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, done)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a>handlebars</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register handlebars helper</span></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">&#x27;if_eq&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, opts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a === b</span><br><span class=\"line\">    ? opts.fn(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    : opts.inverse(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">&#x27;unless_eq&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, opts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a === b</span><br><span class=\"line\">    ? opts.inverse(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    : opts.fn(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注册模板渲染，作用是实现模板文件内容的可配置。举个例子，如果选择时，选择引入<code>vue-router</code>，那么这个时候，<code>main.js</code>肯定要引入，这个时候就可以根据<code>handlebars</code>注册的模板进行有选择性渲染。</p>\n<p>当然上面的注册并没有注册router的，因为不同模板不一样，并非每一个模板都需要router，那么是如何实现可配置性呢？就是根据用户选择，来选择是否需要渲染。</p>\n<p>这里贴一下webpack的模板就明白了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;#if_eq build <span class=\"string\">&quot;standalone&quot;</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\">&#123;&#123;/if_eq&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\">&#123;&#123;#router&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\">&#123;&#123;/router&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"生成文件后期\"><a href=\"#生成文件后期\" class=\"headerlink\" title=\"生成文件后期\"></a>生成文件后期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metalsmith.clean(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  .source(<span class=\"string\">&#x27;.&#x27;</span>) <span class=\"comment\">// start from template root instead of `./src` which is Metalsmith&#x27;s default for `source`</span></span><br><span class=\"line\">  .destination(dest)</span><br><span class=\"line\">  .build(<span class=\"function\">(<span class=\"params\">err, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    done(err)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.complete === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> helpers = &#123; chalk, logger, files &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 执行meta.js中的complete方法</span></span><br><span class=\"line\">      <span class=\"comment\">// webpack模板中则是排序依赖包，安装依赖包，输出相应信息</span></span><br><span class=\"line\">      opts.complete(data, helpers)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      logMessage(opts.completeMessage, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分就是生成文件的部分了，在经过了前面三个函数的处理之后，此时的文件已经基本成型，内容也已经是配置后的了，这一部分还会调用一下<code>meta.js</code>中的<code>complete</code>部分，比如这里的<code>complete</code>就是先给依赖排序，然后执行<code>npm install</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, &#123; chalk &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> green = chalk.green</span><br><span class=\"line\"></span><br><span class=\"line\">  sortDependencies(data, green)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cwd = path.join(process.cwd(), data.inPlace ? <span class=\"string\">&#x27;&#x27;</span> : data.destDirName)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.autoInstall) &#123;</span><br><span class=\"line\">    installDependencies(cwd, data.autoInstall, green)</span><br><span class=\"line\">      .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runLintFix(cwd, data, green)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        printMessage(data, green)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">&#x27;Error:&#x27;</span>), e)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    printMessage(data, chalk)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>vue cli 2.9.6是 2.x的最后一个版本，其核心内容就是generater()的部分，其包含了三大核心内容，可配置性问答，可配置性文件，可配置性文件内容。正是由于此，才另vue cli 2.x和1.x相比，更加的灵活。</p>\n<p>但是虽然如此，2.x和1.x还是都没有逃出其核心原理是直接下载远程模板，其配置性也都是在模板的基础上进行的。还是不够灵活，那vue 3.x则使用插件式，令模板更加灵活（当然这里vue cli 3.x还没有看完，说的不一定对，看完之后会回来修改的）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>vue-cli的2.9.6版本看完之后，对cli脚手架的整个原理才有了一个比较清晰的认识，其可配置性主要体现在三个方面，即可配置性问答，可配置性文件，可配置性文件内容。文章也将主要整理这三个部分是如何实现的。</p>","more":"<h2 id=\"流程介绍\"><a href=\"#流程介绍\" class=\"headerlink\" title=\"流程介绍\"></a>流程介绍</h2><img src=\"https://file-1305436646.file.myqcloud.com/blog/2019-8-3/process.jpg\">\n\n<ul>\n<li><p>vue文件开始，根据输入<code>vue init/list</code> 执行不同文件</p>\n<ul>\n<li><p>选择<code>vue init</code>，进入执行 <code>vue-init</code> </p>\n</li>\n<li><p>根据<code>isLocalPath()</code>判断是 本地模板 还是 官方模板</p>\n<ul>\n<li><p>如果是当前路径的<code>template</code>，则调用<code>getTemplatePath()</code>确保其是绝对路径，并进入 <code>generate()</code></p>\n</li>\n<li><p>如果是官方模板，则需要检查版本（向远程发送请求，获取cli当前latest的版本和本地安装的版本）</p>\n</li>\n<li><p>根据选择获取 模板路径，生成路径，项目名，进入 <code>downloadAndGenerate()</code>，然后<code>download()</code>之后进入<code>generate()</code></p>\n</li>\n</ul>\n</li>\n<li><p>进入<code>generate()</code> 首先通过<code>getOptions()</code>获取模板下<code>meta.js/meta.json</code>的配置（其中包含了不同模板的提问），<code>getOptions()</code>里面设置项目名，以及设置包名验证，然后调用<code>getGitUser()</code>获取git配置的用户名，然后设置作者</p>\n</li>\n<li><p>然后使用<code>Metalsmith</code>，先调用<code>meta.js</code>的<code>metalsmith.before</code>的方法，其目的是合并一些参数，比如合并isNotTest，然后在test测试的时候，跳过问答部分</p>\n</li>\n<li><p><code>metalsmith</code>可传入插件（函数）产生结果，其实和gulp的pipe管道很像</p>\n<ul>\n<li><p>先调用 <code>askQuestions()</code> 获取模板中<code>meta.js</code>中的<code>prompt</code>数据，使用<code>inquirer</code>包来控制问答交互，并将用户输入答案存入<code>metalsmith.metadata()</code>全局变量中，以便后面使用</p>\n</li>\n<li><p>然后调用 <code>filterFiles()</code> 获取模板中<code>meta.js</code>中的<code>filters</code>数据，然后根据上一步用户输入，来删去模板中用户不需要的文件。其实现方式是：遍历模板<code>filters</code>，然后内层遍历所有模板文件，如果符合某条件，则将该文件删去</p>\n</li>\n<li><p>调用 <code>renderTemplateFiles()</code> 跳过一些文件生成以及根据<code>Handlebars.registerHelper</code>的定义，替换模板中的部分，使其内容可配置。其中实现方法是：使用<code>handlebars</code>，模板渲染的时候将其中的部分替换，首先定义一些条件，然后在模板相应位置写条件（和ejs模板渲染引擎比较像），然后根据一些选项来控制具体内容是否需要，最后生成最终文件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>vue list</code>的实现则和vue 1.x版本相同，向远程仓库发起请求，获取对应模板列表，然后输出出来</p>\n</li>\n</ul>\n<h2 id=\"细节分析\"><a href=\"#细节分析\" class=\"headerlink\" title=\"细节分析\"></a>细节分析</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">program</span><br><span class=\"line\">  .version(<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../package&#x27;</span>).version)</span><br><span class=\"line\">  .usage(<span class=\"string\">&#x27;&lt;command&gt; [options]&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;generate a new project from a template&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;list&#x27;</span>, <span class=\"string\">&#x27;list available official templates&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;build&#x27;</span>, <span class=\"string\">&#x27;prototype a new project&#x27;</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">&#x27;create&#x27;</span>, <span class=\"string\">&#x27;(for v3 warning only)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv)</span><br></pre></td></tr></table></figure>\n\n<p>入口文件很简单，使用<code>commonder</code>的<code>command</code>方法，给第二个描述参数，则用户输入命令时执行不同的文件</p>\n<h3 id=\"核心generate\"><a href=\"#核心generate\" class=\"headerlink\" title=\"核心generate()\"></a>核心generate()</h3><h4 id=\"npm包\"><a href=\"#npm包\" class=\"headerlink\" title=\"npm包\"></a>npm包</h4><p>先看一下引入的npm包，注释里简单介绍一下功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令行界面高亮</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 传入方法，生成目标文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Metalsmith = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;metalsmith&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 构建语义模板，可以看到下载的模板里面有 if_eq 等字样</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Handlebars = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;handlebars&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 异步执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">async</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;async&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 模板引擎合并库，直接使用了handlebars</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;consolidate&#x27;</span>).handlebars.render</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 匹配</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> multimatch = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;multimatch&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate()\"></a>generate()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generate</span> (<span class=\"params\">name, src, dest, done</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = getOptions(name, src)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;opts:&quot;, opts)</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;src:&quot;</span>, src)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> metalsmith = Metalsmith(path.join(src, <span class=\"string\">&#x27;template&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(metalsmith.metadata(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">destDirName</span>: name,</span><br><span class=\"line\">    <span class=\"attr\">inPlace</span>: dest === process.cwd(),</span><br><span class=\"line\">    <span class=\"attr\">noEscape</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;metalsmith1:&quot;, metalsmith)</span></span><br><span class=\"line\">  opts.helpers &amp;&amp; <span class=\"built_in\">Object</span>.keys(opts.helpers).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Handlebars.registerHelper(key, opts.helpers[key])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helpers = &#123; chalk, logger &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.before === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出</span></span><br><span class=\"line\">    <span class=\"comment\">// 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】</span></span><br><span class=\"line\">    opts.metalsmith.before(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&quot;metalsmith2:&quot;, metalsmith)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 询问问题，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将不需要的文件过滤掉</span></span><br><span class=\"line\">  <span class=\"comment\">// 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置</span></span><br><span class=\"line\">  metalsmith.use(askQuestions(opts.prompts))</span><br><span class=\"line\">    .use(filterFiles(opts.filters))</span><br><span class=\"line\">    .use(renderTemplateFiles(opts.skipInterpolation))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.metalsmith === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    opts.metalsmith(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.after === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    opts.metalsmith.after(metalsmith, opts, helpers)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  metalsmith.clean(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    .source(<span class=\"string\">&#x27;.&#x27;</span>) <span class=\"comment\">// start from template root instead of `./src` which is Metalsmith&#x27;s default for `source`</span></span><br><span class=\"line\">    .destination(dest)</span><br><span class=\"line\">    .build(<span class=\"function\">(<span class=\"params\">err, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      done(err)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.complete === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> helpers = &#123; chalk, logger, files &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 执行meta.js中的complete方法</span></span><br><span class=\"line\">        <span class=\"comment\">// webpack模板中则是排序依赖包，安装依赖包，输出相应信息</span></span><br><span class=\"line\">        opts.complete(data, helpers)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logMessage(opts.completeMessage, data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码很长，我们分开来讲，细节就不再多说，主要说核心实现。</p>\n<h4 id=\"生成文件前期\"><a href=\"#生成文件前期\" class=\"headerlink\" title=\"生成文件前期\"></a>生成文件前期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> opts = getOptions(name, src)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;opts:&quot;, opts)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;src:&quot;</span>, src)</span><br><span class=\"line\"><span class=\"keyword\">const</span> metalsmith = Metalsmith(path.join(src, <span class=\"string\">&#x27;template&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(metalsmith.metadata(), &#123;</span><br><span class=\"line\">  <span class=\"attr\">destDirName</span>: name,</span><br><span class=\"line\">  <span class=\"attr\">inPlace</span>: dest === process.cwd(),</span><br><span class=\"line\">  <span class=\"attr\">noEscape</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;metalsmith1:&quot;, metalsmith)</span></span><br><span class=\"line\">opts.helpers &amp;&amp; <span class=\"built_in\">Object</span>.keys(opts.helpers).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  Handlebars.registerHelper(key, opts.helpers[key])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> helpers = &#123; chalk, logger &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.metalsmith &amp;&amp; <span class=\"keyword\">typeof</span> opts.metalsmith.before === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用meta.js的metalsmith.before的方法，并传入metalsmith，meta.js的配置，以及高亮和打印输出</span></span><br><span class=\"line\">  <span class=\"comment\">// 做的工作是合并一个isnotTest，目测应该是做一个不是test的标识【待验证】</span></span><br><span class=\"line\">  opts.metalsmith.before(metalsmith, opts, helpers)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分做的事情主要是读取模板下<code>meta.js</code>文件中的配置信息，其中包含的信息有</p>\n<ul>\n<li><p><code>metalsmith</code>全局变量（比如isNotTest，应该就是在test时候跳过问答部分），通过<code>opts.metalsmith.before(metalsmith, opts, helpers)</code>合并进来</p>\n</li>\n<li><p><code>helpers</code>即handlesbar的渲染模板，通过<code>Handlebars.registerHelper(key, opts.helpers[key])</code>合并进来</p>\n</li>\n<li><p><code>prompts</code>即inquire需要使用的模板配置问题（后面讲）</p>\n</li>\n<li><p><code>filters</code>即根据回答，讲不需要文件删除的部分（后面讲）</p>\n</li>\n<li><p><code>complete</code>生成文件时调用（后面讲）</p>\n</li>\n</ul>\n<h4 id=\"生成文件中期\"><a href=\"#生成文件中期\" class=\"headerlink\" title=\"生成文件中期\"></a>生成文件中期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 询问问题，</span></span><br><span class=\"line\"><span class=\"comment\">// 将不需要的文件过滤掉</span></span><br><span class=\"line\"><span class=\"comment\">// 跳过一些文件生成以及根据Handlebars.registerHelper的定义，替换模板中的部分，使其内容可配置</span></span><br><span class=\"line\">metalsmith.use(askQuestions(opts.prompts))</span><br><span class=\"line\">  .use(filterFiles(opts.filters))</span><br><span class=\"line\">  .use(renderTemplateFiles(opts.skipInterpolation))</span><br></pre></td></tr></table></figure>\n\n<p>这一部分做了三件事，询问问题，过滤文件，模板渲染文件，其实现方式是</p>\n<ul>\n<li><p><code>askQuestions</code>就不详细说了，比较简单</p>\n</li>\n<li><p><code>filterFiles</code>，通过遍历filters规则，然后内层遍历模板下所有文件，如果和filters的value相匹配，则delete掉文件</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileNames = <span class=\"built_in\">Object</span>.keys(files)</span><br><span class=\"line\"><span class=\"comment\">// console.log(&quot;fileNames:&quot;, fileNames)</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(filters).forEach(<span class=\"function\"><span class=\"params\">glob</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历filters规则</span></span><br><span class=\"line\">  fileNames.forEach(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历生成的所有文件，dot允许匹配.开头的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match(file, glob, &#123; <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// condition是filters的value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> condition = filters[glob]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!evaluate(condition, data)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> files[file]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>renderTemplateFiles</code>，遍历每个文件，异步处理其中的内容，将所有可配置部分根据注册的模板以及回答，来选择文件内容如何生成。可以看下面的handlebars介绍</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">files, metalsmith, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(files)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> metalsmithMetadata = metalsmith.metadata()</span><br><span class=\"line\">  <span class=\"keyword\">async</span>.each(keys, <span class=\"function\">(<span class=\"params\">file, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// skipping files with skipInterpolation option</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (skipInterpolation &amp;&amp; multimatch([file], skipInterpolation, &#123; <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;).length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// str是文件内容</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = files[file].contents.toString()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;str:&quot;</span>, str)</span><br><span class=\"line\">    <span class=\"comment\">// do not attempt to render files that do not have mustaches</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/&#123;&#123;([^&#123;&#125;]+)&#125;&#125;/g</span>.test(str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用handlebars，模板渲染的时候将其中的部分替换</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如：如果选择使用router，那么，模板中的main.js文件中就会渲染出import router部分</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;&#123;#router&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// import router from &#x27;./router&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;&#123;/router&#125;&#125;</span></span><br><span class=\"line\">    render(str, metalsmithMetadata, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        err.message = <span class=\"string\">`[<span class=\"subst\">$&#123;file&#125;</span>] <span class=\"subst\">$&#123;err.message&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> next(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files[file].contents = <span class=\"keyword\">new</span> Buffer(res)</span><br><span class=\"line\">      next()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, done)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"handlebars\"><a href=\"#handlebars\" class=\"headerlink\" title=\"handlebars\"></a>handlebars</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register handlebars helper</span></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">&#x27;if_eq&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, opts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a === b</span><br><span class=\"line\">    ? opts.fn(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    : opts.inverse(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">&#x27;unless_eq&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, opts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a === b</span><br><span class=\"line\">    ? opts.inverse(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    : opts.fn(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注册模板渲染，作用是实现模板文件内容的可配置。举个例子，如果选择时，选择引入<code>vue-router</code>，那么这个时候，<code>main.js</code>肯定要引入，这个时候就可以根据<code>handlebars</code>注册的模板进行有选择性渲染。</p>\n<p>当然上面的注册并没有注册router的，因为不同模板不一样，并非每一个模板都需要router，那么是如何实现可配置性呢？就是根据用户选择，来选择是否需要渲染。</p>\n<p>这里贴一下webpack的模板就明白了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;#if_eq build <span class=\"string\">&quot;standalone&quot;</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\">&#123;&#123;/if_eq&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\">&#123;&#123;#router&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\">&#123;&#123;/router&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"生成文件后期\"><a href=\"#生成文件后期\" class=\"headerlink\" title=\"生成文件后期\"></a>生成文件后期</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metalsmith.clean(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  .source(<span class=\"string\">&#x27;.&#x27;</span>) <span class=\"comment\">// start from template root instead of `./src` which is Metalsmith&#x27;s default for `source`</span></span><br><span class=\"line\">  .destination(dest)</span><br><span class=\"line\">  .build(<span class=\"function\">(<span class=\"params\">err, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    done(err)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opts.complete === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> helpers = &#123; chalk, logger, files &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 执行meta.js中的complete方法</span></span><br><span class=\"line\">      <span class=\"comment\">// webpack模板中则是排序依赖包，安装依赖包，输出相应信息</span></span><br><span class=\"line\">      opts.complete(data, helpers)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      logMessage(opts.completeMessage, data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分就是生成文件的部分了，在经过了前面三个函数的处理之后，此时的文件已经基本成型，内容也已经是配置后的了，这一部分还会调用一下<code>meta.js</code>中的<code>complete</code>部分，比如这里的<code>complete</code>就是先给依赖排序，然后执行<code>npm install</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, &#123; chalk &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> green = chalk.green</span><br><span class=\"line\"></span><br><span class=\"line\">  sortDependencies(data, green)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cwd = path.join(process.cwd(), data.inPlace ? <span class=\"string\">&#x27;&#x27;</span> : data.destDirName)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.autoInstall) &#123;</span><br><span class=\"line\">    installDependencies(cwd, data.autoInstall, green)</span><br><span class=\"line\">      .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runLintFix(cwd, data, green)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        printMessage(data, green)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">&#x27;Error:&#x27;</span>), e)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    printMessage(data, chalk)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>vue cli 2.9.6是 2.x的最后一个版本，其核心内容就是generater()的部分，其包含了三大核心内容，可配置性问答，可配置性文件，可配置性文件内容。正是由于此，才另vue cli 2.x和1.x相比，更加的灵活。</p>\n<p>但是虽然如此，2.x和1.x还是都没有逃出其核心原理是直接下载远程模板，其配置性也都是在模板的基础上进行的。还是不够灵活，那vue 3.x则使用插件式，令模板更加灵活（当然这里vue cli 3.x还没有看完，说的不一定对，看完之后会回来修改的）</p>"},{"title":"浏览器重绘和requestAnimationFrame","date":"2020-05-07T08:18:19.000Z","toc":true,"_content":"\n又是很久没写文章了，简单总结一下从去年八月到现在将近一年的事吧，去年八月那会儿当时在学脚手架相关的部分，当时实习了一个月就离职准备秋招了，然后在秋招也拿到了满意的offer了。然后就是大四寒假了，写了一个外卖平台的小程序，差不多写了快两个月吧，中间也确实遇到一些比较有意思的问题，后面会简单整理一下遇到的问题。然后就是毕业设计和毕业论文了。差不多项目上主要做了这些事情吧，小程序和毕业设计也算是都有所收获吧。\n\n然后就是回到本文中的标题了，因为被分到了小游戏的组，入职后可能会做一些工具上的开发。因为这方面实在是了解不多，也是趁着论文写完赶紧先学习一下相关的部分吧。\n\n<!--more-->\n\n## 思考\n\n其实目前根据个人粗浅的理解，小游戏就是不同帧数绘制不同的物体，中间可能会有一些用户的交互来改变这些物体的位置等等。\n\n那么虽然微信小游戏和浏览器的环境不同，但是也有相似之处，因为了解不多，这里暂且先归为一类。那么图像的绘制必然要涉及到浏览器的绘制部分。\n\n其实经历了春招秋招，大家对浏览器的工作原理比如语法分析、构建DOM、重绘重排等等流程肯定都比较了解了。这里就不再多说，但是目前又产生了一些疑问。首先`requestAnimationFrame`的使用就是在浏览器绘制之前会产生回调，因为浏览器的一些策略等等，大概是 1000ms / 60 近似等于 16.7ms 的频率绘制。\n\n* 但是这里每经过 16.7ms 浏览器一定会绘制吗？这里的浏览器绘制和重绘是一个概念吗？\n\n* 如何捕捉浏览器何时进行绘制 或者 何时进行重绘？使用 requestAnimationFrame来捕捉？\n\n首先，必须要知道，浏览器有自己的一些优化策略，比如连续的更改DOM的颜色，按照对个人对重绘的理解，更改颜色是会触发重绘的，更改DOM位置等会触发回流，回流必然重绘。但是假如连续的更改两次颜色（css要指定`transition`动画），比如\n\n```js\ndocument.getElementById('test').style.backgroundColor = 'red'\ndocument.getElementById('test').style.backgroundColor = 'blue'\n```\n\n诸如上面代码其实并不会看到颜色的变化，即只能看到蓝色，而不能看到红色，那么明显浏览器对这部分在一定时间会收集所有操作，然后一次改变，我暂时认为这个时间是浏览器绘制的频率时间即16.7ms为界。\n\n然后根据对回流重绘的了解，诸如获取布局尺寸等信息的时候，为了保证准确性会强制触发回流重绘，比如`offsetTop`、`getComputedStyle()`等等[相关资料]('https://juejin.im/post/5e8ec67ce51d4546fd4813d3')。\n\n因此我们做如下改动\n\n```js\ndocument.getElementById('test').style.backgroundColor = 'red'\nconsole.log(\"offsetTop:\", document.getElementById('test').offsetTop)\ndocument.getElementById('test').style.backgroundColor = 'blue'\n```\n\n可以发现颜色发生了渐变，那么可以得出会触发浏览器重新绘制，但是问题来了，我如何去得出浏览器在执行`offsetTop`的时候发生了重新绘制？根据我目前所掌握的，我发现似乎只有`requestAnimationFrame`有可能能捕捉这个过程，按照我原本的理解，由于触发重新绘制，所以这个时候会触发`requestAnimationFrame`的回调，因此我写下了下面的代码\n\n```js\n    let number = 1\n    let date = new Date().getTime()\n    window.requestAnimationFrame(count)\n    document.getElementById('test').style.backgroundColor = 'red';\n    console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n\n    // for (let i = 0; i < 10000; i++) {\n    //   console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n    // }\n\n    document.getElementById('test').style.backgroundColor = 'blue';\n\n    function count() {\n      console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n      let now = new Date().getTime()\n      let res = now - date\n      date = now\n      console.log(\"res:\", res)\n      number++\n      \n      window.requestAnimationFrame(count)\n    }\n```\n\n按照我原先的想法，在count函数中立即触发`offsetTop`来立即刷新浏览器绘制，此时输出的res数值一定会有介于0-16.7ms之间的。但是在写下这篇文章的过程中，我又突然想到，16.7ms是浏览器基于硬件限制做出的界定，因此可以说16.7ms是最理想的刷新情况，因此应该是不可能出现小于16.7ms的情况。\n\n那么问题来了，`offsetTop`触发回流重绘如何体现？\n\n将中间注释掉的代码加上后，会发现第一次`requestAnimationFrame`回调大概发生在600ms左右，因此说明浏览器绘制延迟了很久。\n\n在吃饭的时候，我发现我其实想清楚了一个问题，那就是浏览器重绘(repaint)和浏览器的绘制(paint)似乎是两个概念。借用一下[浏览器渲染原理文中的分析]('https://juejin.im/post/5d707d48f265da03c23ef4aa')\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/1.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/2.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/3.jpg\">\n\n可以看出按照文中的分析，重绘是一个整体的过程，而按照个人的理解requestAnimationFrame所指的浏览器刷新频率是一个固定频率刷新的东西，这里我认为由于个人知识的局限，暂时没有必要将其的概念分析的很清晰，目前需要清楚的地方：\n\n* 浏览器重绘是一个过程，涉及到计算样式、排版计算、绘制、渲染层合并等流程的整体过程\n\n* requestAnimationFrame是一个浏览器根据硬件限制所做出的刷新频率回调（虽然似乎并不一定会固定回调，比如上文中代码的测试）\n\n暂时清楚这两个点目前来讲已经可以，具体的区别与联系目前看别人的技术文章似乎已经没有办法回答我的个人疑惑，只等后面这方面技术积累更多的时候，有更加多的想法的时候再来看这个问题，也许能有不同的见解。\n","source":"_posts/29. 浏览器重绘和requestAnimationFrame.md","raw":"---\ntitle: 浏览器重绘和requestAnimationFrame\ndate: 2020-05-07 16:18:19\ntoc: true\ncategories:\n- 前端\ntags:\n- 浏览器\n---\n\n又是很久没写文章了，简单总结一下从去年八月到现在将近一年的事吧，去年八月那会儿当时在学脚手架相关的部分，当时实习了一个月就离职准备秋招了，然后在秋招也拿到了满意的offer了。然后就是大四寒假了，写了一个外卖平台的小程序，差不多写了快两个月吧，中间也确实遇到一些比较有意思的问题，后面会简单整理一下遇到的问题。然后就是毕业设计和毕业论文了。差不多项目上主要做了这些事情吧，小程序和毕业设计也算是都有所收获吧。\n\n然后就是回到本文中的标题了，因为被分到了小游戏的组，入职后可能会做一些工具上的开发。因为这方面实在是了解不多，也是趁着论文写完赶紧先学习一下相关的部分吧。\n\n<!--more-->\n\n## 思考\n\n其实目前根据个人粗浅的理解，小游戏就是不同帧数绘制不同的物体，中间可能会有一些用户的交互来改变这些物体的位置等等。\n\n那么虽然微信小游戏和浏览器的环境不同，但是也有相似之处，因为了解不多，这里暂且先归为一类。那么图像的绘制必然要涉及到浏览器的绘制部分。\n\n其实经历了春招秋招，大家对浏览器的工作原理比如语法分析、构建DOM、重绘重排等等流程肯定都比较了解了。这里就不再多说，但是目前又产生了一些疑问。首先`requestAnimationFrame`的使用就是在浏览器绘制之前会产生回调，因为浏览器的一些策略等等，大概是 1000ms / 60 近似等于 16.7ms 的频率绘制。\n\n* 但是这里每经过 16.7ms 浏览器一定会绘制吗？这里的浏览器绘制和重绘是一个概念吗？\n\n* 如何捕捉浏览器何时进行绘制 或者 何时进行重绘？使用 requestAnimationFrame来捕捉？\n\n首先，必须要知道，浏览器有自己的一些优化策略，比如连续的更改DOM的颜色，按照对个人对重绘的理解，更改颜色是会触发重绘的，更改DOM位置等会触发回流，回流必然重绘。但是假如连续的更改两次颜色（css要指定`transition`动画），比如\n\n```js\ndocument.getElementById('test').style.backgroundColor = 'red'\ndocument.getElementById('test').style.backgroundColor = 'blue'\n```\n\n诸如上面代码其实并不会看到颜色的变化，即只能看到蓝色，而不能看到红色，那么明显浏览器对这部分在一定时间会收集所有操作，然后一次改变，我暂时认为这个时间是浏览器绘制的频率时间即16.7ms为界。\n\n然后根据对回流重绘的了解，诸如获取布局尺寸等信息的时候，为了保证准确性会强制触发回流重绘，比如`offsetTop`、`getComputedStyle()`等等[相关资料]('https://juejin.im/post/5e8ec67ce51d4546fd4813d3')。\n\n因此我们做如下改动\n\n```js\ndocument.getElementById('test').style.backgroundColor = 'red'\nconsole.log(\"offsetTop:\", document.getElementById('test').offsetTop)\ndocument.getElementById('test').style.backgroundColor = 'blue'\n```\n\n可以发现颜色发生了渐变，那么可以得出会触发浏览器重新绘制，但是问题来了，我如何去得出浏览器在执行`offsetTop`的时候发生了重新绘制？根据我目前所掌握的，我发现似乎只有`requestAnimationFrame`有可能能捕捉这个过程，按照我原本的理解，由于触发重新绘制，所以这个时候会触发`requestAnimationFrame`的回调，因此我写下了下面的代码\n\n```js\n    let number = 1\n    let date = new Date().getTime()\n    window.requestAnimationFrame(count)\n    document.getElementById('test').style.backgroundColor = 'red';\n    console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n\n    // for (let i = 0; i < 10000; i++) {\n    //   console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n    // }\n\n    document.getElementById('test').style.backgroundColor = 'blue';\n\n    function count() {\n      console.log(\"offsetTop:\", document.getElementById('test').offsetTop)\n      let now = new Date().getTime()\n      let res = now - date\n      date = now\n      console.log(\"res:\", res)\n      number++\n      \n      window.requestAnimationFrame(count)\n    }\n```\n\n按照我原先的想法，在count函数中立即触发`offsetTop`来立即刷新浏览器绘制，此时输出的res数值一定会有介于0-16.7ms之间的。但是在写下这篇文章的过程中，我又突然想到，16.7ms是浏览器基于硬件限制做出的界定，因此可以说16.7ms是最理想的刷新情况，因此应该是不可能出现小于16.7ms的情况。\n\n那么问题来了，`offsetTop`触发回流重绘如何体现？\n\n将中间注释掉的代码加上后，会发现第一次`requestAnimationFrame`回调大概发生在600ms左右，因此说明浏览器绘制延迟了很久。\n\n在吃饭的时候，我发现我其实想清楚了一个问题，那就是浏览器重绘(repaint)和浏览器的绘制(paint)似乎是两个概念。借用一下[浏览器渲染原理文中的分析]('https://juejin.im/post/5d707d48f265da03c23ef4aa')\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/1.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/2.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/3.jpg\">\n\n可以看出按照文中的分析，重绘是一个整体的过程，而按照个人的理解requestAnimationFrame所指的浏览器刷新频率是一个固定频率刷新的东西，这里我认为由于个人知识的局限，暂时没有必要将其的概念分析的很清晰，目前需要清楚的地方：\n\n* 浏览器重绘是一个过程，涉及到计算样式、排版计算、绘制、渲染层合并等流程的整体过程\n\n* requestAnimationFrame是一个浏览器根据硬件限制所做出的刷新频率回调（虽然似乎并不一定会固定回调，比如上文中代码的测试）\n\n暂时清楚这两个点目前来讲已经可以，具体的区别与联系目前看别人的技术文章似乎已经没有办法回答我的个人疑惑，只等后面这方面技术积累更多的时候，有更加多的想法的时候再来看这个问题，也许能有不同的见解。\n","slug":"29. 浏览器重绘和requestAnimationFrame","published":1,"updated":"2021-10-09T08:06:40.743Z","_id":"cku41le8w0015idp2d3j108ka","comments":1,"layout":"post","photos":[],"link":"","content":"<p>又是很久没写文章了，简单总结一下从去年八月到现在将近一年的事吧，去年八月那会儿当时在学脚手架相关的部分，当时实习了一个月就离职准备秋招了，然后在秋招也拿到了满意的offer了。然后就是大四寒假了，写了一个外卖平台的小程序，差不多写了快两个月吧，中间也确实遇到一些比较有意思的问题，后面会简单整理一下遇到的问题。然后就是毕业设计和毕业论文了。差不多项目上主要做了这些事情吧，小程序和毕业设计也算是都有所收获吧。</p>\n<p>然后就是回到本文中的标题了，因为被分到了小游戏的组，入职后可能会做一些工具上的开发。因为这方面实在是了解不多，也是趁着论文写完赶紧先学习一下相关的部分吧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>其实目前根据个人粗浅的理解，小游戏就是不同帧数绘制不同的物体，中间可能会有一些用户的交互来改变这些物体的位置等等。</p>\n<p>那么虽然微信小游戏和浏览器的环境不同，但是也有相似之处，因为了解不多，这里暂且先归为一类。那么图像的绘制必然要涉及到浏览器的绘制部分。</p>\n<p>其实经历了春招秋招，大家对浏览器的工作原理比如语法分析、构建DOM、重绘重排等等流程肯定都比较了解了。这里就不再多说，但是目前又产生了一些疑问。首先<code>requestAnimationFrame</code>的使用就是在浏览器绘制之前会产生回调，因为浏览器的一些策略等等，大概是 1000ms / 60 近似等于 16.7ms 的频率绘制。</p>\n<ul>\n<li><p>但是这里每经过 16.7ms 浏览器一定会绘制吗？这里的浏览器绘制和重绘是一个概念吗？</p>\n</li>\n<li><p>如何捕捉浏览器何时进行绘制 或者 何时进行重绘？使用 requestAnimationFrame来捕捉？</p>\n</li>\n</ul>\n<p>首先，必须要知道，浏览器有自己的一些优化策略，比如连续的更改DOM的颜色，按照对个人对重绘的理解，更改颜色是会触发重绘的，更改DOM位置等会触发回流，回流必然重绘。但是假如连续的更改两次颜色（css要指定<code>transition</code>动画），比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>诸如上面代码其实并不会看到颜色的变化，即只能看到蓝色，而不能看到红色，那么明显浏览器对这部分在一定时间会收集所有操作，然后一次改变，我暂时认为这个时间是浏览器绘制的频率时间即16.7ms为界。</p>\n<p>然后根据对回流重绘的了解，诸如获取布局尺寸等信息的时候，为了保证准确性会强制触发回流重绘，比如<code>offsetTop</code>、<code>getComputedStyle()</code>等等<a href=\"'https://juejin.im/post/5e8ec67ce51d4546fd4813d3'\">相关资料</a>。</p>\n<p>因此我们做如下改动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以发现颜色发生了渐变，那么可以得出会触发浏览器重新绘制，但是问题来了，我如何去得出浏览器在执行<code>offsetTop</code>的时候发生了重新绘制？根据我目前所掌握的，我发现似乎只有<code>requestAnimationFrame</code>有可能能捕捉这个过程，按照我原本的理解，由于触发重新绘制，所以这个时候会触发<code>requestAnimationFrame</code>的回调，因此我写下了下面的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame(count)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for (let i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;offsetTop:&quot;, document.getElementById(&#x27;test&#x27;).offsetTop)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = now - date</span><br><span class=\"line\">  date = now</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res:&quot;</span>, res)</span><br><span class=\"line\">  number++</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">window</span>.requestAnimationFrame(count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照我原先的想法，在count函数中立即触发<code>offsetTop</code>来立即刷新浏览器绘制，此时输出的res数值一定会有介于0-16.7ms之间的。但是在写下这篇文章的过程中，我又突然想到，16.7ms是浏览器基于硬件限制做出的界定，因此可以说16.7ms是最理想的刷新情况，因此应该是不可能出现小于16.7ms的情况。</p>\n<p>那么问题来了，<code>offsetTop</code>触发回流重绘如何体现？</p>\n<p>将中间注释掉的代码加上后，会发现第一次<code>requestAnimationFrame</code>回调大概发生在600ms左右，因此说明浏览器绘制延迟了很久。</p>\n<p>在吃饭的时候，我发现我其实想清楚了一个问题，那就是浏览器重绘(repaint)和浏览器的绘制(paint)似乎是两个概念。借用一下<a href=\"'https://juejin.im/post/5d707d48f265da03c23ef4aa'\">浏览器渲染原理文中的分析</a></p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/1.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/2.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/3.jpg\">\n\n<p>可以看出按照文中的分析，重绘是一个整体的过程，而按照个人的理解requestAnimationFrame所指的浏览器刷新频率是一个固定频率刷新的东西，这里我认为由于个人知识的局限，暂时没有必要将其的概念分析的很清晰，目前需要清楚的地方：</p>\n<ul>\n<li><p>浏览器重绘是一个过程，涉及到计算样式、排版计算、绘制、渲染层合并等流程的整体过程</p>\n</li>\n<li><p>requestAnimationFrame是一个浏览器根据硬件限制所做出的刷新频率回调（虽然似乎并不一定会固定回调，比如上文中代码的测试）</p>\n</li>\n</ul>\n<p>暂时清楚这两个点目前来讲已经可以，具体的区别与联系目前看别人的技术文章似乎已经没有办法回答我的个人疑惑，只等后面这方面技术积累更多的时候，有更加多的想法的时候再来看这个问题，也许能有不同的见解。</p>\n","site":{"data":{}},"excerpt":"<p>又是很久没写文章了，简单总结一下从去年八月到现在将近一年的事吧，去年八月那会儿当时在学脚手架相关的部分，当时实习了一个月就离职准备秋招了，然后在秋招也拿到了满意的offer了。然后就是大四寒假了，写了一个外卖平台的小程序，差不多写了快两个月吧，中间也确实遇到一些比较有意思的问题，后面会简单整理一下遇到的问题。然后就是毕业设计和毕业论文了。差不多项目上主要做了这些事情吧，小程序和毕业设计也算是都有所收获吧。</p>\n<p>然后就是回到本文中的标题了，因为被分到了小游戏的组，入职后可能会做一些工具上的开发。因为这方面实在是了解不多，也是趁着论文写完赶紧先学习一下相关的部分吧。</p>","more":"<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>其实目前根据个人粗浅的理解，小游戏就是不同帧数绘制不同的物体，中间可能会有一些用户的交互来改变这些物体的位置等等。</p>\n<p>那么虽然微信小游戏和浏览器的环境不同，但是也有相似之处，因为了解不多，这里暂且先归为一类。那么图像的绘制必然要涉及到浏览器的绘制部分。</p>\n<p>其实经历了春招秋招，大家对浏览器的工作原理比如语法分析、构建DOM、重绘重排等等流程肯定都比较了解了。这里就不再多说，但是目前又产生了一些疑问。首先<code>requestAnimationFrame</code>的使用就是在浏览器绘制之前会产生回调，因为浏览器的一些策略等等，大概是 1000ms / 60 近似等于 16.7ms 的频率绘制。</p>\n<ul>\n<li><p>但是这里每经过 16.7ms 浏览器一定会绘制吗？这里的浏览器绘制和重绘是一个概念吗？</p>\n</li>\n<li><p>如何捕捉浏览器何时进行绘制 或者 何时进行重绘？使用 requestAnimationFrame来捕捉？</p>\n</li>\n</ul>\n<p>首先，必须要知道，浏览器有自己的一些优化策略，比如连续的更改DOM的颜色，按照对个人对重绘的理解，更改颜色是会触发重绘的，更改DOM位置等会触发回流，回流必然重绘。但是假如连续的更改两次颜色（css要指定<code>transition</code>动画），比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>诸如上面代码其实并不会看到颜色的变化，即只能看到蓝色，而不能看到红色，那么明显浏览器对这部分在一定时间会收集所有操作，然后一次改变，我暂时认为这个时间是浏览器绘制的频率时间即16.7ms为界。</p>\n<p>然后根据对回流重绘的了解，诸如获取布局尺寸等信息的时候，为了保证准确性会强制触发回流重绘，比如<code>offsetTop</code>、<code>getComputedStyle()</code>等等<a href=\"'https://juejin.im/post/5e8ec67ce51d4546fd4813d3'\">相关资料</a>。</p>\n<p>因此我们做如下改动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以发现颜色发生了渐变，那么可以得出会触发浏览器重新绘制，但是问题来了，我如何去得出浏览器在执行<code>offsetTop</code>的时候发生了重新绘制？根据我目前所掌握的，我发现似乎只有<code>requestAnimationFrame</code>有可能能捕捉这个过程，按照我原本的理解，由于触发重新绘制，所以这个时候会触发<code>requestAnimationFrame</code>的回调，因此我写下了下面的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame(count)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;red&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for (let i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;offsetTop:&quot;, document.getElementById(&#x27;test&#x27;).offsetTop)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).style.backgroundColor = <span class=\"string\">&#x27;blue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;offsetTop:&quot;</span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;test&#x27;</span>).offsetTop)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = now - date</span><br><span class=\"line\">  date = now</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res:&quot;</span>, res)</span><br><span class=\"line\">  number++</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">window</span>.requestAnimationFrame(count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照我原先的想法，在count函数中立即触发<code>offsetTop</code>来立即刷新浏览器绘制，此时输出的res数值一定会有介于0-16.7ms之间的。但是在写下这篇文章的过程中，我又突然想到，16.7ms是浏览器基于硬件限制做出的界定，因此可以说16.7ms是最理想的刷新情况，因此应该是不可能出现小于16.7ms的情况。</p>\n<p>那么问题来了，<code>offsetTop</code>触发回流重绘如何体现？</p>\n<p>将中间注释掉的代码加上后，会发现第一次<code>requestAnimationFrame</code>回调大概发生在600ms左右，因此说明浏览器绘制延迟了很久。</p>\n<p>在吃饭的时候，我发现我其实想清楚了一个问题，那就是浏览器重绘(repaint)和浏览器的绘制(paint)似乎是两个概念。借用一下<a href=\"'https://juejin.im/post/5d707d48f265da03c23ef4aa'\">浏览器渲染原理文中的分析</a></p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/1.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/2.jpg\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2020-5-7/3.jpg\">\n\n<p>可以看出按照文中的分析，重绘是一个整体的过程，而按照个人的理解requestAnimationFrame所指的浏览器刷新频率是一个固定频率刷新的东西，这里我认为由于个人知识的局限，暂时没有必要将其的概念分析的很清晰，目前需要清楚的地方：</p>\n<ul>\n<li><p>浏览器重绘是一个过程，涉及到计算样式、排版计算、绘制、渲染层合并等流程的整体过程</p>\n</li>\n<li><p>requestAnimationFrame是一个浏览器根据硬件限制所做出的刷新频率回调（虽然似乎并不一定会固定回调，比如上文中代码的测试）</p>\n</li>\n</ul>\n<p>暂时清楚这两个点目前来讲已经可以，具体的区别与联系目前看别人的技术文章似乎已经没有办法回答我的个人疑惑，只等后面这方面技术积累更多的时候，有更加多的想法的时候再来看这个问题，也许能有不同的见解。</p>"},{"title":"DOM操作","date":"2017-10-10T14:31:41.000Z","toc":true,"_content":"\n最近虽然一直在做一些小任务，但是发现对HTML元素的操作并不十分清楚，完全是为了实现而实现，代码质量太低，于是准备将DOM梳理一下。\n\n<!--more-->\n\n## HTML DOM节点树\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-1.png)\n\n简单讲，通过HTML DOM，树中的所有节点都可以通过JavaScript的代码进行访问，即对HTML的元素进行修改、添加、删除等操作。此本分务必熟练掌握。\n\n为了便于理解关于节点问题，我从W3c引一个例子，如下代码段：\n\n```html\n<html>\n  <head>\n    <title>DOM 教程</title>\n  </head>\n  <body>\n    <h1>DOM 第一课</h1>\n    <p>Hello world!</p>\n  </body>\n</html>\n```\n\n从上面代码中\n* &lt;head> 和 &lt;body> 的父节点是 &lt;html> 节点\n* 文本节点 \"Hello world!\" 的父节点是 &lt;p> 节点\n* &lt;title> 节点也拥有一个子节点：文本节点 \"DOM 教程\"\n* &lt;h1> 和 &lt;p> 节点是同胞节点，同时也是 &lt;body> 的子节点\n并且：\n* &lt;head> 元素是 &lt;html> 元素的首个子节点\n* &lt;body> 元素是 &lt;html> 元素的最后一个子节点\n\n（顺便说一句，由于Markdown语法是最终变成HTML代码，所以尖括号会无法显示，于是可用'&lt加一个;'代替前尖括号，用'&gt加一个;'代替后尖括号。）\n\n## HTML DOM常用方法及对象\n\n一些常用的 HTML DOM 方法：\n* getElementById(id) - 获取带有指定 id 的节点（元素）\n* appendChild(node) - 插入新的子节点（元素）\n* removeChild(node) - 删除子节点（元素）\n\n一些常用的 HTML DOM 属性：\n* innerHTML - 节点（元素）的文本值\n* parentNode - 节点（元素）的父节点\n* childNodes - 节点（元素）的子节点\n* attributes - 节点（元素）的属性节点\n\n以上内容基本为概念，下面开始测试。\n\n## 一、元素内容的获取\n\n本块测试将测试innerHTML、nodeValue属性对元素内容的获取，以及nodeName及nodeType的作用测试。\n\n将要操作的HTML代码如下：\n\n```html\n<div id=\"div\">\n  <h1 id=\"h1\">Hello</h1>\n  <p id=\"p\">Word</p>\n</div>\n```\n\n### 1、innerHTML获取目标内容：\n\n```js\nvar text1 = document.getElementById('h1').innerHTML;\ndocument.write(text1);\n```\n\n可以看到innerHTML直接获取了目标内容，虽然此时处在文本节点的父节点位置。\n\n### 2、nodeValue获取：\n\n```js\nvar text2 = document.getElementById('h1');\ndocument.write(text2.firstChild.nodeValue);\n```\n\n需要注意的是当获取id之后此时处于h1元素位置处，innerHTML可以直接获取内容。而nodeValue则需先用firstChild等获取目标文本节点，然后用nodeValue获取内容。\n\n** 补充nodeName作用 **\nnodeName 属性规定节点的名称。\n\n* 元素节点的 nodeName 与标签名相同\n* 属性节点的 nodeName 与属性名相同\n* 文本节点的 nodeName 始终是 #text\n\n** 补充nodeType作用 **\nnodeType 属性返回节点的类型。nodeType 是只读的。\n\n\n## 二、元素的访问\n访问这部分主要测试getElementsByTagName() 方法、getElementsByClassName() 方法这两个。\n\n将要操作的HTML代码如下：\n\n```html\n<p id=\"p1\" class=\"x\">这句为div外面第一个p</p>\n<p >这句为div外面第二个p</p>\n<div id=\"div\" class=\"x\">\n  <h1 id=\"h1\" class=\"x\">Hello</h1>\n  <p id=\"p2\" class=\"x\">这句为div里面第一个p</p>\n  <p id=\"p3\">这句为div里面第二个p</p>\n</div>\n```\n\n### 1、getElementsByTagName方法\n\n作用：getElementsByTagName() 返回带有指定标签名的所有元素。\n\n```js\nvar t1 = document.getElementsByTagName('p');\ndocument.write(t1[0].innerHTML);\ndocument.write(t1[2].innerHTML);\ndocument.write('<br>');\n```\n\n上例输出为：\n这句为div外面第一个p这句为div里面第一个p\n\n```js\n//当已经用getElementById获取时\nvar t2 = document.getElementById('div').getElementsByTagName('p');\ndocument.write(t2[0].innerHTML);\ndocument.write('<br>');\n```\n\n输出为：\n这句为div里面第一个p\n\n从上面两例可以看出当没有限定时，获取到的元素为所有部分，但是当已经限定在id为div的标签时，此时则只会获取到标签内的部分。\n\n### 2、getElementsByClassName方法\n\n如果希望查找带有相同类名的所有 HTML 元素，请使用这个方法。\n注意该方法与IE 5,6,7,8不兼容\n\n```js\nvar t3 = document.getElementsByClassName('x');\ndocument.write(t3[0].innerHTML);\n\n//当获取到整块div时，innerHTML会将整个内容获取\ndocument.write(t3[1].innerHTML);\n```\n注意浏览器的兼容性，尽量少用该方法，或直接用相应代码兼容IE低版本。\n\n## 三、元素的修改\n\n这部分内容并不复杂，因此把代码贴上，以便查看即可。\n\n```html\n<p id=\"p1\">Hello</p>\n<script type=\"text/javascript\">\n  //元素修改\n  document.getElementById('p1').innerHTML = \"World\";\n  document.getElementById('p1').style.color = 'blue';\n</script>\n```\n\n上面的操作即修改内容，以及修改CSS样式。\n\n\n## 四、元素的添加与删除\n\n元素内容的添加与删除是DOM操作的核心，这部分较为重要，综合运用了以上三部分内容。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <p id=\"p1\">Hello</p>\n  <div id=\"a\">\n    <p id=\"p2\">第一行</p>\n    <p id=\"p3\">第二行</p>\n  </div>\n  <script type=\"text/javascript\">\n    //元素修改\n    document.getElementById('p1').innerHTML = \"World\";\n    document.getElementById('p1').style.color = 'blue';\n\n    //appendChild插入\n    var node = document.createElement('p');\n    var textNode = document.createTextNode(\"第三行\");\n    node.appendChild(textNode);\n    var element = document.getElementById('a');\n    element.appendChild(node);\n\n    //使用insertBefore\n    var new_node = document.createElement('p');\n    var new_textNode = document.createTextNode('第零行');\n    new_node.appendChild(new_textNode);\n    var child1 = document.getElementById('p2');\n    element.insertBefore(new_node,child1);\n\n    //removeChild删除\n    var child2 = document.getElementById('p2');\n    element.removeChild(child2);\n\n    //使用parentNode查找其父元素\n    var child3 = document.getElementById('p3');\n    child3.parentNode.removeChild(child3);\n  </script>\n</body>\n</html>\n```\n\n* appendChild() 作为父元素最后一个子元素插入\n* insertBefore() 插入想要插入元素之前\n* removeChild() 删除相应元素（需先获取其父元素）\n* parentNode() 查找其父元素（可应用于上一方法）\n\n说到查找元素，这里还要比较一下childNodes和children的区别，两者都是获取父元素的子元素，但是具体实现功能还是不太一样。测试如下：\n\n```html\n<p id=\"p1\">Hello world!</p>\n<div id=\"parent\">\n  <p>第一行</p>\n  <p>第二行</p>\n  <p>第三行</p>\n</div>\n\n<script>\n  var p = document.getElementById('parent');\n  document.write(p.childNodes[0].nodeName+\"<br>\");\n  document.write(p.children[0].nodeName);\n  p.childNodes[3].innerHTML = \"新行\";\n</script>\n```\n\n输出结果为\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-4.png)\n\n可以看到childNodes[0]所指向的元素是div中的文本节点，而children[0]则指向的是div中的第一个p节点，因此可以看出childNodes更加的细致，而children更加的好用，而且便于理解。\n\n\n## 五、对事件作出反应\n\n本部分简要提一下主要内容\n\n* onclick 用户点击完成时触发\n* onload 用户进入页面时触发\n* onchange 当用户改变输入字段时触发（一般用于input标签）\n* onmouseover 鼠标指针移动到元素时触发\n* onmouseout 鼠标指针离开元素时触发\n* onmousedown 鼠标按钮点击时触发\n* onmouseup 鼠标按钮被松开时触发\n\n## 总结\n\nDOM操作基本内容大概就这么多，虽然整理了这么多，对这些也有了一个更加清晰的认识，但是离熟练使用还有一段距离，还是要不断的多练习，才能有更大的提高。继续努力。","source":"_posts/3. DOM操作.md","raw":"---\ntitle: DOM操作\ndate: 2017-10-10 22:31:41\ntoc: true\ncategories:\n- 前端\ntags: \n- JS\n---\n\n最近虽然一直在做一些小任务，但是发现对HTML元素的操作并不十分清楚，完全是为了实现而实现，代码质量太低，于是准备将DOM梳理一下。\n\n<!--more-->\n\n## HTML DOM节点树\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-1.png)\n\n简单讲，通过HTML DOM，树中的所有节点都可以通过JavaScript的代码进行访问，即对HTML的元素进行修改、添加、删除等操作。此本分务必熟练掌握。\n\n为了便于理解关于节点问题，我从W3c引一个例子，如下代码段：\n\n```html\n<html>\n  <head>\n    <title>DOM 教程</title>\n  </head>\n  <body>\n    <h1>DOM 第一课</h1>\n    <p>Hello world!</p>\n  </body>\n</html>\n```\n\n从上面代码中\n* &lt;head> 和 &lt;body> 的父节点是 &lt;html> 节点\n* 文本节点 \"Hello world!\" 的父节点是 &lt;p> 节点\n* &lt;title> 节点也拥有一个子节点：文本节点 \"DOM 教程\"\n* &lt;h1> 和 &lt;p> 节点是同胞节点，同时也是 &lt;body> 的子节点\n并且：\n* &lt;head> 元素是 &lt;html> 元素的首个子节点\n* &lt;body> 元素是 &lt;html> 元素的最后一个子节点\n\n（顺便说一句，由于Markdown语法是最终变成HTML代码，所以尖括号会无法显示，于是可用'&lt加一个;'代替前尖括号，用'&gt加一个;'代替后尖括号。）\n\n## HTML DOM常用方法及对象\n\n一些常用的 HTML DOM 方法：\n* getElementById(id) - 获取带有指定 id 的节点（元素）\n* appendChild(node) - 插入新的子节点（元素）\n* removeChild(node) - 删除子节点（元素）\n\n一些常用的 HTML DOM 属性：\n* innerHTML - 节点（元素）的文本值\n* parentNode - 节点（元素）的父节点\n* childNodes - 节点（元素）的子节点\n* attributes - 节点（元素）的属性节点\n\n以上内容基本为概念，下面开始测试。\n\n## 一、元素内容的获取\n\n本块测试将测试innerHTML、nodeValue属性对元素内容的获取，以及nodeName及nodeType的作用测试。\n\n将要操作的HTML代码如下：\n\n```html\n<div id=\"div\">\n  <h1 id=\"h1\">Hello</h1>\n  <p id=\"p\">Word</p>\n</div>\n```\n\n### 1、innerHTML获取目标内容：\n\n```js\nvar text1 = document.getElementById('h1').innerHTML;\ndocument.write(text1);\n```\n\n可以看到innerHTML直接获取了目标内容，虽然此时处在文本节点的父节点位置。\n\n### 2、nodeValue获取：\n\n```js\nvar text2 = document.getElementById('h1');\ndocument.write(text2.firstChild.nodeValue);\n```\n\n需要注意的是当获取id之后此时处于h1元素位置处，innerHTML可以直接获取内容。而nodeValue则需先用firstChild等获取目标文本节点，然后用nodeValue获取内容。\n\n** 补充nodeName作用 **\nnodeName 属性规定节点的名称。\n\n* 元素节点的 nodeName 与标签名相同\n* 属性节点的 nodeName 与属性名相同\n* 文本节点的 nodeName 始终是 #text\n\n** 补充nodeType作用 **\nnodeType 属性返回节点的类型。nodeType 是只读的。\n\n\n## 二、元素的访问\n访问这部分主要测试getElementsByTagName() 方法、getElementsByClassName() 方法这两个。\n\n将要操作的HTML代码如下：\n\n```html\n<p id=\"p1\" class=\"x\">这句为div外面第一个p</p>\n<p >这句为div外面第二个p</p>\n<div id=\"div\" class=\"x\">\n  <h1 id=\"h1\" class=\"x\">Hello</h1>\n  <p id=\"p2\" class=\"x\">这句为div里面第一个p</p>\n  <p id=\"p3\">这句为div里面第二个p</p>\n</div>\n```\n\n### 1、getElementsByTagName方法\n\n作用：getElementsByTagName() 返回带有指定标签名的所有元素。\n\n```js\nvar t1 = document.getElementsByTagName('p');\ndocument.write(t1[0].innerHTML);\ndocument.write(t1[2].innerHTML);\ndocument.write('<br>');\n```\n\n上例输出为：\n这句为div外面第一个p这句为div里面第一个p\n\n```js\n//当已经用getElementById获取时\nvar t2 = document.getElementById('div').getElementsByTagName('p');\ndocument.write(t2[0].innerHTML);\ndocument.write('<br>');\n```\n\n输出为：\n这句为div里面第一个p\n\n从上面两例可以看出当没有限定时，获取到的元素为所有部分，但是当已经限定在id为div的标签时，此时则只会获取到标签内的部分。\n\n### 2、getElementsByClassName方法\n\n如果希望查找带有相同类名的所有 HTML 元素，请使用这个方法。\n注意该方法与IE 5,6,7,8不兼容\n\n```js\nvar t3 = document.getElementsByClassName('x');\ndocument.write(t3[0].innerHTML);\n\n//当获取到整块div时，innerHTML会将整个内容获取\ndocument.write(t3[1].innerHTML);\n```\n注意浏览器的兼容性，尽量少用该方法，或直接用相应代码兼容IE低版本。\n\n## 三、元素的修改\n\n这部分内容并不复杂，因此把代码贴上，以便查看即可。\n\n```html\n<p id=\"p1\">Hello</p>\n<script type=\"text/javascript\">\n  //元素修改\n  document.getElementById('p1').innerHTML = \"World\";\n  document.getElementById('p1').style.color = 'blue';\n</script>\n```\n\n上面的操作即修改内容，以及修改CSS样式。\n\n\n## 四、元素的添加与删除\n\n元素内容的添加与删除是DOM操作的核心，这部分较为重要，综合运用了以上三部分内容。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <p id=\"p1\">Hello</p>\n  <div id=\"a\">\n    <p id=\"p2\">第一行</p>\n    <p id=\"p3\">第二行</p>\n  </div>\n  <script type=\"text/javascript\">\n    //元素修改\n    document.getElementById('p1').innerHTML = \"World\";\n    document.getElementById('p1').style.color = 'blue';\n\n    //appendChild插入\n    var node = document.createElement('p');\n    var textNode = document.createTextNode(\"第三行\");\n    node.appendChild(textNode);\n    var element = document.getElementById('a');\n    element.appendChild(node);\n\n    //使用insertBefore\n    var new_node = document.createElement('p');\n    var new_textNode = document.createTextNode('第零行');\n    new_node.appendChild(new_textNode);\n    var child1 = document.getElementById('p2');\n    element.insertBefore(new_node,child1);\n\n    //removeChild删除\n    var child2 = document.getElementById('p2');\n    element.removeChild(child2);\n\n    //使用parentNode查找其父元素\n    var child3 = document.getElementById('p3');\n    child3.parentNode.removeChild(child3);\n  </script>\n</body>\n</html>\n```\n\n* appendChild() 作为父元素最后一个子元素插入\n* insertBefore() 插入想要插入元素之前\n* removeChild() 删除相应元素（需先获取其父元素）\n* parentNode() 查找其父元素（可应用于上一方法）\n\n说到查找元素，这里还要比较一下childNodes和children的区别，两者都是获取父元素的子元素，但是具体实现功能还是不太一样。测试如下：\n\n```html\n<p id=\"p1\">Hello world!</p>\n<div id=\"parent\">\n  <p>第一行</p>\n  <p>第二行</p>\n  <p>第三行</p>\n</div>\n\n<script>\n  var p = document.getElementById('parent');\n  document.write(p.childNodes[0].nodeName+\"<br>\");\n  document.write(p.children[0].nodeName);\n  p.childNodes[3].innerHTML = \"新行\";\n</script>\n```\n\n输出结果为\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-4.png)\n\n可以看到childNodes[0]所指向的元素是div中的文本节点，而children[0]则指向的是div中的第一个p节点，因此可以看出childNodes更加的细致，而children更加的好用，而且便于理解。\n\n\n## 五、对事件作出反应\n\n本部分简要提一下主要内容\n\n* onclick 用户点击完成时触发\n* onload 用户进入页面时触发\n* onchange 当用户改变输入字段时触发（一般用于input标签）\n* onmouseover 鼠标指针移动到元素时触发\n* onmouseout 鼠标指针离开元素时触发\n* onmousedown 鼠标按钮点击时触发\n* onmouseup 鼠标按钮被松开时触发\n\n## 总结\n\nDOM操作基本内容大概就这么多，虽然整理了这么多，对这些也有了一个更加清晰的认识，但是离熟练使用还有一段距离，还是要不断的多练习，才能有更大的提高。继续努力。","slug":"3. DOM操作","published":1,"updated":"2021-09-30T06:45:14.267Z","_id":"cku41le8x0017idp2afap9ilc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近虽然一直在做一些小任务，但是发现对HTML元素的操作并不十分清楚，完全是为了实现而实现，代码质量太低，于是准备将DOM梳理一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"HTML-DOM节点树\"><a href=\"#HTML-DOM节点树\" class=\"headerlink\" title=\"HTML DOM节点树\"></a>HTML DOM节点树</h2><p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-1.png\"></p>\n<p>简单讲，通过HTML DOM，树中的所有节点都可以通过JavaScript的代码进行访问，即对HTML的元素进行修改、添加、删除等操作。此本分务必熟练掌握。</p>\n<p>为了便于理解关于节点问题，我从W3c引一个例子，如下代码段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM 教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>DOM 第一课<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面代码中</p>\n<ul>\n<li>&lt;head&gt; 和 &lt;body&gt; 的父节点是 &lt;html&gt; 节点</li>\n<li>文本节点 “Hello world!” 的父节点是 &lt;p&gt; 节点</li>\n<li>&lt;title&gt; 节点也拥有一个子节点：文本节点 “DOM 教程”</li>\n<li>&lt;h1&gt; 和 &lt;p&gt; 节点是同胞节点，同时也是 &lt;body&gt; 的子节点<br>并且：</li>\n<li>&lt;head&gt; 元素是 &lt;html&gt; 元素的首个子节点</li>\n<li>&lt;body&gt; 元素是 &lt;html&gt; 元素的最后一个子节点</li>\n</ul>\n<p>（顺便说一句，由于Markdown语法是最终变成HTML代码，所以尖括号会无法显示，于是可用’&amp;lt加一个;’代替前尖括号，用’&amp;gt加一个;’代替后尖括号。）</p>\n<h2 id=\"HTML-DOM常用方法及对象\"><a href=\"#HTML-DOM常用方法及对象\" class=\"headerlink\" title=\"HTML DOM常用方法及对象\"></a>HTML DOM常用方法及对象</h2><p>一些常用的 HTML DOM 方法：</p>\n<ul>\n<li>getElementById(id) - 获取带有指定 id 的节点（元素）</li>\n<li>appendChild(node) - 插入新的子节点（元素）</li>\n<li>removeChild(node) - 删除子节点（元素）</li>\n</ul>\n<p>一些常用的 HTML DOM 属性：</p>\n<ul>\n<li>innerHTML - 节点（元素）的文本值</li>\n<li>parentNode - 节点（元素）的父节点</li>\n<li>childNodes - 节点（元素）的子节点</li>\n<li>attributes - 节点（元素）的属性节点</li>\n</ul>\n<p>以上内容基本为概念，下面开始测试。</p>\n<h2 id=\"一、元素内容的获取\"><a href=\"#一、元素内容的获取\" class=\"headerlink\" title=\"一、元素内容的获取\"></a>一、元素内容的获取</h2><p>本块测试将测试innerHTML、nodeValue属性对元素内容的获取，以及nodeName及nodeType的作用测试。</p>\n<p>将要操作的HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;h1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p&quot;</span>&gt;</span>Word<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、innerHTML获取目标内容：\"><a href=\"#1、innerHTML获取目标内容：\" class=\"headerlink\" title=\"1、innerHTML获取目标内容：\"></a>1、innerHTML获取目标内容：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;h1&#x27;</span>).innerHTML;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(text1);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到innerHTML直接获取了目标内容，虽然此时处在文本节点的父节点位置。</p>\n<h3 id=\"2、nodeValue获取：\"><a href=\"#2、nodeValue获取：\" class=\"headerlink\" title=\"2、nodeValue获取：\"></a>2、nodeValue获取：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(text2.firstChild.nodeValue);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是当获取id之后此时处于h1元素位置处，innerHTML可以直接获取内容。而nodeValue则需先用firstChild等获取目标文本节点，然后用nodeValue获取内容。</p>\n<p>** 补充nodeName作用 **<br>nodeName 属性规定节点的名称。</p>\n<ul>\n<li>元素节点的 nodeName 与标签名相同</li>\n<li>属性节点的 nodeName 与属性名相同</li>\n<li>文本节点的 nodeName 始终是 #text</li>\n</ul>\n<p>** 补充nodeType作用 **<br>nodeType 属性返回节点的类型。nodeType 是只读的。</p>\n<h2 id=\"二、元素的访问\"><a href=\"#二、元素的访问\" class=\"headerlink\" title=\"二、元素的访问\"></a>二、元素的访问</h2><p>访问这部分主要测试getElementsByTagName() 方法、getElementsByClassName() 方法这两个。</p>\n<p>将要操作的HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>这句为div外面第一个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> &gt;</span>这句为div外面第二个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;h1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>这句为div里面第一个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p3&quot;</span>&gt;</span>这句为div里面第二个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、getElementsByTagName方法\"><a href=\"#1、getElementsByTagName方法\" class=\"headerlink\" title=\"1、getElementsByTagName方法\"></a>1、getElementsByTagName方法</h3><p>作用：getElementsByTagName() 返回带有指定标签名的所有元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t1 = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t1[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t1[<span class=\"number\">2</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上例输出为：<br>这句为div外面第一个p这句为div里面第一个p</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当已经用getElementById获取时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;div&#x27;</span>).getElementsByTagName(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t2[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出为：<br>这句为div里面第一个p</p>\n<p>从上面两例可以看出当没有限定时，获取到的元素为所有部分，但是当已经限定在id为div的标签时，此时则只会获取到标签内的部分。</p>\n<h3 id=\"2、getElementsByClassName方法\"><a href=\"#2、getElementsByClassName方法\" class=\"headerlink\" title=\"2、getElementsByClassName方法\"></a>2、getElementsByClassName方法</h3><p>如果希望查找带有相同类名的所有 HTML 元素，请使用这个方法。<br>注意该方法与IE 5,6,7,8不兼容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t3 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t3[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当获取到整块div时，innerHTML会将整个内容获取</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t3[<span class=\"number\">1</span>].innerHTML);</span><br></pre></td></tr></table></figure>\n<p>注意浏览器的兼容性，尽量少用该方法，或直接用相应代码兼容IE低版本。</p>\n<h2 id=\"三、元素的修改\"><a href=\"#三、元素的修改\" class=\"headerlink\" title=\"三、元素的修改\"></a>三、元素的修改</h2><p>这部分内容并不复杂，因此把代码贴上，以便查看即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//元素修改</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).innerHTML = <span class=\"string\">&quot;World&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).style.color = <span class=\"string\">&#x27;blue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的操作即修改内容，以及修改CSS样式。</p>\n<h2 id=\"四、元素的添加与删除\"><a href=\"#四、元素的添加与删除\" class=\"headerlink\" title=\"四、元素的添加与删除\"></a>四、元素的添加与删除</h2><p>元素内容的添加与删除是DOM操作的核心，这部分较为重要，综合运用了以上三部分内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p2&quot;</span>&gt;</span>第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p3&quot;</span>&gt;</span>第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//元素修改</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).innerHTML = <span class=\"string\">&quot;World&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).style.color = <span class=\"string\">&#x27;blue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//appendChild插入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;第三行&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    node.appendChild(textNode);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.appendChild(node);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//使用insertBefore</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> new_node = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> new_textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&#x27;第零行&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    new_node.appendChild(new_textNode);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.insertBefore(new_node,child1);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//removeChild删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.removeChild(child2);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//使用parentNode查找其父元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p3&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    child3.parentNode.removeChild(child3);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>appendChild() 作为父元素最后一个子元素插入</li>\n<li>insertBefore() 插入想要插入元素之前</li>\n<li>removeChild() 删除相应元素（需先获取其父元素）</li>\n<li>parentNode() 查找其父元素（可应用于上一方法）</li>\n</ul>\n<p>说到查找元素，这里还要比较一下childNodes和children的区别，两者都是获取父元素的子元素，但是具体实现功能还是不太一样。测试如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;parent&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.write(p.childNodes[<span class=\"number\">0</span>].nodeName+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.write(p.children[<span class=\"number\">0</span>].nodeName);</span></span><br><span class=\"line\"><span class=\"javascript\">  p.childNodes[<span class=\"number\">3</span>].innerHTML = <span class=\"string\">&quot;新行&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果为<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-4.png\"></p>\n<p>可以看到childNodes[0]所指向的元素是div中的文本节点，而children[0]则指向的是div中的第一个p节点，因此可以看出childNodes更加的细致，而children更加的好用，而且便于理解。</p>\n<h2 id=\"五、对事件作出反应\"><a href=\"#五、对事件作出反应\" class=\"headerlink\" title=\"五、对事件作出反应\"></a>五、对事件作出反应</h2><p>本部分简要提一下主要内容</p>\n<ul>\n<li>onclick 用户点击完成时触发</li>\n<li>onload 用户进入页面时触发</li>\n<li>onchange 当用户改变输入字段时触发（一般用于input标签）</li>\n<li>onmouseover 鼠标指针移动到元素时触发</li>\n<li>onmouseout 鼠标指针离开元素时触发</li>\n<li>onmousedown 鼠标按钮点击时触发</li>\n<li>onmouseup 鼠标按钮被松开时触发</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>DOM操作基本内容大概就这么多，虽然整理了这么多，对这些也有了一个更加清晰的认识，但是离熟练使用还有一段距离，还是要不断的多练习，才能有更大的提高。继续努力。</p>\n","site":{"data":{}},"excerpt":"<p>最近虽然一直在做一些小任务，但是发现对HTML元素的操作并不十分清楚，完全是为了实现而实现，代码质量太低，于是准备将DOM梳理一下。</p>","more":"<h2 id=\"HTML-DOM节点树\"><a href=\"#HTML-DOM节点树\" class=\"headerlink\" title=\"HTML DOM节点树\"></a>HTML DOM节点树</h2><p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-1.png\"></p>\n<p>简单讲，通过HTML DOM，树中的所有节点都可以通过JavaScript的代码进行访问，即对HTML的元素进行修改、添加、删除等操作。此本分务必熟练掌握。</p>\n<p>为了便于理解关于节点问题，我从W3c引一个例子，如下代码段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM 教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>DOM 第一课<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面代码中</p>\n<ul>\n<li>&lt;head&gt; 和 &lt;body&gt; 的父节点是 &lt;html&gt; 节点</li>\n<li>文本节点 “Hello world!” 的父节点是 &lt;p&gt; 节点</li>\n<li>&lt;title&gt; 节点也拥有一个子节点：文本节点 “DOM 教程”</li>\n<li>&lt;h1&gt; 和 &lt;p&gt; 节点是同胞节点，同时也是 &lt;body&gt; 的子节点<br>并且：</li>\n<li>&lt;head&gt; 元素是 &lt;html&gt; 元素的首个子节点</li>\n<li>&lt;body&gt; 元素是 &lt;html&gt; 元素的最后一个子节点</li>\n</ul>\n<p>（顺便说一句，由于Markdown语法是最终变成HTML代码，所以尖括号会无法显示，于是可用’&amp;lt加一个;’代替前尖括号，用’&amp;gt加一个;’代替后尖括号。）</p>\n<h2 id=\"HTML-DOM常用方法及对象\"><a href=\"#HTML-DOM常用方法及对象\" class=\"headerlink\" title=\"HTML DOM常用方法及对象\"></a>HTML DOM常用方法及对象</h2><p>一些常用的 HTML DOM 方法：</p>\n<ul>\n<li>getElementById(id) - 获取带有指定 id 的节点（元素）</li>\n<li>appendChild(node) - 插入新的子节点（元素）</li>\n<li>removeChild(node) - 删除子节点（元素）</li>\n</ul>\n<p>一些常用的 HTML DOM 属性：</p>\n<ul>\n<li>innerHTML - 节点（元素）的文本值</li>\n<li>parentNode - 节点（元素）的父节点</li>\n<li>childNodes - 节点（元素）的子节点</li>\n<li>attributes - 节点（元素）的属性节点</li>\n</ul>\n<p>以上内容基本为概念，下面开始测试。</p>\n<h2 id=\"一、元素内容的获取\"><a href=\"#一、元素内容的获取\" class=\"headerlink\" title=\"一、元素内容的获取\"></a>一、元素内容的获取</h2><p>本块测试将测试innerHTML、nodeValue属性对元素内容的获取，以及nodeName及nodeType的作用测试。</p>\n<p>将要操作的HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;h1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p&quot;</span>&gt;</span>Word<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、innerHTML获取目标内容：\"><a href=\"#1、innerHTML获取目标内容：\" class=\"headerlink\" title=\"1、innerHTML获取目标内容：\"></a>1、innerHTML获取目标内容：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;h1&#x27;</span>).innerHTML;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(text1);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到innerHTML直接获取了目标内容，虽然此时处在文本节点的父节点位置。</p>\n<h3 id=\"2、nodeValue获取：\"><a href=\"#2、nodeValue获取：\" class=\"headerlink\" title=\"2、nodeValue获取：\"></a>2、nodeValue获取：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(text2.firstChild.nodeValue);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是当获取id之后此时处于h1元素位置处，innerHTML可以直接获取内容。而nodeValue则需先用firstChild等获取目标文本节点，然后用nodeValue获取内容。</p>\n<p>** 补充nodeName作用 **<br>nodeName 属性规定节点的名称。</p>\n<ul>\n<li>元素节点的 nodeName 与标签名相同</li>\n<li>属性节点的 nodeName 与属性名相同</li>\n<li>文本节点的 nodeName 始终是 #text</li>\n</ul>\n<p>** 补充nodeType作用 **<br>nodeType 属性返回节点的类型。nodeType 是只读的。</p>\n<h2 id=\"二、元素的访问\"><a href=\"#二、元素的访问\" class=\"headerlink\" title=\"二、元素的访问\"></a>二、元素的访问</h2><p>访问这部分主要测试getElementsByTagName() 方法、getElementsByClassName() 方法这两个。</p>\n<p>将要操作的HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>这句为div外面第一个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> &gt;</span>这句为div外面第二个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;h1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;x&quot;</span>&gt;</span>这句为div里面第一个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p3&quot;</span>&gt;</span>这句为div里面第二个p<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、getElementsByTagName方法\"><a href=\"#1、getElementsByTagName方法\" class=\"headerlink\" title=\"1、getElementsByTagName方法\"></a>1、getElementsByTagName方法</h3><p>作用：getElementsByTagName() 返回带有指定标签名的所有元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t1 = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t1[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t1[<span class=\"number\">2</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上例输出为：<br>这句为div外面第一个p这句为div里面第一个p</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当已经用getElementById获取时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;div&#x27;</span>).getElementsByTagName(<span class=\"string\">&#x27;p&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t2[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出为：<br>这句为div里面第一个p</p>\n<p>从上面两例可以看出当没有限定时，获取到的元素为所有部分，但是当已经限定在id为div的标签时，此时则只会获取到标签内的部分。</p>\n<h3 id=\"2、getElementsByClassName方法\"><a href=\"#2、getElementsByClassName方法\" class=\"headerlink\" title=\"2、getElementsByClassName方法\"></a>2、getElementsByClassName方法</h3><p>如果希望查找带有相同类名的所有 HTML 元素，请使用这个方法。<br>注意该方法与IE 5,6,7,8不兼容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t3 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t3[<span class=\"number\">0</span>].innerHTML);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当获取到整块div时，innerHTML会将整个内容获取</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(t3[<span class=\"number\">1</span>].innerHTML);</span><br></pre></td></tr></table></figure>\n<p>注意浏览器的兼容性，尽量少用该方法，或直接用相应代码兼容IE低版本。</p>\n<h2 id=\"三、元素的修改\"><a href=\"#三、元素的修改\" class=\"headerlink\" title=\"三、元素的修改\"></a>三、元素的修改</h2><p>这部分内容并不复杂，因此把代码贴上，以便查看即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//元素修改</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).innerHTML = <span class=\"string\">&quot;World&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).style.color = <span class=\"string\">&#x27;blue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的操作即修改内容，以及修改CSS样式。</p>\n<h2 id=\"四、元素的添加与删除\"><a href=\"#四、元素的添加与删除\" class=\"headerlink\" title=\"四、元素的添加与删除\"></a>四、元素的添加与删除</h2><p>元素内容的添加与删除是DOM操作的核心，这部分较为重要，综合运用了以上三部分内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p2&quot;</span>&gt;</span>第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p3&quot;</span>&gt;</span>第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//元素修改</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).innerHTML = <span class=\"string\">&quot;World&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p1&#x27;</span>).style.color = <span class=\"string\">&#x27;blue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//appendChild插入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&quot;第三行&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    node.appendChild(textNode);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.appendChild(node);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//使用insertBefore</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> new_node = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;p&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> new_textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&#x27;第零行&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    new_node.appendChild(new_textNode);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.insertBefore(new_node,child1);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//removeChild删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p2&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    element.removeChild(child2);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//使用parentNode查找其父元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> child3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;p3&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    child3.parentNode.removeChild(child3);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>appendChild() 作为父元素最后一个子元素插入</li>\n<li>insertBefore() 插入想要插入元素之前</li>\n<li>removeChild() 删除相应元素（需先获取其父元素）</li>\n<li>parentNode() 查找其父元素（可应用于上一方法）</li>\n</ul>\n<p>说到查找元素，这里还要比较一下childNodes和children的区别，两者都是获取父元素的子元素，但是具体实现功能还是不太一样。测试如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p1&quot;</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;parent&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.write(p.childNodes[<span class=\"number\">0</span>].nodeName+<span class=\"string\">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.write(p.children[<span class=\"number\">0</span>].nodeName);</span></span><br><span class=\"line\"><span class=\"javascript\">  p.childNodes[<span class=\"number\">3</span>].innerHTML = <span class=\"string\">&quot;新行&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果为<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-10/title-4.png\"></p>\n<p>可以看到childNodes[0]所指向的元素是div中的文本节点，而children[0]则指向的是div中的第一个p节点，因此可以看出childNodes更加的细致，而children更加的好用，而且便于理解。</p>\n<h2 id=\"五、对事件作出反应\"><a href=\"#五、对事件作出反应\" class=\"headerlink\" title=\"五、对事件作出反应\"></a>五、对事件作出反应</h2><p>本部分简要提一下主要内容</p>\n<ul>\n<li>onclick 用户点击完成时触发</li>\n<li>onload 用户进入页面时触发</li>\n<li>onchange 当用户改变输入字段时触发（一般用于input标签）</li>\n<li>onmouseover 鼠标指针移动到元素时触发</li>\n<li>onmouseout 鼠标指针离开元素时触发</li>\n<li>onmousedown 鼠标按钮点击时触发</li>\n<li>onmouseup 鼠标按钮被松开时触发</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>DOM操作基本内容大概就这么多，虽然整理了这么多，对这些也有了一个更加清晰的认识，但是离熟练使用还有一段距离，还是要不断的多练习，才能有更大的提高。继续努力。</p>"},{"title":"虚假的第一篇博客","date":"2021-09-28T03:53:29.000Z","toc":true,"_content":"\n为什么说是虚假的第一篇博客，因为其实学生时代是写了挺多文章的，数了一下大概30+篇。但是回顾起来\n\n<!--more-->\n","source":"_posts/30. 虚假的第一篇博客.md","raw":"---\ntitle: 虚假的第一篇博客\ndate: 2021-09-28 11:53:29\ntoc: true\ncategories:\n- 总结\ntags:\n- 总结\n---\n\n为什么说是虚假的第一篇博客，因为其实学生时代是写了挺多文章的，数了一下大概30+篇。但是回顾起来\n\n<!--more-->\n","slug":"30. 虚假的第一篇博客","published":1,"updated":"2021-09-30T06:47:56.089Z","_id":"cku41le8y001aidp20mdb9uob","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为什么说是虚假的第一篇博客，因为其实学生时代是写了挺多文章的，数了一下大概30+篇。但是回顾起来</p>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<p>为什么说是虚假的第一篇博客，因为其实学生时代是写了挺多文章的，数了一下大概30+篇。但是回顾起来</p>","more":""},{"title":"改造icarus博客主题（一）","date":"2021-09-29T03:50:21.000Z","toc":true,"_content":"\n<!--more-->\n\n## 修改 config.yml配置\n\n相关内容直接看文档即可 https://hexo.io/zh-cn/docs/configuration\n\n### 永久链接\n\n调整文章的[url永久链接](https://hexo.io/zh-cn/docs/permalinks)，可以根据文档自由文章定制url链接\n\n```yaml\npermalink: ':post_title/'\n```\n","source":"_posts/31. 改造icarus博客主题（一）.md","raw":"---\ntitle: 改造icarus博客主题（一）\ndate: 2021-09-29 11:50:21\ntoc: true\ncategories:\n- hexo\ntags:\n- hexo\n---\n\n<!--more-->\n\n## 修改 config.yml配置\n\n相关内容直接看文档即可 https://hexo.io/zh-cn/docs/configuration\n\n### 永久链接\n\n调整文章的[url永久链接](https://hexo.io/zh-cn/docs/permalinks)，可以根据文档自由文章定制url链接\n\n```yaml\npermalink: ':post_title/'\n```\n","slug":"31. 改造icarus博客主题（一）","published":1,"updated":"2021-10-09T07:59:05.019Z","_id":"cku41le8y001cidp2dpes9lu5","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h2 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改 config.yml配置\"></a>修改 config.yml配置</h2><p>相关内容直接看文档即可 <a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n<h3 id=\"永久链接\"><a href=\"#永久链接\" class=\"headerlink\" title=\"永久链接\"></a>永久链接</h3><p>调整文章的<a href=\"https://hexo.io/zh-cn/docs/permalinks\">url永久链接</a>，可以根据文档自由文章定制url链接</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">&#x27;:post_title/&#x27;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改 config.yml配置\"></a>修改 config.yml配置</h2><p>相关内容直接看文档即可 <a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n<h3 id=\"永久链接\"><a href=\"#永久链接\" class=\"headerlink\" title=\"永久链接\"></a>永久链接</h3><p>调整文章的<a href=\"https://hexo.io/zh-cn/docs/permalinks\">url永久链接</a>，可以根据文档自由文章定制url链接</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">&#x27;:post_title/&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"jQuery和原生DOM操作对比","date":"2017-10-18T12:43:17.000Z","toc":true,"_content":"\n说到这个jQ库，我之前一直搞错一个概念，以为jQ是一个框架，但是查了一些资料后呢，发现它原来是个库。那么它们的区别是什么呢，本质区别在于控制反转。那么通俗点讲，库是一个封装好的集合，控制权在使用者。而框架是一个架构，向用户提供解决方案，控制权在框架。\n\n那么不说那么专业的东西，说点我看完jQ的体会，发现jQ确实会让js编程变得简单很多，特别是Ajax的使用，jQ里面并不复杂，但是若要直接写原生js那是有点麻烦的。虽然这些东西很方便，但是我要说的是，一定不要依赖于库或者框架，前端技术发展很快，框架层出不穷，但是核心的js是不会变的，这些所有东西都是可以用原生js实现的。所以，学这些东西的时候最好再用js尝试实现相应的功能，这样才能游刃有余。\n\n<!--more-->\n\n## 一、jQ获取元素\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/hideButton.png \"hideButton关系\")\n\n可以看到，仅从此处对比，并不能看出jQ的方便，因为毕竟功能太小，此处先引出jQ是如何获取元素的，引用一张来自w3school的图：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/SelectProgram.png \"hideButton关系\")\n\n即可从图上看出id，class，标签等的获取语法\n\n## 二、jQ设置内容\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContent.png \"settingContent关系\")\n\n输出结果如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContentOut.png \"settingContent输出\")\n\n此处依然不能体现出jQ的方便之处，还是因为功能并不复杂，但是之后的比较，会发现jQ的方便之处\n\n## 三、jQ添加删除元素\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElement.png \"addElement\")\n\n输出结果如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElementOut.png \"addElementOut\")\n\n注意js原生代码部分两种方法的不同，第一种方法是与左侧jQ库写出的效果相同，第二种则是直接创建p标签进行追加文本\n\n从此处其实已经可以看出jQ的方便之处，降低了代码复杂度，使代码更加简洁。\n\n## 四、jQ功能简介\n\njQ库功能可以说是很强大，把js代码实现某些功能变得简单了很多。jQ几个主要实现的功能包括以下几个方面：\n\n* 对DOM的操作，比如上面介绍的几种\n* jQ的动画效果，比如淡入淡出效果、滑动效果\n* Ajax的功能，使Ajax的写法变得简单\n\n当然功能应该不止这些，这只是我目前所了解的功能的一个概括，其他具体功能可从网上搜索。\n\n## 五、结语\n\n总感觉目前写的这几篇博客内容太水了，技术深度不够，只是一些很基本的内容，没有什么深入的剖析。仅仅是对所学内容一个简单的使用而已，希望能随着技术的提高，逐渐写一些有深度的文章。","source":"_posts/4. jQuery和原生DOM操作对比.md","raw":"---\ntitle: jQuery和原生DOM操作对比\ndate: 2017-10-18 20:43:17\ntoc: true\ncategories:\n- 前端\ntags: \n- JS\n- jQuery\n---\n\n说到这个jQ库，我之前一直搞错一个概念，以为jQ是一个框架，但是查了一些资料后呢，发现它原来是个库。那么它们的区别是什么呢，本质区别在于控制反转。那么通俗点讲，库是一个封装好的集合，控制权在使用者。而框架是一个架构，向用户提供解决方案，控制权在框架。\n\n那么不说那么专业的东西，说点我看完jQ的体会，发现jQ确实会让js编程变得简单很多，特别是Ajax的使用，jQ里面并不复杂，但是若要直接写原生js那是有点麻烦的。虽然这些东西很方便，但是我要说的是，一定不要依赖于库或者框架，前端技术发展很快，框架层出不穷，但是核心的js是不会变的，这些所有东西都是可以用原生js实现的。所以，学这些东西的时候最好再用js尝试实现相应的功能，这样才能游刃有余。\n\n<!--more-->\n\n## 一、jQ获取元素\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/hideButton.png \"hideButton关系\")\n\n可以看到，仅从此处对比，并不能看出jQ的方便，因为毕竟功能太小，此处先引出jQ是如何获取元素的，引用一张来自w3school的图：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/SelectProgram.png \"hideButton关系\")\n\n即可从图上看出id，class，标签等的获取语法\n\n## 二、jQ设置内容\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContent.png \"settingContent关系\")\n\n输出结果如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContentOut.png \"settingContent输出\")\n\n此处依然不能体现出jQ的方便之处，还是因为功能并不复杂，但是之后的比较，会发现jQ的方便之处\n\n## 三、jQ添加删除元素\n\njQ库与js原生代码的比较如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElement.png \"addElement\")\n\n输出结果如下：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElementOut.png \"addElementOut\")\n\n注意js原生代码部分两种方法的不同，第一种方法是与左侧jQ库写出的效果相同，第二种则是直接创建p标签进行追加文本\n\n从此处其实已经可以看出jQ的方便之处，降低了代码复杂度，使代码更加简洁。\n\n## 四、jQ功能简介\n\njQ库功能可以说是很强大，把js代码实现某些功能变得简单了很多。jQ几个主要实现的功能包括以下几个方面：\n\n* 对DOM的操作，比如上面介绍的几种\n* jQ的动画效果，比如淡入淡出效果、滑动效果\n* Ajax的功能，使Ajax的写法变得简单\n\n当然功能应该不止这些，这只是我目前所了解的功能的一个概括，其他具体功能可从网上搜索。\n\n## 五、结语\n\n总感觉目前写的这几篇博客内容太水了，技术深度不够，只是一些很基本的内容，没有什么深入的剖析。仅仅是对所学内容一个简单的使用而已，希望能随着技术的提高，逐渐写一些有深度的文章。","slug":"4. jQuery和原生DOM操作对比","published":1,"updated":"2021-09-30T06:45:18.246Z","_id":"cku41le8z001eidp2diz99gci","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说到这个jQ库，我之前一直搞错一个概念，以为jQ是一个框架，但是查了一些资料后呢，发现它原来是个库。那么它们的区别是什么呢，本质区别在于控制反转。那么通俗点讲，库是一个封装好的集合，控制权在使用者。而框架是一个架构，向用户提供解决方案，控制权在框架。</p>\n<p>那么不说那么专业的东西，说点我看完jQ的体会，发现jQ确实会让js编程变得简单很多，特别是Ajax的使用，jQ里面并不复杂，但是若要直接写原生js那是有点麻烦的。虽然这些东西很方便，但是我要说的是，一定不要依赖于库或者框架，前端技术发展很快，框架层出不穷，但是核心的js是不会变的，这些所有东西都是可以用原生js实现的。所以，学这些东西的时候最好再用js尝试实现相应的功能，这样才能游刃有余。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、jQ获取元素\"><a href=\"#一、jQ获取元素\" class=\"headerlink\" title=\"一、jQ获取元素\"></a>一、jQ获取元素</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/hideButton.png\" title=\"hideButton关系\"></p>\n<p>可以看到，仅从此处对比，并不能看出jQ的方便，因为毕竟功能太小，此处先引出jQ是如何获取元素的，引用一张来自w3school的图：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/SelectProgram.png\" title=\"hideButton关系\"></p>\n<p>即可从图上看出id，class，标签等的获取语法</p>\n<h2 id=\"二、jQ设置内容\"><a href=\"#二、jQ设置内容\" class=\"headerlink\" title=\"二、jQ设置内容\"></a>二、jQ设置内容</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContent.png\" title=\"settingContent关系\"></p>\n<p>输出结果如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContentOut.png\" title=\"settingContent输出\"></p>\n<p>此处依然不能体现出jQ的方便之处，还是因为功能并不复杂，但是之后的比较，会发现jQ的方便之处</p>\n<h2 id=\"三、jQ添加删除元素\"><a href=\"#三、jQ添加删除元素\" class=\"headerlink\" title=\"三、jQ添加删除元素\"></a>三、jQ添加删除元素</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElement.png\" title=\"addElement\"></p>\n<p>输出结果如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElementOut.png\" title=\"addElementOut\"></p>\n<p>注意js原生代码部分两种方法的不同，第一种方法是与左侧jQ库写出的效果相同，第二种则是直接创建p标签进行追加文本</p>\n<p>从此处其实已经可以看出jQ的方便之处，降低了代码复杂度，使代码更加简洁。</p>\n<h2 id=\"四、jQ功能简介\"><a href=\"#四、jQ功能简介\" class=\"headerlink\" title=\"四、jQ功能简介\"></a>四、jQ功能简介</h2><p>jQ库功能可以说是很强大，把js代码实现某些功能变得简单了很多。jQ几个主要实现的功能包括以下几个方面：</p>\n<ul>\n<li>对DOM的操作，比如上面介绍的几种</li>\n<li>jQ的动画效果，比如淡入淡出效果、滑动效果</li>\n<li>Ajax的功能，使Ajax的写法变得简单</li>\n</ul>\n<p>当然功能应该不止这些，这只是我目前所了解的功能的一个概括，其他具体功能可从网上搜索。</p>\n<h2 id=\"五、结语\"><a href=\"#五、结语\" class=\"headerlink\" title=\"五、结语\"></a>五、结语</h2><p>总感觉目前写的这几篇博客内容太水了，技术深度不够，只是一些很基本的内容，没有什么深入的剖析。仅仅是对所学内容一个简单的使用而已，希望能随着技术的提高，逐渐写一些有深度的文章。</p>\n","site":{"data":{}},"excerpt":"<p>说到这个jQ库，我之前一直搞错一个概念，以为jQ是一个框架，但是查了一些资料后呢，发现它原来是个库。那么它们的区别是什么呢，本质区别在于控制反转。那么通俗点讲，库是一个封装好的集合，控制权在使用者。而框架是一个架构，向用户提供解决方案，控制权在框架。</p>\n<p>那么不说那么专业的东西，说点我看完jQ的体会，发现jQ确实会让js编程变得简单很多，特别是Ajax的使用，jQ里面并不复杂，但是若要直接写原生js那是有点麻烦的。虽然这些东西很方便，但是我要说的是，一定不要依赖于库或者框架，前端技术发展很快，框架层出不穷，但是核心的js是不会变的，这些所有东西都是可以用原生js实现的。所以，学这些东西的时候最好再用js尝试实现相应的功能，这样才能游刃有余。</p>","more":"<h2 id=\"一、jQ获取元素\"><a href=\"#一、jQ获取元素\" class=\"headerlink\" title=\"一、jQ获取元素\"></a>一、jQ获取元素</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/hideButton.png\" title=\"hideButton关系\"></p>\n<p>可以看到，仅从此处对比，并不能看出jQ的方便，因为毕竟功能太小，此处先引出jQ是如何获取元素的，引用一张来自w3school的图：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/SelectProgram.png\" title=\"hideButton关系\"></p>\n<p>即可从图上看出id，class，标签等的获取语法</p>\n<h2 id=\"二、jQ设置内容\"><a href=\"#二、jQ设置内容\" class=\"headerlink\" title=\"二、jQ设置内容\"></a>二、jQ设置内容</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContent.png\" title=\"settingContent关系\"></p>\n<p>输出结果如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/settingContentOut.png\" title=\"settingContent输出\"></p>\n<p>此处依然不能体现出jQ的方便之处，还是因为功能并不复杂，但是之后的比较，会发现jQ的方便之处</p>\n<h2 id=\"三、jQ添加删除元素\"><a href=\"#三、jQ添加删除元素\" class=\"headerlink\" title=\"三、jQ添加删除元素\"></a>三、jQ添加删除元素</h2><p>jQ库与js原生代码的比较如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElement.png\" title=\"addElement\"></p>\n<p>输出结果如下：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-18/addElementOut.png\" title=\"addElementOut\"></p>\n<p>注意js原生代码部分两种方法的不同，第一种方法是与左侧jQ库写出的效果相同，第二种则是直接创建p标签进行追加文本</p>\n<p>从此处其实已经可以看出jQ的方便之处，降低了代码复杂度，使代码更加简洁。</p>\n<h2 id=\"四、jQ功能简介\"><a href=\"#四、jQ功能简介\" class=\"headerlink\" title=\"四、jQ功能简介\"></a>四、jQ功能简介</h2><p>jQ库功能可以说是很强大，把js代码实现某些功能变得简单了很多。jQ几个主要实现的功能包括以下几个方面：</p>\n<ul>\n<li>对DOM的操作，比如上面介绍的几种</li>\n<li>jQ的动画效果，比如淡入淡出效果、滑动效果</li>\n<li>Ajax的功能，使Ajax的写法变得简单</li>\n</ul>\n<p>当然功能应该不止这些，这只是我目前所了解的功能的一个概括，其他具体功能可从网上搜索。</p>\n<h2 id=\"五、结语\"><a href=\"#五、结语\" class=\"headerlink\" title=\"五、结语\"></a>五、结语</h2><p>总感觉目前写的这几篇博客内容太水了，技术深度不够，只是一些很基本的内容，没有什么深入的剖析。仅仅是对所学内容一个简单的使用而已，希望能随着技术的提高，逐渐写一些有深度的文章。</p>"},{"title":"如何实现一个导航栏","date":"2017-10-24T12:19:18.000Z","toc":true,"_content":"\n最近在看bootstrap框架，随便看了点之后觉得框架确实方便，但是感觉用框架之后很拘束，而且bootstrap框架也挺大，为了实现某些功能而引入框架，实在有点大材小用，所以我想把一些功能自己复现一下。\n\n个人比较喜欢一些炫酷的东西，所以可能会整理一系列CSS实现的效果的博客，作为第一篇，就以导航栏为内容吧。\n\n<!--more-->\n\n## 胶囊导航栏\n\n胶囊导航栏十分常见，基本很多网站都是用这种风格，我本人也比较喜欢这种风格，此篇博客将整理普通效果，带选中状态效果，以及带下拉标签的效果。\n\n### 一、普通效果导航栏\n\n该效果只需HTML和CSS即可实现，废话不多讲直接上代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>胶囊导航栏</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"task02.css\">\n  <script type=\"text/javascript\" src=\"jquery-3.2.1.js\"></script>\n</head>\n<body>\n  <div>  \n    <ul>\n      <li><a href=\"#test1\">页一</a></li>\n      <li><a href=\"#test2\">页二</a></li>\n      <li><a href=\"#test3\">页三</a></li>\n      <li><a href=\"#test4\">页四</a></li>\n      <li><a href=\"#test5\">页五</a></li>\n    </ul>\n  </div>\n</body>\n</html>\n```\n\n```css\n*{\n  margin: 0;\n  padding: 0;\n}\n\ndiv{\n  background-color: #222222;\n  height: 60px;\n}\n\nul{\n  text-align: right;  /*右对齐*/\n  padding-right: 40px;\n\n  /*\n  下面两行是为了删除inline-block之间的间隙，\n  第二行为了兼容Chrome，\n  内容来自张鑫旭博客\n  */\n  \n  font-size: 0;\n  -webkit-text-size-adjust:none;\n}\n\nul li{\n  display: inline-block;\n  padding: 0 30px;  /*不用margin以便li导航项目选中时没有空隙*/\n  \n}\n\nul li a{\n  text-decoration: none;\n  width: 40px;      /*防止IE出现问题*/\n  display: block;      /*允许我们使用width*/\n  text-align: center;\n  line-height: 60px;    /*上下居中*/\n  font-size: 18px;\n  color: #ffffff;\n}\n\nli:hover{\n  background-color: #484FFD; \n}\n```\n\n效果：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/commonEffect.png)\n\n说一下要注意的几点：\n* 浏览器默认有padding和margin，所以此处要设置一下\n* li其实也可以使用float，但是浮动是魔鬼这句话我谨记（自张鑫旭博客），所以能不用float我也尽量不用了\n* 尽量指定a的宽度，具体不指定会出现什么问题，目前没发现，但最好指定一下吧\n\n### 二、选中效果导航栏\n\n选中效果不是hover伪类，而是当鼠标选中时，该块会处于被选中状态，此处分享两种方法（不是我想出来的）。\n\n#### 方法一\n\n```js \n//方法一：jQ实现选中效果，但是刷新后效果消失\n$(document).ready(function(){\n  $(\"li\").each(function(index){\n    $(this).click(function(){\n      //下一行防止多个选中状态\n      $(\"li\").removeClass(\"selectState\");\n      $(\"li\").eq(index).addClass(\"selectState\");\n    })\n  })\n})\n```\n\n```css\n.selectState{\n  background-color: #484FFD;\n}\n```\n\n方法一用each遍历li数组，并将index值作为参数，removeClass是为了防止出现多个选中情况\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError1.png \"选中效果错误1\")\n\n另外还有一处需要注意的是inline-block产生的间隙问题\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError2.png \"选中效果错误2\")\n\n解决方法有几种，此处提出一种`font-size: 0;`,`-webkit-text-size-adjust:none;`第二处为了兼容Chrome，详情请跳转[张鑫旭博客inline-block间隙解决方案](http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/)\n\n方法一的不足之处很致命，刷新之后效果就会消失，所以一般不采用这种方案。\n\n#### 方法二\n\n```js \n$(document).ready(function(){\n  var urlCurrent = location.href;\n  //当然此处也可以遍历li标签，只是下面结构要改一下，查找父元素改为子元素即可\n  $(\"a\").each(function(){\n    //indexOf返回查找到的字符串中首次出现位置，没找到则返回-1，后一句判断不为空\n    if(urlCurrent.indexOf($(this).attr(\"href\")) > -1 &&  $(this).attr(\"href\") != \"\"){\n        $(this).parent().addClass(\"selectState\");\n        console.log(\"success\");\n    }else{\n      $(\"li\").parent().removeClass(\"selectState\");\n    }\n  })\n  $(\"li\").each(function(index){\n    $(this).click(function(){\n      //下一行防止多个选中状态\n      $(\"li\").removeClass(\"selectState\");\n      $(\"li\").eq(index).addClass(\"selectState\");\n    })\n  })\n})\n```\n\n方法二在方法一的基础上，加了一个对a标签的遍历（也可以遍历li标签），原理是，使用`location.href`获取当前页面url，然后对a标签href属性，使用indexOf方法检索，若找到，则返回大于-1的值，此时将样式表加上。此时再用刷新，则依然会被选中。\n\n### 三、带下拉框式导航栏\n\n这个练习代码是看完学校教务处主页的导航栏代码后写的，代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>下拉标签导航栏</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"task03.css\">\n  <script type=\"text/javascript\" src=\"jquery-3.2.1.js\"></script>\n</head>\n<body>\n  <div class=\"container\">  \n    <div class=\"navigation\">\n      <div class=\"Test1\">\n        <a href=\"#test1\">页一</a>\n          <div class=\"panel1\">\n            <ul>\n              <li><a href=\"#t1\">例1</a></li>\n              <li><a href=\"#t2\">例2</a></li>\n              <li><a href=\"#t3\">例3</a></li>\n            </ul>\n          </div>\n      </div>\n      <div class=\"Test2\">\n        <a href=\"#test2\">页二</a>\n          <div class=\"panel2\">\n            <ul>\n              <li><a href=\"#t4\">例4</a></li>\n              <li><a href=\"#t5\">例5</a></li>\n              <li><a href=\"#t6\">例6</a></li>    \n            </ul>\n          </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>  \n```\n\n```js\n$(document).ready(function(){\n  $(\".Test1\").mouseenter(function(){\n    $(\".panel1\").stop(true,true).slideDown(100);\n  })\n  $(\".Test1\").mouseleave(function(){\n    $(\".panel1\").stop(true,true).slideUp(100);\n  })\n  $(\".Test2\").mouseenter(function(){\n    $(\".panel2\").stop(true,true).slideDown(100);\n  })\n  $(\".Test2\").mouseleave(function(){\n    $(\".panel2\").stop(true,true).slideUp(100);\n  })\n})\n```\n\n```css\n*{\n  margin: 0;\n  padding: 0;\n}\n\n.container{\n  background-color: #222222;\n  height: 60px;\n}\n\nli{\n  list-style: none;\n}\n\n.navigation{\n  float: right;\n  margin-right: 100px\n}\n\n.Test1, .Test2{\n  float: left;\n  width: 80px;\n}\n\n\n.Test2 a, .Test1 a{\n  text-decoration: none;\n  display: block;\n  text-align: center;  \n  line-height: 60px;\n  font-size: 18px;\n  color: #ffffff;\n}\n\n.Test1:hover, .Test2:hover{\n  background-color: #484FFD; \n}\n\n.panel1 , .panel2{\n  display: none;\n}\n\n.panel1 ul, .panel2 ul{\n  border: 1px solid #949494;\n  background-color: #ffffff;\n  box-shadow: 3px 3px 5px #ADADAD;\n}\n\n.panel1 ul a, .panel2 ul a{\n  color: #000000;\n  font-size: 15px;\n}\n```\n\n效果：\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/dropDownBox.png \"带下拉框效果\")\n\n代码实现思路\n\n1、用`navigation`包裹住导航部分，并声明右浮动，此时脱离文档流，不会影响后面布局\n\n2、每一个大标签声明左浮动，使顺序正确\n\n3、每一个大标签和下拉框中标签同在一个块中，以便下拉框部分能和大标签部分位置相对，也可以声明`panel`标签来控制下拉框宽度大小\n\n4、使用`mouseenter`与`mouseleave`分别控制鼠标移动至目标与离开目标的不同效果\n\n5、使用`stop`来控制鼠标离开时动画立即完成\n\n6、使用`box-shadow`来根据不同情况控制阴影效果\n\n7、可以在下拉框上加`hover`伪类来控制选中效果（该代码没有使用）\n\n8、注意mouseenter和mouseleave控制的元素，要控制字体和下拉框的父元素才能实现鼠标离开字体或下拉框时，下拉框收回\n\n9、fixed和absolute都能使用z-index来控制层数\n\n## 结语\n\n这是CSS实现效果的第一篇，以后陆续将整理其他效果，以便后面的使用。另外，导航栏效果很多，以后如果有机会，将整理其他一些导航栏的效果。\n","source":"_posts/5. 如何实现一个导航栏.md","raw":"---\ntitle: 如何实现一个导航栏\ndate: 2017-10-24 20:19:18\ntoc: true\ncategories:\n- 前端\ntags: \n- CSS\n- JS\n---\n\n最近在看bootstrap框架，随便看了点之后觉得框架确实方便，但是感觉用框架之后很拘束，而且bootstrap框架也挺大，为了实现某些功能而引入框架，实在有点大材小用，所以我想把一些功能自己复现一下。\n\n个人比较喜欢一些炫酷的东西，所以可能会整理一系列CSS实现的效果的博客，作为第一篇，就以导航栏为内容吧。\n\n<!--more-->\n\n## 胶囊导航栏\n\n胶囊导航栏十分常见，基本很多网站都是用这种风格，我本人也比较喜欢这种风格，此篇博客将整理普通效果，带选中状态效果，以及带下拉标签的效果。\n\n### 一、普通效果导航栏\n\n该效果只需HTML和CSS即可实现，废话不多讲直接上代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>胶囊导航栏</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"task02.css\">\n  <script type=\"text/javascript\" src=\"jquery-3.2.1.js\"></script>\n</head>\n<body>\n  <div>  \n    <ul>\n      <li><a href=\"#test1\">页一</a></li>\n      <li><a href=\"#test2\">页二</a></li>\n      <li><a href=\"#test3\">页三</a></li>\n      <li><a href=\"#test4\">页四</a></li>\n      <li><a href=\"#test5\">页五</a></li>\n    </ul>\n  </div>\n</body>\n</html>\n```\n\n```css\n*{\n  margin: 0;\n  padding: 0;\n}\n\ndiv{\n  background-color: #222222;\n  height: 60px;\n}\n\nul{\n  text-align: right;  /*右对齐*/\n  padding-right: 40px;\n\n  /*\n  下面两行是为了删除inline-block之间的间隙，\n  第二行为了兼容Chrome，\n  内容来自张鑫旭博客\n  */\n  \n  font-size: 0;\n  -webkit-text-size-adjust:none;\n}\n\nul li{\n  display: inline-block;\n  padding: 0 30px;  /*不用margin以便li导航项目选中时没有空隙*/\n  \n}\n\nul li a{\n  text-decoration: none;\n  width: 40px;      /*防止IE出现问题*/\n  display: block;      /*允许我们使用width*/\n  text-align: center;\n  line-height: 60px;    /*上下居中*/\n  font-size: 18px;\n  color: #ffffff;\n}\n\nli:hover{\n  background-color: #484FFD; \n}\n```\n\n效果：\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/commonEffect.png)\n\n说一下要注意的几点：\n* 浏览器默认有padding和margin，所以此处要设置一下\n* li其实也可以使用float，但是浮动是魔鬼这句话我谨记（自张鑫旭博客），所以能不用float我也尽量不用了\n* 尽量指定a的宽度，具体不指定会出现什么问题，目前没发现，但最好指定一下吧\n\n### 二、选中效果导航栏\n\n选中效果不是hover伪类，而是当鼠标选中时，该块会处于被选中状态，此处分享两种方法（不是我想出来的）。\n\n#### 方法一\n\n```js \n//方法一：jQ实现选中效果，但是刷新后效果消失\n$(document).ready(function(){\n  $(\"li\").each(function(index){\n    $(this).click(function(){\n      //下一行防止多个选中状态\n      $(\"li\").removeClass(\"selectState\");\n      $(\"li\").eq(index).addClass(\"selectState\");\n    })\n  })\n})\n```\n\n```css\n.selectState{\n  background-color: #484FFD;\n}\n```\n\n方法一用each遍历li数组，并将index值作为参数，removeClass是为了防止出现多个选中情况\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError1.png \"选中效果错误1\")\n\n另外还有一处需要注意的是inline-block产生的间隙问题\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError2.png \"选中效果错误2\")\n\n解决方法有几种，此处提出一种`font-size: 0;`,`-webkit-text-size-adjust:none;`第二处为了兼容Chrome，详情请跳转[张鑫旭博客inline-block间隙解决方案](http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/)\n\n方法一的不足之处很致命，刷新之后效果就会消失，所以一般不采用这种方案。\n\n#### 方法二\n\n```js \n$(document).ready(function(){\n  var urlCurrent = location.href;\n  //当然此处也可以遍历li标签，只是下面结构要改一下，查找父元素改为子元素即可\n  $(\"a\").each(function(){\n    //indexOf返回查找到的字符串中首次出现位置，没找到则返回-1，后一句判断不为空\n    if(urlCurrent.indexOf($(this).attr(\"href\")) > -1 &&  $(this).attr(\"href\") != \"\"){\n        $(this).parent().addClass(\"selectState\");\n        console.log(\"success\");\n    }else{\n      $(\"li\").parent().removeClass(\"selectState\");\n    }\n  })\n  $(\"li\").each(function(index){\n    $(this).click(function(){\n      //下一行防止多个选中状态\n      $(\"li\").removeClass(\"selectState\");\n      $(\"li\").eq(index).addClass(\"selectState\");\n    })\n  })\n})\n```\n\n方法二在方法一的基础上，加了一个对a标签的遍历（也可以遍历li标签），原理是，使用`location.href`获取当前页面url，然后对a标签href属性，使用indexOf方法检索，若找到，则返回大于-1的值，此时将样式表加上。此时再用刷新，则依然会被选中。\n\n### 三、带下拉框式导航栏\n\n这个练习代码是看完学校教务处主页的导航栏代码后写的，代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>下拉标签导航栏</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"task03.css\">\n  <script type=\"text/javascript\" src=\"jquery-3.2.1.js\"></script>\n</head>\n<body>\n  <div class=\"container\">  \n    <div class=\"navigation\">\n      <div class=\"Test1\">\n        <a href=\"#test1\">页一</a>\n          <div class=\"panel1\">\n            <ul>\n              <li><a href=\"#t1\">例1</a></li>\n              <li><a href=\"#t2\">例2</a></li>\n              <li><a href=\"#t3\">例3</a></li>\n            </ul>\n          </div>\n      </div>\n      <div class=\"Test2\">\n        <a href=\"#test2\">页二</a>\n          <div class=\"panel2\">\n            <ul>\n              <li><a href=\"#t4\">例4</a></li>\n              <li><a href=\"#t5\">例5</a></li>\n              <li><a href=\"#t6\">例6</a></li>    \n            </ul>\n          </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>  \n```\n\n```js\n$(document).ready(function(){\n  $(\".Test1\").mouseenter(function(){\n    $(\".panel1\").stop(true,true).slideDown(100);\n  })\n  $(\".Test1\").mouseleave(function(){\n    $(\".panel1\").stop(true,true).slideUp(100);\n  })\n  $(\".Test2\").mouseenter(function(){\n    $(\".panel2\").stop(true,true).slideDown(100);\n  })\n  $(\".Test2\").mouseleave(function(){\n    $(\".panel2\").stop(true,true).slideUp(100);\n  })\n})\n```\n\n```css\n*{\n  margin: 0;\n  padding: 0;\n}\n\n.container{\n  background-color: #222222;\n  height: 60px;\n}\n\nli{\n  list-style: none;\n}\n\n.navigation{\n  float: right;\n  margin-right: 100px\n}\n\n.Test1, .Test2{\n  float: left;\n  width: 80px;\n}\n\n\n.Test2 a, .Test1 a{\n  text-decoration: none;\n  display: block;\n  text-align: center;  \n  line-height: 60px;\n  font-size: 18px;\n  color: #ffffff;\n}\n\n.Test1:hover, .Test2:hover{\n  background-color: #484FFD; \n}\n\n.panel1 , .panel2{\n  display: none;\n}\n\n.panel1 ul, .panel2 ul{\n  border: 1px solid #949494;\n  background-color: #ffffff;\n  box-shadow: 3px 3px 5px #ADADAD;\n}\n\n.panel1 ul a, .panel2 ul a{\n  color: #000000;\n  font-size: 15px;\n}\n```\n\n效果：\n\n![](https://file-1305436646.file.myqcloud.com/blog/2017-10-24/dropDownBox.png \"带下拉框效果\")\n\n代码实现思路\n\n1、用`navigation`包裹住导航部分，并声明右浮动，此时脱离文档流，不会影响后面布局\n\n2、每一个大标签声明左浮动，使顺序正确\n\n3、每一个大标签和下拉框中标签同在一个块中，以便下拉框部分能和大标签部分位置相对，也可以声明`panel`标签来控制下拉框宽度大小\n\n4、使用`mouseenter`与`mouseleave`分别控制鼠标移动至目标与离开目标的不同效果\n\n5、使用`stop`来控制鼠标离开时动画立即完成\n\n6、使用`box-shadow`来根据不同情况控制阴影效果\n\n7、可以在下拉框上加`hover`伪类来控制选中效果（该代码没有使用）\n\n8、注意mouseenter和mouseleave控制的元素，要控制字体和下拉框的父元素才能实现鼠标离开字体或下拉框时，下拉框收回\n\n9、fixed和absolute都能使用z-index来控制层数\n\n## 结语\n\n这是CSS实现效果的第一篇，以后陆续将整理其他效果，以便后面的使用。另外，导航栏效果很多，以后如果有机会，将整理其他一些导航栏的效果。\n","slug":"5. 如何实现一个导航栏","published":1,"updated":"2021-09-30T06:45:21.611Z","_id":"cku41le91001hidp27ojaax8s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在看bootstrap框架，随便看了点之后觉得框架确实方便，但是感觉用框架之后很拘束，而且bootstrap框架也挺大，为了实现某些功能而引入框架，实在有点大材小用，所以我想把一些功能自己复现一下。</p>\n<p>个人比较喜欢一些炫酷的东西，所以可能会整理一系列CSS实现的效果的博客，作为第一篇，就以导航栏为内容吧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"胶囊导航栏\"><a href=\"#胶囊导航栏\" class=\"headerlink\" title=\"胶囊导航栏\"></a>胶囊导航栏</h2><p>胶囊导航栏十分常见，基本很多网站都是用这种风格，我本人也比较喜欢这种风格，此篇博客将整理普通效果，带选中状态效果，以及带下拉标签的效果。</p>\n<h3 id=\"一、普通效果导航栏\"><a href=\"#一、普通效果导航栏\" class=\"headerlink\" title=\"一、普通效果导航栏\"></a>一、普通效果导航栏</h3><p>该效果只需HTML和CSS即可实现，废话不多讲直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>胶囊导航栏<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;task02.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>页一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test2&quot;</span>&gt;</span>页二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test3&quot;</span>&gt;</span>页三<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test4&quot;</span>&gt;</span>页四<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test5&quot;</span>&gt;</span>页五<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#222222</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;  <span class=\"comment\">/*右对齐*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  下面两行是为了删除inline-block之间的间隙，</span></span><br><span class=\"line\"><span class=\"comment\">  第二行为了兼容Chrome，</span></span><br><span class=\"line\"><span class=\"comment\">  内容来自张鑫旭博客</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  -webkit-text-size-adjust:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;  <span class=\"comment\">/*不用margin以便li导航项目选中时没有空隙*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;      <span class=\"comment\">/*防止IE出现问题*/</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;      <span class=\"comment\">/*允许我们使用width*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;    <span class=\"comment\">/*上下居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/commonEffect.png\"></p>\n<p>说一下要注意的几点：</p>\n<ul>\n<li>浏览器默认有padding和margin，所以此处要设置一下</li>\n<li>li其实也可以使用float，但是浮动是魔鬼这句话我谨记（自张鑫旭博客），所以能不用float我也尽量不用了</li>\n<li>尽量指定a的宽度，具体不指定会出现什么问题，目前没发现，但最好指定一下吧</li>\n</ul>\n<h3 id=\"二、选中效果导航栏\"><a href=\"#二、选中效果导航栏\" class=\"headerlink\" title=\"二、选中效果导航栏\"></a>二、选中效果导航栏</h3><p>选中效果不是hover伪类，而是当鼠标选中时，该块会处于被选中状态，此处分享两种方法（不是我想出来的）。</p>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：jQ实现选中效果，但是刷新后效果消失</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//下一行防止多个选中状态</span></span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).eq(index).addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selectState</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法一用each遍历li数组，并将index值作为参数，removeClass是为了防止出现多个选中情况</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError1.png\" title=\"选中效果错误1\"></p>\n<p>另外还有一处需要注意的是inline-block产生的间隙问题</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError2.png\" title=\"选中效果错误2\"></p>\n<p>解决方法有几种，此处提出一种<code>font-size: 0;</code>,<code>-webkit-text-size-adjust:none;</code>第二处为了兼容Chrome，详情请跳转<a href=\"http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\">张鑫旭博客inline-block间隙解决方案</a></p>\n<p>方法一的不足之处很致命，刷新之后效果就会消失，所以一般不采用这种方案。</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> urlCurrent = location.href;</span><br><span class=\"line\">  <span class=\"comment\">//当然此处也可以遍历li标签，只是下面结构要改一下，查找父元素改为子元素即可</span></span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//indexOf返回查找到的字符串中首次出现位置，没找到则返回-1，后一句判断不为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(urlCurrent.indexOf($(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;href&quot;</span>)) &gt; -<span class=\"number\">1</span> &amp;&amp;  $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;href&quot;</span>) != <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">        $(<span class=\"built_in\">this</span>).parent().addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).parent().removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//下一行防止多个选中状态</span></span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).eq(index).addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>方法二在方法一的基础上，加了一个对a标签的遍历（也可以遍历li标签），原理是，使用<code>location.href</code>获取当前页面url，然后对a标签href属性，使用indexOf方法检索，若找到，则返回大于-1的值，此时将样式表加上。此时再用刷新，则依然会被选中。</p>\n<h3 id=\"三、带下拉框式导航栏\"><a href=\"#三、带下拉框式导航栏\" class=\"headerlink\" title=\"三、带下拉框式导航栏\"></a>三、带下拉框式导航栏</h3><p>这个练习代码是看完学校教务处主页的导航栏代码后写的，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>下拉标签导航栏<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;task03.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navigation&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Test1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>页一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t1&quot;</span>&gt;</span>例1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t2&quot;</span>&gt;</span>例2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t3&quot;</span>&gt;</span>例3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Test2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test2&quot;</span>&gt;</span>页二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t4&quot;</span>&gt;</span>例4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t5&quot;</span>&gt;</span>例5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t6&quot;</span>&gt;</span>例6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    </span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test1&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel1&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideDown(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test1&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel1&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideUp(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test2&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel2&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideDown(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test2&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel2&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideUp(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#222222</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.navigation</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test1</span>, <span class=\"selector-class\">.Test2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test2</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.Test1</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;  </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test1</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.Test2</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> , <span class=\"selector-class\">.panel2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> <span class=\"selector-tag\">ul</span>, <span class=\"selector-class\">.panel2</span> <span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#949494</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">#ADADAD</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.panel2</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/dropDownBox.png\" title=\"带下拉框效果\"></p>\n<p>代码实现思路</p>\n<p>1、用<code>navigation</code>包裹住导航部分，并声明右浮动，此时脱离文档流，不会影响后面布局</p>\n<p>2、每一个大标签声明左浮动，使顺序正确</p>\n<p>3、每一个大标签和下拉框中标签同在一个块中，以便下拉框部分能和大标签部分位置相对，也可以声明<code>panel</code>标签来控制下拉框宽度大小</p>\n<p>4、使用<code>mouseenter</code>与<code>mouseleave</code>分别控制鼠标移动至目标与离开目标的不同效果</p>\n<p>5、使用<code>stop</code>来控制鼠标离开时动画立即完成</p>\n<p>6、使用<code>box-shadow</code>来根据不同情况控制阴影效果</p>\n<p>7、可以在下拉框上加<code>hover</code>伪类来控制选中效果（该代码没有使用）</p>\n<p>8、注意mouseenter和mouseleave控制的元素，要控制字体和下拉框的父元素才能实现鼠标离开字体或下拉框时，下拉框收回</p>\n<p>9、fixed和absolute都能使用z-index来控制层数</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这是CSS实现效果的第一篇，以后陆续将整理其他效果，以便后面的使用。另外，导航栏效果很多，以后如果有机会，将整理其他一些导航栏的效果。</p>\n","site":{"data":{}},"excerpt":"<p>最近在看bootstrap框架，随便看了点之后觉得框架确实方便，但是感觉用框架之后很拘束，而且bootstrap框架也挺大，为了实现某些功能而引入框架，实在有点大材小用，所以我想把一些功能自己复现一下。</p>\n<p>个人比较喜欢一些炫酷的东西，所以可能会整理一系列CSS实现的效果的博客，作为第一篇，就以导航栏为内容吧。</p>","more":"<h2 id=\"胶囊导航栏\"><a href=\"#胶囊导航栏\" class=\"headerlink\" title=\"胶囊导航栏\"></a>胶囊导航栏</h2><p>胶囊导航栏十分常见，基本很多网站都是用这种风格，我本人也比较喜欢这种风格，此篇博客将整理普通效果，带选中状态效果，以及带下拉标签的效果。</p>\n<h3 id=\"一、普通效果导航栏\"><a href=\"#一、普通效果导航栏\" class=\"headerlink\" title=\"一、普通效果导航栏\"></a>一、普通效果导航栏</h3><p>该效果只需HTML和CSS即可实现，废话不多讲直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>胶囊导航栏<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;task02.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>页一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test2&quot;</span>&gt;</span>页二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test3&quot;</span>&gt;</span>页三<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test4&quot;</span>&gt;</span>页四<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test5&quot;</span>&gt;</span>页五<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#222222</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;  <span class=\"comment\">/*右对齐*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  下面两行是为了删除inline-block之间的间隙，</span></span><br><span class=\"line\"><span class=\"comment\">  第二行为了兼容Chrome，</span></span><br><span class=\"line\"><span class=\"comment\">  内容来自张鑫旭博客</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  -webkit-text-size-adjust:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">30px</span>;  <span class=\"comment\">/*不用margin以便li导航项目选中时没有空隙*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;      <span class=\"comment\">/*防止IE出现问题*/</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;      <span class=\"comment\">/*允许我们使用width*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;    <span class=\"comment\">/*上下居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/commonEffect.png\"></p>\n<p>说一下要注意的几点：</p>\n<ul>\n<li>浏览器默认有padding和margin，所以此处要设置一下</li>\n<li>li其实也可以使用float，但是浮动是魔鬼这句话我谨记（自张鑫旭博客），所以能不用float我也尽量不用了</li>\n<li>尽量指定a的宽度，具体不指定会出现什么问题，目前没发现，但最好指定一下吧</li>\n</ul>\n<h3 id=\"二、选中效果导航栏\"><a href=\"#二、选中效果导航栏\" class=\"headerlink\" title=\"二、选中效果导航栏\"></a>二、选中效果导航栏</h3><p>选中效果不是hover伪类，而是当鼠标选中时，该块会处于被选中状态，此处分享两种方法（不是我想出来的）。</p>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：jQ实现选中效果，但是刷新后效果消失</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//下一行防止多个选中状态</span></span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).eq(index).addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.selectState</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法一用each遍历li数组，并将index值作为参数，removeClass是为了防止出现多个选中情况</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError1.png\" title=\"选中效果错误1\"></p>\n<p>另外还有一处需要注意的是inline-block产生的间隙问题</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/electError2.png\" title=\"选中效果错误2\"></p>\n<p>解决方法有几种，此处提出一种<code>font-size: 0;</code>,<code>-webkit-text-size-adjust:none;</code>第二处为了兼容Chrome，详情请跳转<a href=\"http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\">张鑫旭博客inline-block间隙解决方案</a></p>\n<p>方法一的不足之处很致命，刷新之后效果就会消失，所以一般不采用这种方案。</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> urlCurrent = location.href;</span><br><span class=\"line\">  <span class=\"comment\">//当然此处也可以遍历li标签，只是下面结构要改一下，查找父元素改为子元素即可</span></span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//indexOf返回查找到的字符串中首次出现位置，没找到则返回-1，后一句判断不为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(urlCurrent.indexOf($(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;href&quot;</span>)) &gt; -<span class=\"number\">1</span> &amp;&amp;  $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&quot;href&quot;</span>) != <span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">        $(<span class=\"built_in\">this</span>).parent().addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).parent().removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//下一行防止多个选中状态</span></span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).removeClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">      $(<span class=\"string\">&quot;li&quot;</span>).eq(index).addClass(<span class=\"string\">&quot;selectState&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>方法二在方法一的基础上，加了一个对a标签的遍历（也可以遍历li标签），原理是，使用<code>location.href</code>获取当前页面url，然后对a标签href属性，使用indexOf方法检索，若找到，则返回大于-1的值，此时将样式表加上。此时再用刷新，则依然会被选中。</p>\n<h3 id=\"三、带下拉框式导航栏\"><a href=\"#三、带下拉框式导航栏\" class=\"headerlink\" title=\"三、带下拉框式导航栏\"></a>三、带下拉框式导航栏</h3><p>这个练习代码是看完学校教务处主页的导航栏代码后写的，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>下拉标签导航栏<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;task03.css&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navigation&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Test1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test1&quot;</span>&gt;</span>页一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t1&quot;</span>&gt;</span>例1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t2&quot;</span>&gt;</span>例2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t3&quot;</span>&gt;</span>例3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Test2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#test2&quot;</span>&gt;</span>页二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t4&quot;</span>&gt;</span>例4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t5&quot;</span>&gt;</span>例5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#t6&quot;</span>&gt;</span>例6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    </span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test1&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel1&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideDown(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test1&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel1&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideUp(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test2&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel2&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideDown(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.Test2&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.panel2&quot;</span>).stop(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>).slideUp(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#222222</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.navigation</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test1</span>, <span class=\"selector-class\">.Test2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test2</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.Test1</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;  </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.Test1</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.Test2</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#484FFD</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> , <span class=\"selector-class\">.panel2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> <span class=\"selector-tag\">ul</span>, <span class=\"selector-class\">.panel2</span> <span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#949494</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">#ADADAD</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.panel1</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.panel2</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://file-1305436646.file.myqcloud.com/blog/2017-10-24/dropDownBox.png\" title=\"带下拉框效果\"></p>\n<p>代码实现思路</p>\n<p>1、用<code>navigation</code>包裹住导航部分，并声明右浮动，此时脱离文档流，不会影响后面布局</p>\n<p>2、每一个大标签声明左浮动，使顺序正确</p>\n<p>3、每一个大标签和下拉框中标签同在一个块中，以便下拉框部分能和大标签部分位置相对，也可以声明<code>panel</code>标签来控制下拉框宽度大小</p>\n<p>4、使用<code>mouseenter</code>与<code>mouseleave</code>分别控制鼠标移动至目标与离开目标的不同效果</p>\n<p>5、使用<code>stop</code>来控制鼠标离开时动画立即完成</p>\n<p>6、使用<code>box-shadow</code>来根据不同情况控制阴影效果</p>\n<p>7、可以在下拉框上加<code>hover</code>伪类来控制选中效果（该代码没有使用）</p>\n<p>8、注意mouseenter和mouseleave控制的元素，要控制字体和下拉框的父元素才能实现鼠标离开字体或下拉框时，下拉框收回</p>\n<p>9、fixed和absolute都能使用z-index来控制层数</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这是CSS实现效果的第一篇，以后陆续将整理其他效果，以便后面的使用。另外，导航栏效果很多，以后如果有机会，将整理其他一些导航栏的效果。</p>"},{"title":"实现一个问卷平台","date":"2018-01-11T08:35:20.000Z","toc":true,"_content":"\n说来惭愧，好久没有更新博客了，大概过了两个多月吧，这两个多月当然并没有出去浪啊，还是在好好的学习代码的。前一段时间和后端合作了两个项目，一个是问卷平台的项目，就是这次将要总结的内容，还有一个是一个个人的博客。这两个项目也算是和后端的两次比较详细的合作，相比上次的微信小程序有了更大的提高。两个项目坐下来感觉技术提高了不少，但是由于赶进度的原因也欠下了很多技术债，寒假时候要好好的补一补了。不过正所谓业务驱动需求，需求驱动技术嘛。\n\n两个项目下来，发现都用原生的代码写真的累，前一段时间每天基本都是代码，没怎么闲过，有很多重复的劳动，原生代码也写了不少，感觉可以进行学习一些框架了。\n\n<!--more-->\n\n## 页面展示\n\n界面做的还是很low的，不过也还勉强能看\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/display.png\">\n\n## 技术细节\n\n这一部分将整理一下在写页面的时候学到的一些新的技术。\n\n### 首页\n\n首页部分其实做的挺丑的，当时时间比较紧，所以并没有进行设计，直接就开始动手写了，这部分都是一些很常见的东西，但是有一块就是一个正反面的翻转效果感觉挺赞的，是从别的网站上看到然后学习了一下写出来的。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/1.png\" width=\"400px\">\n\n从技术上看实现方法就是采用了两个`div`层，一个显示的是正面，另一个反面使用`rotateY(-180deg)`来进行一个180度的翻转，显示成反面，然后使用`z-index`来达到一个遮罩效果，然后就是`hover`实现一个点击后的效果将正面设置为`rotateY(180deg)`并将透明度`opacity`设置成0，反面设置为`rotateY(0deg)`透明度`opacity`设置为1，来使转换更加的自然。不过需要注意的是要将`position`设置为绝对定位或一些其他的方式，不然z-index不会生效。关键代码如下：\n\n```html\n<div class=\"developers\">\n  <!-- <img src=\"img/xiaoqi.png\"> -->\n  <div class=\"renpicture\">\n    <div class=\"img img1\"></div>\n    <div class=\"img-font\">\n      <p>后端开发</p>\n    </div>\n  </div>\n  <div class=\"developers-font LwolveJ-font\">LwolveJ</div>\n</div>\n```\n\n```css\n.developers {\n  width: 33.3%;\n  height: 500px;\n  display: inline-block;\n  vertical-align: top;\n  text-align: center;\n  position: relative;\n}\n\n.renpicture {\n  width: 250px;\n  height: 250px;\n  margin: 0 auto;\n  position: relative;\n  -webkit-perspective: 1000;\n}\n\n.img , .img-font {\n  position: absolute;\n  margin: 0 auto;\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  box-shadow: 0 3px 5px #9E9E9E;\n  -webkit-transition: all 0.5s;\n}\n\n.img {\n  z-index: 5;\n  background-size: 250px 250px;\n}\n\n.img1 {\n  background-image: url(\"../img/lijie.jpg\");\n}\n\n.img-font {\n  font-size: 25px;\n  background-color: #1799e5;\n  -webkit-transform: rotateY(-180deg);\n  opacity: 0;\n}\n\n.img-font p {\n  line-height: 250px;\n  color: #FFFFFF;\n}\n\n.renpicture:hover .img{\n  -webkit-transform:rotateY(180deg);\n  z-index: 5;\n  opacity: 0;\n}\n\n.renpicture:hover .img-font {\n  -webkit-transform: rotateY(0deg);\n  z-index: 10;\n  opacity: 1;\n}\n```\n\n### 生成问卷页面\n\n这一个页面所涉及到的代码最多，而且也是该项目的重点，需求主要就是右侧的窗口能生成标题、单选题、多选题、简短回答这几个问卷常见的题型，而且右边所添加的选项能即时在右侧展示，并且能删除选项，然后点击生成问卷会在左侧显示出相应的效果。初次之外还有个比较人性化的细节，即右侧的操作框会随着左侧题目的位置而变动。效果大概就是这么多，那么就是一些技术的实现了。\n\n首先是HTML结构，右侧操作框的HTML结构每种题型都写成一块HTML，然后都使用`display:none`隐藏，然后默认将标题显示为第一个，然后通过js获取下拉框选择的题型来显示相应的格式。然后是CSS部分，这一部分都是一些之前就用过的，所以此处不再整理。本部分将着重整理js部分的代码。\n\n#### 表单切换功能：\n\n```js\n//===================表单切换=======================\nvar inputTypeSelectBtn = g('input-type-select');\n\nvar selectTypes = {\n  \"title\": g(\"title-box\"),\n  \"radio\": g('radio-box'),\n  \"checkbox\": g('checkbox-box'),\n  \"text\": g('text-box')\n}\n\n//获取选择value\nvar getSelectContent = function(select) {\n  var index = select.selectedIndex;\n  return select.options[index].value;\n}\n\n//初始化value值\nvar selectValue = getSelectContent(inputTypeSelectBtn);\n\nvar changeType = function(type) {\n  for(var i in selectTypes){\n    selectTypes[i].style.display = 'none';\n  }\n  selectTypes[type].style.display = \"block\";\n}\n\n//当表单切换时触发\ninputTypeSelectBtn.onchange = function() {\n  selectValue = getSelectContent(inputTypeSelectBtn);\n  changeType(selectValue);\n}\n```\n\n该部分思路是当用户点击题型切换时出发`onchange`然后getSelectContent函数获取改变的值，并返回给selectValue值，然后当作参数传给changeType函数来控制相应表单的显示与隐藏，这里将四种题型的节点都写在了selectTypes对象里面，也同时方便了后面其他功能的实现。\n\n#### 选项的添加与删除功能\n\n首先是绑定事件，分别是鼠标点击事件和键盘回车事件\n\n```js\nvar addOptionsBtns = {\n  'radio': selectTypes['radio'].getElementsByClassName('add-btn')[0],\n  'checkbox': selectTypes['checkbox'].getElementsByClassName('add-btn')[0]\n}\n\nvar addOptionsInputs = {\n  'radio': selectTypes['radio'].getElementsByClassName('add-option')[0],\n  'checkbox': selectTypes['checkbox'].getElementsByClassName('add-option')[0]\n}\n\n//为按钮绑定事件\nfor(var key in addOptionsBtns) {\n  (function(e) {\n    addOptionsBtns[e].onclick = function() {\n      var value = selectTypes[e].getElementsByClassName('add-option')[0].value;\n      if(value === \"\") {\n        return false;  \n      }\n      addOption(selectTypes[e], e, value);\n      selectTypes[e].getElementsByClassName('add-option')[0].value = '';\n    }\n  })(key)\n}\n\nfor (var key in addOptionsInputs) {\n  (function(e) {\n    addOptionsInputs[e].addEventListener('keyup', function() {\n      if (event.keyCode === 13) {\n        addOptionsBtns[e].click();\n      }\n    });\n  })(key)\n}\n```\n\n此处for循环里面的function事件采用了`(function(e){}(key))`来调用，key即function的参数，当js运行到此处的时候将直接调用，里面的两个addOptionsBtns和addOptionsInputs对象分别对应button按钮的点击事件和input输入框的键盘事件，键盘事件实现的逻辑就是调用了点击事件`addOptionsBtns[e].click();`。\n\n然后是添加选项和删除选项功能\n\n```js\n//======================配置选项添加及删除功能===========\n\nvar Option = function(type, value, deleteBtn, selfElement) {\n  this.type = type;\n  this.value = value;\n  this.deleteBtn = deleteBtn;\n  this.deleteBtn.self = this;\n  this.selfElement = selfElement;\n  this.selfElement.self = this;\n}\n\nvar options = [];  //存放所有选项\nvar addOption = function(selectTypes, key, value) {\n  \n\n  var type = key;\n  var optionsWrap = selectTypes.getElementsByClassName('options-wrap')[0];\n  var optionWrap = document.createElement('div');\n  optionWrap.className = 'option-wrap';\n  optionWrap.innerHTML = '<div class=\"delete-mask\">删除</div> <span class=\"option-set\">' + value + '</span>';\n  optionsWrap.appendChild(optionWrap);\n  var deleteBtn = optionWrap.getElementsByClassName('delete-mask')[0];\n  var selfElement = optionWrap;\n  var option = new Option(type, value, deleteBtn, selfElement);\n  options.push(option);\n  \n  deleteBtn.addEventListener('click', function() {\n    deleteOption(deleteBtn);\n  });\n}\n\nvar deleteOption = function(btn) {\n  for(var i = 0; i < options.length; i++) {\n    if(options[i] === btn.self) {\n      options.splice(i ,1);\n      break;\n    }\n  }\n  btn.self.selfElement.parentNode.removeChild(btn.self.selfElement);\n  delete btn.self;\n}\n```\n\n这一部分先是定义了一个`Option()`函数，并在`addOption()`中new了一个`option`对象出来，然后使用`push`方法依次存入开始定义的`options`数组里面，此处的new是一个我目前还不完全理解的用法，以及js原型链，这一个项目整理完之后将整理一片关于new和js原型链的文章。\n\n\n#### 右侧框移动功能\n\n```js\nvar formSetBox = g('content-right');\nvar formBox = g('content-body');\nvar moveSetBox = function() {\n  var questionElements = formBox.getElementsByClassName('question-wrap');\n  var topPosition = formBox.offsetHeight - questionElements[questionElements.length - 1].offsetHeight;\n  startMove(formSetBox, topPosition, 10);\n}\n\nvar timer = null;\nvar positionTop = 0;\nstartMove = function(element, target, interval) {\n\n  clearInterval(timer);\n  timer = setInterval(function() {\n    var speed = (target - element.offsetTop) / 10;\n    speed = speed > 0 ? Math.ceil(speed) : 0;\n    if (element.offsetTop >= target) {\n\n      clearInterval(timer);\n    } else {\n      positionTop = positionTop + speed;\n      element.style.top = positionTop + 'px';\n    }\n  }, interval)\n}\n```\n\n`moveSetBox()`函数用来计算目标位置即target，`startMove()`函数是核心功能，target-element.offsetTop是计算目标位置和右侧框到顶部的距离只差。然后，此处需要一些数学的计算，计算出speed速度，interval参数是毫秒单位，即每10毫秒的speed，在该函数中即每10毫秒移动speed值的px，可知随着越接近位置，speed越来越小，但是由于`ceil()`函数的存在，speed不会小于0。\n\n> HTMLElement.offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。\n\n> HTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。\n\n\n### 问卷填写页面\n\n这部分页面内容较为简单，有一处值得整理的就是页面间传参的一个功能，页面间传参就是说在问卷选择页面选择一个问卷之后会有使用`window.location.href`来指定url，然后根据参数的不同来获得问卷内容，并渲染出相应的页面。这里是通过地址传值，并使用函数解析地址，获取到参数，然后GET请求获取到问卷内容。\n\n```js\n//页面间参数传递函数获取函数\nvar parseURL = function(url) {\n  var url = url.split(\"?\")[1];\n  var res = url.split(\"=\")[1];\n  console.log(res);\n  return res;\n}\n```\n\n上面代码即获取参数的代码，res即参数。\n\n### 问卷结果展示页面\n\n该部分通过ajax获取相应选择人数数据，然后乘上一定比值，来使图标更加清晰，然后使用js渲染出来即可，建议可以先在html和对应css写上假内容，然后再来写js，之后将html部分注释掉即可。\n\n\n## 后记\n\n这次项目算得上真正意义的第一个和后端合作开发的项目，之前的微信小程序更多依靠着封装的API勉强完成，很多地方的原理都不太懂。这次通过完全的原生HTML+CSS+JS开发的项目，虽然代码较多，使用很多框架之类的可以有效的简化代码，但是基础还是很重要的，所以这次项目很有必要。\n","source":"_posts/6. 实现一个问卷平台.md","raw":"---\ntitle: 实现一个问卷平台\ndate: 2018-1-11 16:35:20\ntoc: true\ncategories:\n- 项目\ntags: \n- 项目\n---\n\n说来惭愧，好久没有更新博客了，大概过了两个多月吧，这两个多月当然并没有出去浪啊，还是在好好的学习代码的。前一段时间和后端合作了两个项目，一个是问卷平台的项目，就是这次将要总结的内容，还有一个是一个个人的博客。这两个项目也算是和后端的两次比较详细的合作，相比上次的微信小程序有了更大的提高。两个项目坐下来感觉技术提高了不少，但是由于赶进度的原因也欠下了很多技术债，寒假时候要好好的补一补了。不过正所谓业务驱动需求，需求驱动技术嘛。\n\n两个项目下来，发现都用原生的代码写真的累，前一段时间每天基本都是代码，没怎么闲过，有很多重复的劳动，原生代码也写了不少，感觉可以进行学习一些框架了。\n\n<!--more-->\n\n## 页面展示\n\n界面做的还是很low的，不过也还勉强能看\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/display.png\">\n\n## 技术细节\n\n这一部分将整理一下在写页面的时候学到的一些新的技术。\n\n### 首页\n\n首页部分其实做的挺丑的，当时时间比较紧，所以并没有进行设计，直接就开始动手写了，这部分都是一些很常见的东西，但是有一块就是一个正反面的翻转效果感觉挺赞的，是从别的网站上看到然后学习了一下写出来的。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/1.png\" width=\"400px\">\n\n从技术上看实现方法就是采用了两个`div`层，一个显示的是正面，另一个反面使用`rotateY(-180deg)`来进行一个180度的翻转，显示成反面，然后使用`z-index`来达到一个遮罩效果，然后就是`hover`实现一个点击后的效果将正面设置为`rotateY(180deg)`并将透明度`opacity`设置成0，反面设置为`rotateY(0deg)`透明度`opacity`设置为1，来使转换更加的自然。不过需要注意的是要将`position`设置为绝对定位或一些其他的方式，不然z-index不会生效。关键代码如下：\n\n```html\n<div class=\"developers\">\n  <!-- <img src=\"img/xiaoqi.png\"> -->\n  <div class=\"renpicture\">\n    <div class=\"img img1\"></div>\n    <div class=\"img-font\">\n      <p>后端开发</p>\n    </div>\n  </div>\n  <div class=\"developers-font LwolveJ-font\">LwolveJ</div>\n</div>\n```\n\n```css\n.developers {\n  width: 33.3%;\n  height: 500px;\n  display: inline-block;\n  vertical-align: top;\n  text-align: center;\n  position: relative;\n}\n\n.renpicture {\n  width: 250px;\n  height: 250px;\n  margin: 0 auto;\n  position: relative;\n  -webkit-perspective: 1000;\n}\n\n.img , .img-font {\n  position: absolute;\n  margin: 0 auto;\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  box-shadow: 0 3px 5px #9E9E9E;\n  -webkit-transition: all 0.5s;\n}\n\n.img {\n  z-index: 5;\n  background-size: 250px 250px;\n}\n\n.img1 {\n  background-image: url(\"../img/lijie.jpg\");\n}\n\n.img-font {\n  font-size: 25px;\n  background-color: #1799e5;\n  -webkit-transform: rotateY(-180deg);\n  opacity: 0;\n}\n\n.img-font p {\n  line-height: 250px;\n  color: #FFFFFF;\n}\n\n.renpicture:hover .img{\n  -webkit-transform:rotateY(180deg);\n  z-index: 5;\n  opacity: 0;\n}\n\n.renpicture:hover .img-font {\n  -webkit-transform: rotateY(0deg);\n  z-index: 10;\n  opacity: 1;\n}\n```\n\n### 生成问卷页面\n\n这一个页面所涉及到的代码最多，而且也是该项目的重点，需求主要就是右侧的窗口能生成标题、单选题、多选题、简短回答这几个问卷常见的题型，而且右边所添加的选项能即时在右侧展示，并且能删除选项，然后点击生成问卷会在左侧显示出相应的效果。初次之外还有个比较人性化的细节，即右侧的操作框会随着左侧题目的位置而变动。效果大概就是这么多，那么就是一些技术的实现了。\n\n首先是HTML结构，右侧操作框的HTML结构每种题型都写成一块HTML，然后都使用`display:none`隐藏，然后默认将标题显示为第一个，然后通过js获取下拉框选择的题型来显示相应的格式。然后是CSS部分，这一部分都是一些之前就用过的，所以此处不再整理。本部分将着重整理js部分的代码。\n\n#### 表单切换功能：\n\n```js\n//===================表单切换=======================\nvar inputTypeSelectBtn = g('input-type-select');\n\nvar selectTypes = {\n  \"title\": g(\"title-box\"),\n  \"radio\": g('radio-box'),\n  \"checkbox\": g('checkbox-box'),\n  \"text\": g('text-box')\n}\n\n//获取选择value\nvar getSelectContent = function(select) {\n  var index = select.selectedIndex;\n  return select.options[index].value;\n}\n\n//初始化value值\nvar selectValue = getSelectContent(inputTypeSelectBtn);\n\nvar changeType = function(type) {\n  for(var i in selectTypes){\n    selectTypes[i].style.display = 'none';\n  }\n  selectTypes[type].style.display = \"block\";\n}\n\n//当表单切换时触发\ninputTypeSelectBtn.onchange = function() {\n  selectValue = getSelectContent(inputTypeSelectBtn);\n  changeType(selectValue);\n}\n```\n\n该部分思路是当用户点击题型切换时出发`onchange`然后getSelectContent函数获取改变的值，并返回给selectValue值，然后当作参数传给changeType函数来控制相应表单的显示与隐藏，这里将四种题型的节点都写在了selectTypes对象里面，也同时方便了后面其他功能的实现。\n\n#### 选项的添加与删除功能\n\n首先是绑定事件，分别是鼠标点击事件和键盘回车事件\n\n```js\nvar addOptionsBtns = {\n  'radio': selectTypes['radio'].getElementsByClassName('add-btn')[0],\n  'checkbox': selectTypes['checkbox'].getElementsByClassName('add-btn')[0]\n}\n\nvar addOptionsInputs = {\n  'radio': selectTypes['radio'].getElementsByClassName('add-option')[0],\n  'checkbox': selectTypes['checkbox'].getElementsByClassName('add-option')[0]\n}\n\n//为按钮绑定事件\nfor(var key in addOptionsBtns) {\n  (function(e) {\n    addOptionsBtns[e].onclick = function() {\n      var value = selectTypes[e].getElementsByClassName('add-option')[0].value;\n      if(value === \"\") {\n        return false;  \n      }\n      addOption(selectTypes[e], e, value);\n      selectTypes[e].getElementsByClassName('add-option')[0].value = '';\n    }\n  })(key)\n}\n\nfor (var key in addOptionsInputs) {\n  (function(e) {\n    addOptionsInputs[e].addEventListener('keyup', function() {\n      if (event.keyCode === 13) {\n        addOptionsBtns[e].click();\n      }\n    });\n  })(key)\n}\n```\n\n此处for循环里面的function事件采用了`(function(e){}(key))`来调用，key即function的参数，当js运行到此处的时候将直接调用，里面的两个addOptionsBtns和addOptionsInputs对象分别对应button按钮的点击事件和input输入框的键盘事件，键盘事件实现的逻辑就是调用了点击事件`addOptionsBtns[e].click();`。\n\n然后是添加选项和删除选项功能\n\n```js\n//======================配置选项添加及删除功能===========\n\nvar Option = function(type, value, deleteBtn, selfElement) {\n  this.type = type;\n  this.value = value;\n  this.deleteBtn = deleteBtn;\n  this.deleteBtn.self = this;\n  this.selfElement = selfElement;\n  this.selfElement.self = this;\n}\n\nvar options = [];  //存放所有选项\nvar addOption = function(selectTypes, key, value) {\n  \n\n  var type = key;\n  var optionsWrap = selectTypes.getElementsByClassName('options-wrap')[0];\n  var optionWrap = document.createElement('div');\n  optionWrap.className = 'option-wrap';\n  optionWrap.innerHTML = '<div class=\"delete-mask\">删除</div> <span class=\"option-set\">' + value + '</span>';\n  optionsWrap.appendChild(optionWrap);\n  var deleteBtn = optionWrap.getElementsByClassName('delete-mask')[0];\n  var selfElement = optionWrap;\n  var option = new Option(type, value, deleteBtn, selfElement);\n  options.push(option);\n  \n  deleteBtn.addEventListener('click', function() {\n    deleteOption(deleteBtn);\n  });\n}\n\nvar deleteOption = function(btn) {\n  for(var i = 0; i < options.length; i++) {\n    if(options[i] === btn.self) {\n      options.splice(i ,1);\n      break;\n    }\n  }\n  btn.self.selfElement.parentNode.removeChild(btn.self.selfElement);\n  delete btn.self;\n}\n```\n\n这一部分先是定义了一个`Option()`函数，并在`addOption()`中new了一个`option`对象出来，然后使用`push`方法依次存入开始定义的`options`数组里面，此处的new是一个我目前还不完全理解的用法，以及js原型链，这一个项目整理完之后将整理一片关于new和js原型链的文章。\n\n\n#### 右侧框移动功能\n\n```js\nvar formSetBox = g('content-right');\nvar formBox = g('content-body');\nvar moveSetBox = function() {\n  var questionElements = formBox.getElementsByClassName('question-wrap');\n  var topPosition = formBox.offsetHeight - questionElements[questionElements.length - 1].offsetHeight;\n  startMove(formSetBox, topPosition, 10);\n}\n\nvar timer = null;\nvar positionTop = 0;\nstartMove = function(element, target, interval) {\n\n  clearInterval(timer);\n  timer = setInterval(function() {\n    var speed = (target - element.offsetTop) / 10;\n    speed = speed > 0 ? Math.ceil(speed) : 0;\n    if (element.offsetTop >= target) {\n\n      clearInterval(timer);\n    } else {\n      positionTop = positionTop + speed;\n      element.style.top = positionTop + 'px';\n    }\n  }, interval)\n}\n```\n\n`moveSetBox()`函数用来计算目标位置即target，`startMove()`函数是核心功能，target-element.offsetTop是计算目标位置和右侧框到顶部的距离只差。然后，此处需要一些数学的计算，计算出speed速度，interval参数是毫秒单位，即每10毫秒的speed，在该函数中即每10毫秒移动speed值的px，可知随着越接近位置，speed越来越小，但是由于`ceil()`函数的存在，speed不会小于0。\n\n> HTMLElement.offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。\n\n> HTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。\n\n\n### 问卷填写页面\n\n这部分页面内容较为简单，有一处值得整理的就是页面间传参的一个功能，页面间传参就是说在问卷选择页面选择一个问卷之后会有使用`window.location.href`来指定url，然后根据参数的不同来获得问卷内容，并渲染出相应的页面。这里是通过地址传值，并使用函数解析地址，获取到参数，然后GET请求获取到问卷内容。\n\n```js\n//页面间参数传递函数获取函数\nvar parseURL = function(url) {\n  var url = url.split(\"?\")[1];\n  var res = url.split(\"=\")[1];\n  console.log(res);\n  return res;\n}\n```\n\n上面代码即获取参数的代码，res即参数。\n\n### 问卷结果展示页面\n\n该部分通过ajax获取相应选择人数数据，然后乘上一定比值，来使图标更加清晰，然后使用js渲染出来即可，建议可以先在html和对应css写上假内容，然后再来写js，之后将html部分注释掉即可。\n\n\n## 后记\n\n这次项目算得上真正意义的第一个和后端合作开发的项目，之前的微信小程序更多依靠着封装的API勉强完成，很多地方的原理都不太懂。这次通过完全的原生HTML+CSS+JS开发的项目，虽然代码较多，使用很多框架之类的可以有效的简化代码，但是基础还是很重要的，所以这次项目很有必要。\n","slug":"6. 实现一个问卷平台","published":1,"updated":"2021-09-30T06:45:29.773Z","_id":"cku41le92001jidp2ftma5b5w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说来惭愧，好久没有更新博客了，大概过了两个多月吧，这两个多月当然并没有出去浪啊，还是在好好的学习代码的。前一段时间和后端合作了两个项目，一个是问卷平台的项目，就是这次将要总结的内容，还有一个是一个个人的博客。这两个项目也算是和后端的两次比较详细的合作，相比上次的微信小程序有了更大的提高。两个项目坐下来感觉技术提高了不少，但是由于赶进度的原因也欠下了很多技术债，寒假时候要好好的补一补了。不过正所谓业务驱动需求，需求驱动技术嘛。</p>\n<p>两个项目下来，发现都用原生的代码写真的累，前一段时间每天基本都是代码，没怎么闲过，有很多重复的劳动，原生代码也写了不少，感觉可以进行学习一些框架了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"页面展示\"><a href=\"#页面展示\" class=\"headerlink\" title=\"页面展示\"></a>页面展示</h2><p>界面做的还是很low的，不过也还勉强能看</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/display.png\">\n\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><p>这一部分将整理一下在写页面的时候学到的一些新的技术。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>首页部分其实做的挺丑的，当时时间比较紧，所以并没有进行设计，直接就开始动手写了，这部分都是一些很常见的东西，但是有一块就是一个正反面的翻转效果感觉挺赞的，是从别的网站上看到然后学习了一下写出来的。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/1.png\" width=\"400px\">\n\n<p>从技术上看实现方法就是采用了两个<code>div</code>层，一个显示的是正面，另一个反面使用<code>rotateY(-180deg)</code>来进行一个180度的翻转，显示成反面，然后使用<code>z-index</code>来达到一个遮罩效果，然后就是<code>hover</code>实现一个点击后的效果将正面设置为<code>rotateY(180deg)</code>并将透明度<code>opacity</code>设置成0，反面设置为<code>rotateY(0deg)</code>透明度<code>opacity</code>设置为1，来使转换更加的自然。不过需要注意的是要将<code>position</code>设置为绝对定位或一些其他的方式，不然z-index不会生效。关键代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;developers&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;img src=&quot;img/xiaoqi.png&quot;&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;renpicture&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img img1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img-font&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>后端开发<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;developers-font LwolveJ-font&quot;</span>&gt;</span>LwolveJ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.developers</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.3%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">perspective</span>: <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> , <span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">#9E9E9E</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">250px</span> <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../img/lijie.jpg&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#1799e5</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(-<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img-font</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.img</span>&#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotateY</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成问卷页面\"><a href=\"#生成问卷页面\" class=\"headerlink\" title=\"生成问卷页面\"></a>生成问卷页面</h3><p>这一个页面所涉及到的代码最多，而且也是该项目的重点，需求主要就是右侧的窗口能生成标题、单选题、多选题、简短回答这几个问卷常见的题型，而且右边所添加的选项能即时在右侧展示，并且能删除选项，然后点击生成问卷会在左侧显示出相应的效果。初次之外还有个比较人性化的细节，即右侧的操作框会随着左侧题目的位置而变动。效果大概就是这么多，那么就是一些技术的实现了。</p>\n<p>首先是HTML结构，右侧操作框的HTML结构每种题型都写成一块HTML，然后都使用<code>display:none</code>隐藏，然后默认将标题显示为第一个，然后通过js获取下拉框选择的题型来显示相应的格式。然后是CSS部分，这一部分都是一些之前就用过的，所以此处不再整理。本部分将着重整理js部分的代码。</p>\n<h4 id=\"表单切换功能：\"><a href=\"#表单切换功能：\" class=\"headerlink\" title=\"表单切换功能：\"></a>表单切换功能：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//===================表单切换=======================</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inputTypeSelectBtn = g(<span class=\"string\">&#x27;input-type-select&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectTypes = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;title&quot;</span>: g(<span class=\"string\">&quot;title-box&quot;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;radio&quot;</span>: g(<span class=\"string\">&#x27;radio-box&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;checkbox&quot;</span>: g(<span class=\"string\">&#x27;checkbox-box&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;text&quot;</span>: g(<span class=\"string\">&#x27;text-box&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取选择value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSelectContent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">select</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = select.selectedIndex;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> select.options[index].value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化value值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectValue = getSelectContent(inputTypeSelectBtn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> changeType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> selectTypes)&#123;</span><br><span class=\"line\">    selectTypes[i].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  selectTypes[type].style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当表单切换时触发</span></span><br><span class=\"line\">inputTypeSelectBtn.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  selectValue = getSelectContent(inputTypeSelectBtn);</span><br><span class=\"line\">  changeType(selectValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该部分思路是当用户点击题型切换时出发<code>onchange</code>然后getSelectContent函数获取改变的值，并返回给selectValue值，然后当作参数传给changeType函数来控制相应表单的显示与隐藏，这里将四种题型的节点都写在了selectTypes对象里面，也同时方便了后面其他功能的实现。</p>\n<h4 id=\"选项的添加与删除功能\"><a href=\"#选项的添加与删除功能\" class=\"headerlink\" title=\"选项的添加与删除功能\"></a>选项的添加与删除功能</h4><p>首先是绑定事件，分别是鼠标点击事件和键盘回车事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addOptionsBtns = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;radio&#x27;</span>: selectTypes[<span class=\"string\">&#x27;radio&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-btn&#x27;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  <span class=\"string\">&#x27;checkbox&#x27;</span>: selectTypes[<span class=\"string\">&#x27;checkbox&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-btn&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addOptionsInputs = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;radio&#x27;</span>: selectTypes[<span class=\"string\">&#x27;radio&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  <span class=\"string\">&#x27;checkbox&#x27;</span>: selectTypes[<span class=\"string\">&#x27;checkbox&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为按钮绑定事件</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> addOptionsBtns) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    addOptionsBtns[e].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = selectTypes[e].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>].value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(value === <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      addOption(selectTypes[e], e, value);</span><br><span class=\"line\">      selectTypes[e].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>].value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> addOptionsInputs) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    addOptionsInputs[e].addEventListener(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (event.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">        addOptionsBtns[e].click();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此处for循环里面的function事件采用了<code>(function(e)&#123;&#125;(key))</code>来调用，key即function的参数，当js运行到此处的时候将直接调用，里面的两个addOptionsBtns和addOptionsInputs对象分别对应button按钮的点击事件和input输入框的键盘事件，键盘事件实现的逻辑就是调用了点击事件<code>addOptionsBtns[e].click();</code>。</p>\n<p>然后是添加选项和删除选项功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//======================配置选项添加及删除功能===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Option = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, value, deleteBtn, selfElement</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.deleteBtn = deleteBtn;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.deleteBtn.self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selfElement = selfElement;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selfElement.self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = [];  <span class=\"comment\">//存放所有选项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addOption = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selectTypes, key, value</span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = key;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> optionsWrap = selectTypes.getElementsByClassName(<span class=\"string\">&#x27;options-wrap&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> optionWrap = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">  optionWrap.className = <span class=\"string\">&#x27;option-wrap&#x27;</span>;</span><br><span class=\"line\">  optionWrap.innerHTML = <span class=\"string\">&#x27;&lt;div class=&quot;delete-mask&quot;&gt;删除&lt;/div&gt; &lt;span class=&quot;option-set&quot;&gt;&#x27;</span> + value + <span class=\"string\">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class=\"line\">  optionsWrap.appendChild(optionWrap);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> deleteBtn = optionWrap.getElementsByClassName(<span class=\"string\">&#x27;delete-mask&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> selfElement = optionWrap;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Option(type, value, deleteBtn, selfElement);</span><br><span class=\"line\">  options.push(option);</span><br><span class=\"line\">  </span><br><span class=\"line\">  deleteBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    deleteOption(deleteBtn);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteOption = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; options.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(options[i] === btn.self) &#123;</span><br><span class=\"line\">      options.splice(i ,<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  btn.self.selfElement.parentNode.removeChild(btn.self.selfElement);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> btn.self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分先是定义了一个<code>Option()</code>函数，并在<code>addOption()</code>中new了一个<code>option</code>对象出来，然后使用<code>push</code>方法依次存入开始定义的<code>options</code>数组里面，此处的new是一个我目前还不完全理解的用法，以及js原型链，这一个项目整理完之后将整理一片关于new和js原型链的文章。</p>\n<h4 id=\"右侧框移动功能\"><a href=\"#右侧框移动功能\" class=\"headerlink\" title=\"右侧框移动功能\"></a>右侧框移动功能</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formSetBox = g(<span class=\"string\">&#x27;content-right&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> formBox = g(<span class=\"string\">&#x27;content-body&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveSetBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> questionElements = formBox.getElementsByClassName(<span class=\"string\">&#x27;question-wrap&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> topPosition = formBox.offsetHeight - questionElements[questionElements.length - <span class=\"number\">1</span>].offsetHeight;</span><br><span class=\"line\">  startMove(formSetBox, topPosition, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> positionTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">startMove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, target, interval</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed = (target - element.offsetTop) / <span class=\"number\">10</span>;</span><br><span class=\"line\">    speed = speed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(speed) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.offsetTop &gt;= target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      positionTop = positionTop + speed;</span><br><span class=\"line\">      element.style.top = positionTop + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, interval)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>moveSetBox()</code>函数用来计算目标位置即target，<code>startMove()</code>函数是核心功能，target-element.offsetTop是计算目标位置和右侧框到顶部的距离只差。然后，此处需要一些数学的计算，计算出speed速度，interval参数是毫秒单位，即每10毫秒的speed，在该函数中即每10毫秒移动speed值的px，可知随着越接近位置，speed越来越小，但是由于<code>ceil()</code>函数的存在，speed不会小于0。</p>\n<blockquote>\n<p>HTMLElement.offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p>\n</blockquote>\n<blockquote>\n<p>HTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。</p>\n</blockquote>\n<h3 id=\"问卷填写页面\"><a href=\"#问卷填写页面\" class=\"headerlink\" title=\"问卷填写页面\"></a>问卷填写页面</h3><p>这部分页面内容较为简单，有一处值得整理的就是页面间传参的一个功能，页面间传参就是说在问卷选择页面选择一个问卷之后会有使用<code>window.location.href</code>来指定url，然后根据参数的不同来获得问卷内容，并渲染出相应的页面。这里是通过地址传值，并使用函数解析地址，获取到参数，然后GET请求获取到问卷内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面间参数传递函数获取函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parseURL = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = url.split(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = url.split(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码即获取参数的代码，res即参数。</p>\n<h3 id=\"问卷结果展示页面\"><a href=\"#问卷结果展示页面\" class=\"headerlink\" title=\"问卷结果展示页面\"></a>问卷结果展示页面</h3><p>该部分通过ajax获取相应选择人数数据，然后乘上一定比值，来使图标更加清晰，然后使用js渲染出来即可，建议可以先在html和对应css写上假内容，然后再来写js，之后将html部分注释掉即可。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这次项目算得上真正意义的第一个和后端合作开发的项目，之前的微信小程序更多依靠着封装的API勉强完成，很多地方的原理都不太懂。这次通过完全的原生HTML+CSS+JS开发的项目，虽然代码较多，使用很多框架之类的可以有效的简化代码，但是基础还是很重要的，所以这次项目很有必要。</p>\n","site":{"data":{}},"excerpt":"<p>说来惭愧，好久没有更新博客了，大概过了两个多月吧，这两个多月当然并没有出去浪啊，还是在好好的学习代码的。前一段时间和后端合作了两个项目，一个是问卷平台的项目，就是这次将要总结的内容，还有一个是一个个人的博客。这两个项目也算是和后端的两次比较详细的合作，相比上次的微信小程序有了更大的提高。两个项目坐下来感觉技术提高了不少，但是由于赶进度的原因也欠下了很多技术债，寒假时候要好好的补一补了。不过正所谓业务驱动需求，需求驱动技术嘛。</p>\n<p>两个项目下来，发现都用原生的代码写真的累，前一段时间每天基本都是代码，没怎么闲过，有很多重复的劳动，原生代码也写了不少，感觉可以进行学习一些框架了。</p>","more":"<h2 id=\"页面展示\"><a href=\"#页面展示\" class=\"headerlink\" title=\"页面展示\"></a>页面展示</h2><p>界面做的还是很low的，不过也还勉强能看</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/display.png\">\n\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><p>这一部分将整理一下在写页面的时候学到的一些新的技术。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>首页部分其实做的挺丑的，当时时间比较紧，所以并没有进行设计，直接就开始动手写了，这部分都是一些很常见的东西，但是有一块就是一个正反面的翻转效果感觉挺赞的，是从别的网站上看到然后学习了一下写出来的。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-11/1.png\" width=\"400px\">\n\n<p>从技术上看实现方法就是采用了两个<code>div</code>层，一个显示的是正面，另一个反面使用<code>rotateY(-180deg)</code>来进行一个180度的翻转，显示成反面，然后使用<code>z-index</code>来达到一个遮罩效果，然后就是<code>hover</code>实现一个点击后的效果将正面设置为<code>rotateY(180deg)</code>并将透明度<code>opacity</code>设置成0，反面设置为<code>rotateY(0deg)</code>透明度<code>opacity</code>设置为1，来使转换更加的自然。不过需要注意的是要将<code>position</code>设置为绝对定位或一些其他的方式，不然z-index不会生效。关键代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;developers&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;img src=&quot;img/xiaoqi.png&quot;&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;renpicture&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img img1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img-font&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>后端开发<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;developers-font LwolveJ-font&quot;</span>&gt;</span>LwolveJ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.developers</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.3%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">perspective</span>: <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> , <span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">#9E9E9E</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">250px</span> <span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;../img/lijie.jpg&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#1799e5</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(-<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.img-font</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.img</span>&#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotateY</span>(<span class=\"number\">180deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.renpicture</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.img-font</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateY</span>(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成问卷页面\"><a href=\"#生成问卷页面\" class=\"headerlink\" title=\"生成问卷页面\"></a>生成问卷页面</h3><p>这一个页面所涉及到的代码最多，而且也是该项目的重点，需求主要就是右侧的窗口能生成标题、单选题、多选题、简短回答这几个问卷常见的题型，而且右边所添加的选项能即时在右侧展示，并且能删除选项，然后点击生成问卷会在左侧显示出相应的效果。初次之外还有个比较人性化的细节，即右侧的操作框会随着左侧题目的位置而变动。效果大概就是这么多，那么就是一些技术的实现了。</p>\n<p>首先是HTML结构，右侧操作框的HTML结构每种题型都写成一块HTML，然后都使用<code>display:none</code>隐藏，然后默认将标题显示为第一个，然后通过js获取下拉框选择的题型来显示相应的格式。然后是CSS部分，这一部分都是一些之前就用过的，所以此处不再整理。本部分将着重整理js部分的代码。</p>\n<h4 id=\"表单切换功能：\"><a href=\"#表单切换功能：\" class=\"headerlink\" title=\"表单切换功能：\"></a>表单切换功能：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//===================表单切换=======================</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inputTypeSelectBtn = g(<span class=\"string\">&#x27;input-type-select&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectTypes = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;title&quot;</span>: g(<span class=\"string\">&quot;title-box&quot;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;radio&quot;</span>: g(<span class=\"string\">&#x27;radio-box&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;checkbox&quot;</span>: g(<span class=\"string\">&#x27;checkbox-box&#x27;</span>),</span><br><span class=\"line\">  <span class=\"string\">&quot;text&quot;</span>: g(<span class=\"string\">&#x27;text-box&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取选择value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSelectContent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">select</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = select.selectedIndex;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> select.options[index].value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化value值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> selectValue = getSelectContent(inputTypeSelectBtn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> changeType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> selectTypes)&#123;</span><br><span class=\"line\">    selectTypes[i].style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  selectTypes[type].style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当表单切换时触发</span></span><br><span class=\"line\">inputTypeSelectBtn.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  selectValue = getSelectContent(inputTypeSelectBtn);</span><br><span class=\"line\">  changeType(selectValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该部分思路是当用户点击题型切换时出发<code>onchange</code>然后getSelectContent函数获取改变的值，并返回给selectValue值，然后当作参数传给changeType函数来控制相应表单的显示与隐藏，这里将四种题型的节点都写在了selectTypes对象里面，也同时方便了后面其他功能的实现。</p>\n<h4 id=\"选项的添加与删除功能\"><a href=\"#选项的添加与删除功能\" class=\"headerlink\" title=\"选项的添加与删除功能\"></a>选项的添加与删除功能</h4><p>首先是绑定事件，分别是鼠标点击事件和键盘回车事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addOptionsBtns = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;radio&#x27;</span>: selectTypes[<span class=\"string\">&#x27;radio&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-btn&#x27;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  <span class=\"string\">&#x27;checkbox&#x27;</span>: selectTypes[<span class=\"string\">&#x27;checkbox&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-btn&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addOptionsInputs = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;radio&#x27;</span>: selectTypes[<span class=\"string\">&#x27;radio&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">  <span class=\"string\">&#x27;checkbox&#x27;</span>: selectTypes[<span class=\"string\">&#x27;checkbox&#x27;</span>].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为按钮绑定事件</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> addOptionsBtns) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    addOptionsBtns[e].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = selectTypes[e].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>].value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(value === <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      addOption(selectTypes[e], e, value);</span><br><span class=\"line\">      selectTypes[e].getElementsByClassName(<span class=\"string\">&#x27;add-option&#x27;</span>)[<span class=\"number\">0</span>].value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> addOptionsInputs) &#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    addOptionsInputs[e].addEventListener(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (event.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">        addOptionsBtns[e].click();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此处for循环里面的function事件采用了<code>(function(e)&#123;&#125;(key))</code>来调用，key即function的参数，当js运行到此处的时候将直接调用，里面的两个addOptionsBtns和addOptionsInputs对象分别对应button按钮的点击事件和input输入框的键盘事件，键盘事件实现的逻辑就是调用了点击事件<code>addOptionsBtns[e].click();</code>。</p>\n<p>然后是添加选项和删除选项功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//======================配置选项添加及删除功能===========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Option = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, value, deleteBtn, selfElement</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.deleteBtn = deleteBtn;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.deleteBtn.self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selfElement = selfElement;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.selfElement.self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = [];  <span class=\"comment\">//存放所有选项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addOption = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selectTypes, key, value</span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = key;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> optionsWrap = selectTypes.getElementsByClassName(<span class=\"string\">&#x27;options-wrap&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> optionWrap = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">  optionWrap.className = <span class=\"string\">&#x27;option-wrap&#x27;</span>;</span><br><span class=\"line\">  optionWrap.innerHTML = <span class=\"string\">&#x27;&lt;div class=&quot;delete-mask&quot;&gt;删除&lt;/div&gt; &lt;span class=&quot;option-set&quot;&gt;&#x27;</span> + value + <span class=\"string\">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class=\"line\">  optionsWrap.appendChild(optionWrap);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> deleteBtn = optionWrap.getElementsByClassName(<span class=\"string\">&#x27;delete-mask&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> selfElement = optionWrap;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> option = <span class=\"keyword\">new</span> Option(type, value, deleteBtn, selfElement);</span><br><span class=\"line\">  options.push(option);</span><br><span class=\"line\">  </span><br><span class=\"line\">  deleteBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    deleteOption(deleteBtn);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> deleteOption = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; options.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(options[i] === btn.self) &#123;</span><br><span class=\"line\">      options.splice(i ,<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  btn.self.selfElement.parentNode.removeChild(btn.self.selfElement);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> btn.self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一部分先是定义了一个<code>Option()</code>函数，并在<code>addOption()</code>中new了一个<code>option</code>对象出来，然后使用<code>push</code>方法依次存入开始定义的<code>options</code>数组里面，此处的new是一个我目前还不完全理解的用法，以及js原型链，这一个项目整理完之后将整理一片关于new和js原型链的文章。</p>\n<h4 id=\"右侧框移动功能\"><a href=\"#右侧框移动功能\" class=\"headerlink\" title=\"右侧框移动功能\"></a>右侧框移动功能</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formSetBox = g(<span class=\"string\">&#x27;content-right&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> formBox = g(<span class=\"string\">&#x27;content-body&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> moveSetBox = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> questionElements = formBox.getElementsByClassName(<span class=\"string\">&#x27;question-wrap&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> topPosition = formBox.offsetHeight - questionElements[questionElements.length - <span class=\"number\">1</span>].offsetHeight;</span><br><span class=\"line\">  startMove(formSetBox, topPosition, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> positionTop = <span class=\"number\">0</span>;</span><br><span class=\"line\">startMove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, target, interval</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed = (target - element.offsetTop) / <span class=\"number\">10</span>;</span><br><span class=\"line\">    speed = speed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(speed) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.offsetTop &gt;= target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      positionTop = positionTop + speed;</span><br><span class=\"line\">      element.style.top = positionTop + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, interval)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>moveSetBox()</code>函数用来计算目标位置即target，<code>startMove()</code>函数是核心功能，target-element.offsetTop是计算目标位置和右侧框到顶部的距离只差。然后，此处需要一些数学的计算，计算出speed速度，interval参数是毫秒单位，即每10毫秒的speed，在该函数中即每10毫秒移动speed值的px，可知随着越接近位置，speed越来越小，但是由于<code>ceil()</code>函数的存在，speed不会小于0。</p>\n<blockquote>\n<p>HTMLElement.offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。</p>\n</blockquote>\n<blockquote>\n<p>HTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。</p>\n</blockquote>\n<h3 id=\"问卷填写页面\"><a href=\"#问卷填写页面\" class=\"headerlink\" title=\"问卷填写页面\"></a>问卷填写页面</h3><p>这部分页面内容较为简单，有一处值得整理的就是页面间传参的一个功能，页面间传参就是说在问卷选择页面选择一个问卷之后会有使用<code>window.location.href</code>来指定url，然后根据参数的不同来获得问卷内容，并渲染出相应的页面。这里是通过地址传值，并使用函数解析地址，获取到参数，然后GET请求获取到问卷内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面间参数传递函数获取函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parseURL = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = url.split(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = url.split(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码即获取参数的代码，res即参数。</p>\n<h3 id=\"问卷结果展示页面\"><a href=\"#问卷结果展示页面\" class=\"headerlink\" title=\"问卷结果展示页面\"></a>问卷结果展示页面</h3><p>该部分通过ajax获取相应选择人数数据，然后乘上一定比值，来使图标更加清晰，然后使用js渲染出来即可，建议可以先在html和对应css写上假内容，然后再来写js，之后将html部分注释掉即可。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这次项目算得上真正意义的第一个和后端合作开发的项目，之前的微信小程序更多依靠着封装的API勉强完成，很多地方的原理都不太懂。这次通过完全的原生HTML+CSS+JS开发的项目，虽然代码较多，使用很多框架之类的可以有效的简化代码，但是基础还是很重要的，所以这次项目很有必要。</p>"},{"title":"JS对象整理","date":"2018-01-21T03:08:25.000Z","toc":true,"_content":"\n之前正在整理问卷平台项目，其中整理到了new这一用法，但发现自己其实对JS对象这一部分并不太熟悉，以及原型链究竟是如何不太清楚，所以便有了这一篇博客的整理，整理内容来自JavaScript权威指南。\n\n<!--more-->\n\n## 对象简介\n\nJavaScript语言是动态的————可以新增属性也可以删除属性————但他们常用来模拟静态对象以及静态类型语言中的\"结构体\"。有时它们也用做字符串的集合。\n\n### 对象创建三种方法\n\n对象的创建可以通过三种方法，分别是对象直接量创建，通过new创建，通过Object.create()方法创建。\n\n#### 1.对象直接量\n\n```js\nvar book = {\n  \"title\": \"javascript\",\n  \"author\": \"张三\"\n}\n```\n\n如上，便是直接创建对象的方法。\n\n#### 2.通过new创建对象\n\n```js\nvar o = new Object();    //创建一个空对象\nvar a = new Array();    //创建一个空数组\nvar d = new Date();      //创建一个表示当前事件的Date对象\nvar r = new RegExp(\"js\");  //创建一个可以进行模式匹配的对象\n```\n\n上面三种都是通过内置构造函数，还有自定义构造函数，比如\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-1.png\">\n\n直接使用function构造函数，然后下面通过new来定义变量，下面两个分别为带不带参数以及带两个参数的构造\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-2.png\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-3.png\">\n\n另外，值得一提的是`__proto__`属性，该属性是用于查询/设置对象的原型，但是似乎并不支持IE和Opera（此处并未测试），所以不建议使用，点开后会发现有一个`constructor`属性，指代其构造函数，如下图所示，但是此处并未理解透彻，需待以后深入理解。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-4.png\">\n\n#### 3.Object.create()方法创建\n\n第一个参数是这个对象的原型，第二个可选参数是对对象属性的进一步描述，例如\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/object-create-1.png\">\n\n`__proto__`是其继承的原型，可以看到第一层`__proto__`继承的是{x:1,y:2}，然后第二层`__proto__`继承的是Object原型。\n\n### 不可变原始值和可变的对象引用\n\n原始值（undefined、null、布尔值、数字、字符串），对象（包括数组和函数），原始值是不可更改的，而对象则不同\n\n#### 不可变原始值\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/originalValue.jpg\">\n\n可以看到原始值不可更改\n\n#### 可变的对象引用\n\n然而对象引用却可变\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-1.jpg\">\n\n可以看到当另`b=a.p`的时候相当于将b指向了a.p，那么这个时候两个变量指向的就是同一个值，这时候为b.x赋值，那么a.p.x同样会被改变，这就是对象引用的可变。那么如果我们不想这样该怎么办呢，可以逐一赋值，比如说\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-2.jpg\">\n\n直接对c的属性x进行赋值，这时候就不会将c指向a.p，这时候改变c.x就不会改变a.p.x\n\n### 对象属性特性\n\n* 可写，表明是否可以设置该属性的值\n* 可枚举，表明是否可以通过for/in循环返回该属性\n* 可配置，表明是否可以通过删除或修改属性\n\n## 对象检测属性\n\n检测对象里面包含的属性，可使用`in`、`hasOwnProperty`、`propertyIsEnumerable`方法来完成该工作。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test.png\">\n\n##### in\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-in.png\">\n\n##### hasOwnPreperty\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-hasOwnProperty.png\">\n\n##### propertyIsEnumerable\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-propertyIsEnumerable.png\">\n\n#### 三者之间区别\n\n`in`自有属性和继承属性都能返回true，`hasOwnPreperty`自有属性返回ture，继承属性返回false，`propertyIsEnumerable`自有属性为可枚举时才返回true，是hasOwnpreperty的增强版\n\n## getter和setter\n\n由getter和setter属性定义的属性称作“存储器属性”，不同于“数据属性”，当调用getter方法时，返回值就是属性表达式的值，当程序设置一个存取器属性的值时，将调用setter方法，将右侧的值当作参数传入setter。如果属性同时具有getter和setter方法，那么他是一个读/写属性，如果只有getter则是只读。只有setter则是只写，读取数据将返回undefined。\n\n### getter和setter的枚举\n\n这里假如说定义一个`get r()`或定义一个`set r()`，那么这个r也是可枚举的，也就是说可以通过for/in循环来遍历到。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-1.jpg\">\n\n那么修改一下可枚举性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-2.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-3.jpg\">\n\n可以看到通过for/in循环并没有循环到属性r，也就是说可以通过设置属性的可枚举性来控制是否由for/in循环到。\n\n#### 继承下的for/in循环\n\n同时，可以通过继承来达到for/in循环的遍历效果\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-4.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-5.jpg\">\n\n可以看到for/in循环循环到了xyr，倘若这时候设置其原型a的某个属性的可枚举型为false，那么也会受到影响。\n\n### 实例 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-1.png\">\n\n如上图是一个定义getter和setter的实例，注意，theta只有getter方法，没有setter方法，所以是只读的，下面进行测试\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-2.png\">\n\n可以看出上图，都获取到了相应的值\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-3.png\">\n\n对比看出，对r的修改成功了，而对theta的修改并没有成功。\n\n### 通过getOwnPropertyDescriptor()方法获得属性描述\n\n* value: 值\n* writable: 可写性\n* enumerable: 可枚举性\n* configurable: 可配置性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getOwnPropertyDscriptor-1.png\">\n\n### 通过definePeoperty()方法修改属性描述\n\n可通过该方法修改或直接添加数据属性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-1.png\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-2.png\">\n\n上面即通过definePeoperty添加的一个x数据以及修改的属性\n\n## 总结\n\n本来这次想把原型链也顺带整理一下，结果发现这也是一块比较复杂的东西，所以决定详细学习一下类的使用继承方法等内容之后再来详细整理一下类和模块以及原型链的内容。\n","source":"_posts/7. JS对象整理.md","raw":"---\ntitle: JS对象整理\ndate: 2018-1-21 11:08:25\ntoc: true\ncategories:\n- 前端\ntags: \n- JS\n---\n\n之前正在整理问卷平台项目，其中整理到了new这一用法，但发现自己其实对JS对象这一部分并不太熟悉，以及原型链究竟是如何不太清楚，所以便有了这一篇博客的整理，整理内容来自JavaScript权威指南。\n\n<!--more-->\n\n## 对象简介\n\nJavaScript语言是动态的————可以新增属性也可以删除属性————但他们常用来模拟静态对象以及静态类型语言中的\"结构体\"。有时它们也用做字符串的集合。\n\n### 对象创建三种方法\n\n对象的创建可以通过三种方法，分别是对象直接量创建，通过new创建，通过Object.create()方法创建。\n\n#### 1.对象直接量\n\n```js\nvar book = {\n  \"title\": \"javascript\",\n  \"author\": \"张三\"\n}\n```\n\n如上，便是直接创建对象的方法。\n\n#### 2.通过new创建对象\n\n```js\nvar o = new Object();    //创建一个空对象\nvar a = new Array();    //创建一个空数组\nvar d = new Date();      //创建一个表示当前事件的Date对象\nvar r = new RegExp(\"js\");  //创建一个可以进行模式匹配的对象\n```\n\n上面三种都是通过内置构造函数，还有自定义构造函数，比如\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-1.png\">\n\n直接使用function构造函数，然后下面通过new来定义变量，下面两个分别为带不带参数以及带两个参数的构造\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-2.png\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-3.png\">\n\n另外，值得一提的是`__proto__`属性，该属性是用于查询/设置对象的原型，但是似乎并不支持IE和Opera（此处并未测试），所以不建议使用，点开后会发现有一个`constructor`属性，指代其构造函数，如下图所示，但是此处并未理解透彻，需待以后深入理解。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-4.png\">\n\n#### 3.Object.create()方法创建\n\n第一个参数是这个对象的原型，第二个可选参数是对对象属性的进一步描述，例如\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/object-create-1.png\">\n\n`__proto__`是其继承的原型，可以看到第一层`__proto__`继承的是{x:1,y:2}，然后第二层`__proto__`继承的是Object原型。\n\n### 不可变原始值和可变的对象引用\n\n原始值（undefined、null、布尔值、数字、字符串），对象（包括数组和函数），原始值是不可更改的，而对象则不同\n\n#### 不可变原始值\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/originalValue.jpg\">\n\n可以看到原始值不可更改\n\n#### 可变的对象引用\n\n然而对象引用却可变\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-1.jpg\">\n\n可以看到当另`b=a.p`的时候相当于将b指向了a.p，那么这个时候两个变量指向的就是同一个值，这时候为b.x赋值，那么a.p.x同样会被改变，这就是对象引用的可变。那么如果我们不想这样该怎么办呢，可以逐一赋值，比如说\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-2.jpg\">\n\n直接对c的属性x进行赋值，这时候就不会将c指向a.p，这时候改变c.x就不会改变a.p.x\n\n### 对象属性特性\n\n* 可写，表明是否可以设置该属性的值\n* 可枚举，表明是否可以通过for/in循环返回该属性\n* 可配置，表明是否可以通过删除或修改属性\n\n## 对象检测属性\n\n检测对象里面包含的属性，可使用`in`、`hasOwnProperty`、`propertyIsEnumerable`方法来完成该工作。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test.png\">\n\n##### in\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-in.png\">\n\n##### hasOwnPreperty\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-hasOwnProperty.png\">\n\n##### propertyIsEnumerable\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-propertyIsEnumerable.png\">\n\n#### 三者之间区别\n\n`in`自有属性和继承属性都能返回true，`hasOwnPreperty`自有属性返回ture，继承属性返回false，`propertyIsEnumerable`自有属性为可枚举时才返回true，是hasOwnpreperty的增强版\n\n## getter和setter\n\n由getter和setter属性定义的属性称作“存储器属性”，不同于“数据属性”，当调用getter方法时，返回值就是属性表达式的值，当程序设置一个存取器属性的值时，将调用setter方法，将右侧的值当作参数传入setter。如果属性同时具有getter和setter方法，那么他是一个读/写属性，如果只有getter则是只读。只有setter则是只写，读取数据将返回undefined。\n\n### getter和setter的枚举\n\n这里假如说定义一个`get r()`或定义一个`set r()`，那么这个r也是可枚举的，也就是说可以通过for/in循环来遍历到。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-1.jpg\">\n\n那么修改一下可枚举性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-2.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-3.jpg\">\n\n可以看到通过for/in循环并没有循环到属性r，也就是说可以通过设置属性的可枚举性来控制是否由for/in循环到。\n\n#### 继承下的for/in循环\n\n同时，可以通过继承来达到for/in循环的遍历效果\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-4.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-5.jpg\">\n\n可以看到for/in循环循环到了xyr，倘若这时候设置其原型a的某个属性的可枚举型为false，那么也会受到影响。\n\n### 实例 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-1.png\">\n\n如上图是一个定义getter和setter的实例，注意，theta只有getter方法，没有setter方法，所以是只读的，下面进行测试\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-2.png\">\n\n可以看出上图，都获取到了相应的值\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-3.png\">\n\n对比看出，对r的修改成功了，而对theta的修改并没有成功。\n\n### 通过getOwnPropertyDescriptor()方法获得属性描述\n\n* value: 值\n* writable: 可写性\n* enumerable: 可枚举性\n* configurable: 可配置性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getOwnPropertyDscriptor-1.png\">\n\n### 通过definePeoperty()方法修改属性描述\n\n可通过该方法修改或直接添加数据属性\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-1.png\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-2.png\">\n\n上面即通过definePeoperty添加的一个x数据以及修改的属性\n\n## 总结\n\n本来这次想把原型链也顺带整理一下，结果发现这也是一块比较复杂的东西，所以决定详细学习一下类的使用继承方法等内容之后再来详细整理一下类和模块以及原型链的内容。\n","slug":"7. JS对象整理","published":1,"updated":"2021-09-30T06:45:36.073Z","_id":"cku41le95001midp2blk54pn3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前正在整理问卷平台项目，其中整理到了new这一用法，但发现自己其实对JS对象这一部分并不太熟悉，以及原型链究竟是如何不太清楚，所以便有了这一篇博客的整理，整理内容来自JavaScript权威指南。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"对象简介\"><a href=\"#对象简介\" class=\"headerlink\" title=\"对象简介\"></a>对象简介</h2><p>JavaScript语言是动态的————可以新增属性也可以删除属性————但他们常用来模拟静态对象以及静态类型语言中的”结构体”。有时它们也用做字符串的集合。</p>\n<h3 id=\"对象创建三种方法\"><a href=\"#对象创建三种方法\" class=\"headerlink\" title=\"对象创建三种方法\"></a>对象创建三种方法</h3><p>对象的创建可以通过三种方法，分别是对象直接量创建，通过new创建，通过Object.create()方法创建。</p>\n<h4 id=\"1-对象直接量\"><a href=\"#1-对象直接量\" class=\"headerlink\" title=\"1.对象直接量\"></a>1.对象直接量</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;javascript&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，便是直接创建对象的方法。</p>\n<h4 id=\"2-通过new创建对象\"><a href=\"#2-通过new创建对象\" class=\"headerlink\" title=\"2.通过new创建对象\"></a>2.通过new创建对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();    <span class=\"comment\">//创建一个空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();    <span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();      <span class=\"comment\">//创建一个表示当前事件的Date对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;js&quot;</span>);  <span class=\"comment\">//创建一个可以进行模式匹配的对象</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三种都是通过内置构造函数，还有自定义构造函数，比如</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-1.png\">\n\n<p>直接使用function构造函数，然后下面通过new来定义变量，下面两个分别为带不带参数以及带两个参数的构造</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-2.png\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-3.png\">\n\n<p>另外，值得一提的是<code>__proto__</code>属性，该属性是用于查询/设置对象的原型，但是似乎并不支持IE和Opera（此处并未测试），所以不建议使用，点开后会发现有一个<code>constructor</code>属性，指代其构造函数，如下图所示，但是此处并未理解透彻，需待以后深入理解。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-4.png\">\n\n<h4 id=\"3-Object-create-方法创建\"><a href=\"#3-Object-create-方法创建\" class=\"headerlink\" title=\"3.Object.create()方法创建\"></a>3.Object.create()方法创建</h4><p>第一个参数是这个对象的原型，第二个可选参数是对对象属性的进一步描述，例如</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/object-create-1.png\">\n\n<p><code>__proto__</code>是其继承的原型，可以看到第一层<code>__proto__</code>继承的是{x:1,y:2}，然后第二层<code>__proto__</code>继承的是Object原型。</p>\n<h3 id=\"不可变原始值和可变的对象引用\"><a href=\"#不可变原始值和可变的对象引用\" class=\"headerlink\" title=\"不可变原始值和可变的对象引用\"></a>不可变原始值和可变的对象引用</h3><p>原始值（undefined、null、布尔值、数字、字符串），对象（包括数组和函数），原始值是不可更改的，而对象则不同</p>\n<h4 id=\"不可变原始值\"><a href=\"#不可变原始值\" class=\"headerlink\" title=\"不可变原始值\"></a>不可变原始值</h4><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/originalValue.jpg\">\n\n<p>可以看到原始值不可更改</p>\n<h4 id=\"可变的对象引用\"><a href=\"#可变的对象引用\" class=\"headerlink\" title=\"可变的对象引用\"></a>可变的对象引用</h4><p>然而对象引用却可变</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-1.jpg\">\n\n<p>可以看到当另<code>b=a.p</code>的时候相当于将b指向了a.p，那么这个时候两个变量指向的就是同一个值，这时候为b.x赋值，那么a.p.x同样会被改变，这就是对象引用的可变。那么如果我们不想这样该怎么办呢，可以逐一赋值，比如说</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-2.jpg\">\n\n<p>直接对c的属性x进行赋值，这时候就不会将c指向a.p，这时候改变c.x就不会改变a.p.x</p>\n<h3 id=\"对象属性特性\"><a href=\"#对象属性特性\" class=\"headerlink\" title=\"对象属性特性\"></a>对象属性特性</h3><ul>\n<li>可写，表明是否可以设置该属性的值</li>\n<li>可枚举，表明是否可以通过for/in循环返回该属性</li>\n<li>可配置，表明是否可以通过删除或修改属性</li>\n</ul>\n<h2 id=\"对象检测属性\"><a href=\"#对象检测属性\" class=\"headerlink\" title=\"对象检测属性\"></a>对象检测属性</h2><p>检测对象里面包含的属性，可使用<code>in</code>、<code>hasOwnProperty</code>、<code>propertyIsEnumerable</code>方法来完成该工作。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test.png\">\n\n<h5 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-in.png\">\n\n<h5 id=\"hasOwnPreperty\"><a href=\"#hasOwnPreperty\" class=\"headerlink\" title=\"hasOwnPreperty\"></a>hasOwnPreperty</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-hasOwnProperty.png\">\n\n<h5 id=\"propertyIsEnumerable-NaN\"><a href=\"#propertyIsEnumerable-NaN\" class=\"headerlink\" title=\"propertyIsEnumerable\"></a>propertyIsEnumerable</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-propertyIsEnumerable.png\">\n\n<h4 id=\"三者之间区别\"><a href=\"#三者之间区别\" class=\"headerlink\" title=\"三者之间区别\"></a>三者之间区别</h4><p><code>in</code>自有属性和继承属性都能返回true，<code>hasOwnPreperty</code>自有属性返回ture，继承属性返回false，<code>propertyIsEnumerable</code>自有属性为可枚举时才返回true，是hasOwnpreperty的增强版</p>\n<h2 id=\"getter和setter\"><a href=\"#getter和setter\" class=\"headerlink\" title=\"getter和setter\"></a>getter和setter</h2><p>由getter和setter属性定义的属性称作“存储器属性”，不同于“数据属性”，当调用getter方法时，返回值就是属性表达式的值，当程序设置一个存取器属性的值时，将调用setter方法，将右侧的值当作参数传入setter。如果属性同时具有getter和setter方法，那么他是一个读/写属性，如果只有getter则是只读。只有setter则是只写，读取数据将返回undefined。</p>\n<h3 id=\"getter和setter的枚举\"><a href=\"#getter和setter的枚举\" class=\"headerlink\" title=\"getter和setter的枚举\"></a>getter和setter的枚举</h3><p>这里假如说定义一个<code>get r()</code>或定义一个<code>set r()</code>，那么这个r也是可枚举的，也就是说可以通过for/in循环来遍历到。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-1.jpg\">\n\n<p>那么修改一下可枚举性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-2.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-3.jpg\">\n\n<p>可以看到通过for/in循环并没有循环到属性r，也就是说可以通过设置属性的可枚举性来控制是否由for/in循环到。</p>\n<h4 id=\"继承下的for-in循环\"><a href=\"#继承下的for-in循环\" class=\"headerlink\" title=\"继承下的for/in循环\"></a>继承下的for/in循环</h4><p>同时，可以通过继承来达到for/in循环的遍历效果<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-4.jpg\"><br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-5.jpg\"></p>\n<p>可以看到for/in循环循环到了xyr，倘若这时候设置其原型a的某个属性的可枚举型为false，那么也会受到影响。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-1.png\">\n\n<p>如上图是一个定义getter和setter的实例，注意，theta只有getter方法，没有setter方法，所以是只读的，下面进行测试</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-2.png\">\n\n<p>可以看出上图，都获取到了相应的值</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-3.png\">\n\n<p>对比看出，对r的修改成功了，而对theta的修改并没有成功。</p>\n<h3 id=\"通过getOwnPropertyDescriptor-方法获得属性描述\"><a href=\"#通过getOwnPropertyDescriptor-方法获得属性描述\" class=\"headerlink\" title=\"通过getOwnPropertyDescriptor()方法获得属性描述\"></a>通过getOwnPropertyDescriptor()方法获得属性描述</h3><ul>\n<li>value: 值</li>\n<li>writable: 可写性</li>\n<li>enumerable: 可枚举性</li>\n<li>configurable: 可配置性</li>\n</ul>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getOwnPropertyDscriptor-1.png\">\n\n<h3 id=\"通过definePeoperty-方法修改属性描述\"><a href=\"#通过definePeoperty-方法修改属性描述\" class=\"headerlink\" title=\"通过definePeoperty()方法修改属性描述\"></a>通过definePeoperty()方法修改属性描述</h3><p>可通过该方法修改或直接添加数据属性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-1.png\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-2.png\">\n\n<p>上面即通过definePeoperty添加的一个x数据以及修改的属性</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本来这次想把原型链也顺带整理一下，结果发现这也是一块比较复杂的东西，所以决定详细学习一下类的使用继承方法等内容之后再来详细整理一下类和模块以及原型链的内容。</p>\n","site":{"data":{}},"excerpt":"<p>之前正在整理问卷平台项目，其中整理到了new这一用法，但发现自己其实对JS对象这一部分并不太熟悉，以及原型链究竟是如何不太清楚，所以便有了这一篇博客的整理，整理内容来自JavaScript权威指南。</p>","more":"<h2 id=\"对象简介\"><a href=\"#对象简介\" class=\"headerlink\" title=\"对象简介\"></a>对象简介</h2><p>JavaScript语言是动态的————可以新增属性也可以删除属性————但他们常用来模拟静态对象以及静态类型语言中的”结构体”。有时它们也用做字符串的集合。</p>\n<h3 id=\"对象创建三种方法\"><a href=\"#对象创建三种方法\" class=\"headerlink\" title=\"对象创建三种方法\"></a>对象创建三种方法</h3><p>对象的创建可以通过三种方法，分别是对象直接量创建，通过new创建，通过Object.create()方法创建。</p>\n<h4 id=\"1-对象直接量\"><a href=\"#1-对象直接量\" class=\"headerlink\" title=\"1.对象直接量\"></a>1.对象直接量</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;javascript&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，便是直接创建对象的方法。</p>\n<h4 id=\"2-通过new创建对象\"><a href=\"#2-通过new创建对象\" class=\"headerlink\" title=\"2.通过new创建对象\"></a>2.通过new创建对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();    <span class=\"comment\">//创建一个空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();    <span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();      <span class=\"comment\">//创建一个表示当前事件的Date对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;js&quot;</span>);  <span class=\"comment\">//创建一个可以进行模式匹配的对象</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三种都是通过内置构造函数，还有自定义构造函数，比如</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-1.png\">\n\n<p>直接使用function构造函数，然后下面通过new来定义变量，下面两个分别为带不带参数以及带两个参数的构造</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-2.png\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-3.png\">\n\n<p>另外，值得一提的是<code>__proto__</code>属性，该属性是用于查询/设置对象的原型，但是似乎并不支持IE和Opera（此处并未测试），所以不建议使用，点开后会发现有一个<code>constructor</code>属性，指代其构造函数，如下图所示，但是此处并未理解透彻，需待以后深入理解。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/constructor-4.png\">\n\n<h4 id=\"3-Object-create-方法创建\"><a href=\"#3-Object-create-方法创建\" class=\"headerlink\" title=\"3.Object.create()方法创建\"></a>3.Object.create()方法创建</h4><p>第一个参数是这个对象的原型，第二个可选参数是对对象属性的进一步描述，例如</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/object-create-1.png\">\n\n<p><code>__proto__</code>是其继承的原型，可以看到第一层<code>__proto__</code>继承的是{x:1,y:2}，然后第二层<code>__proto__</code>继承的是Object原型。</p>\n<h3 id=\"不可变原始值和可变的对象引用\"><a href=\"#不可变原始值和可变的对象引用\" class=\"headerlink\" title=\"不可变原始值和可变的对象引用\"></a>不可变原始值和可变的对象引用</h3><p>原始值（undefined、null、布尔值、数字、字符串），对象（包括数组和函数），原始值是不可更改的，而对象则不同</p>\n<h4 id=\"不可变原始值\"><a href=\"#不可变原始值\" class=\"headerlink\" title=\"不可变原始值\"></a>不可变原始值</h4><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/originalValue.jpg\">\n\n<p>可以看到原始值不可更改</p>\n<h4 id=\"可变的对象引用\"><a href=\"#可变的对象引用\" class=\"headerlink\" title=\"可变的对象引用\"></a>可变的对象引用</h4><p>然而对象引用却可变</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-1.jpg\">\n\n<p>可以看到当另<code>b=a.p</code>的时候相当于将b指向了a.p，那么这个时候两个变量指向的就是同一个值，这时候为b.x赋值，那么a.p.x同样会被改变，这就是对象引用的可变。那么如果我们不想这样该怎么办呢，可以逐一赋值，比如说</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-4-24/ObjectReference-2.jpg\">\n\n<p>直接对c的属性x进行赋值，这时候就不会将c指向a.p，这时候改变c.x就不会改变a.p.x</p>\n<h3 id=\"对象属性特性\"><a href=\"#对象属性特性\" class=\"headerlink\" title=\"对象属性特性\"></a>对象属性特性</h3><ul>\n<li>可写，表明是否可以设置该属性的值</li>\n<li>可枚举，表明是否可以通过for/in循环返回该属性</li>\n<li>可配置，表明是否可以通过删除或修改属性</li>\n</ul>\n<h2 id=\"对象检测属性\"><a href=\"#对象检测属性\" class=\"headerlink\" title=\"对象检测属性\"></a>对象检测属性</h2><p>检测对象里面包含的属性，可使用<code>in</code>、<code>hasOwnProperty</code>、<code>propertyIsEnumerable</code>方法来完成该工作。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test.png\">\n\n<h5 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-in.png\">\n\n<h5 id=\"hasOwnPreperty\"><a href=\"#hasOwnPreperty\" class=\"headerlink\" title=\"hasOwnPreperty\"></a>hasOwnPreperty</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-hasOwnProperty.png\">\n\n<h5 id=\"propertyIsEnumerable-NaN\"><a href=\"#propertyIsEnumerable-NaN\" class=\"headerlink\" title=\"propertyIsEnumerable\"></a>propertyIsEnumerable</h5><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/test-propertyIsEnumerable.png\">\n\n<h4 id=\"三者之间区别\"><a href=\"#三者之间区别\" class=\"headerlink\" title=\"三者之间区别\"></a>三者之间区别</h4><p><code>in</code>自有属性和继承属性都能返回true，<code>hasOwnPreperty</code>自有属性返回ture，继承属性返回false，<code>propertyIsEnumerable</code>自有属性为可枚举时才返回true，是hasOwnpreperty的增强版</p>\n<h2 id=\"getter和setter\"><a href=\"#getter和setter\" class=\"headerlink\" title=\"getter和setter\"></a>getter和setter</h2><p>由getter和setter属性定义的属性称作“存储器属性”，不同于“数据属性”，当调用getter方法时，返回值就是属性表达式的值，当程序设置一个存取器属性的值时，将调用setter方法，将右侧的值当作参数传入setter。如果属性同时具有getter和setter方法，那么他是一个读/写属性，如果只有getter则是只读。只有setter则是只写，读取数据将返回undefined。</p>\n<h3 id=\"getter和setter的枚举\"><a href=\"#getter和setter的枚举\" class=\"headerlink\" title=\"getter和setter的枚举\"></a>getter和setter的枚举</h3><p>这里假如说定义一个<code>get r()</code>或定义一个<code>set r()</code>，那么这个r也是可枚举的，也就是说可以通过for/in循环来遍历到。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-1.jpg\">\n\n<p>那么修改一下可枚举性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-2.jpg\">\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-3.jpg\">\n\n<p>可以看到通过for/in循环并没有循环到属性r，也就是说可以通过设置属性的可枚举性来控制是否由for/in循环到。</p>\n<h4 id=\"继承下的for-in循环\"><a href=\"#继承下的for-in循环\" class=\"headerlink\" title=\"继承下的for/in循环\"></a>继承下的for/in循环</h4><p>同时，可以通过继承来达到for/in循环的遍历效果<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-4.jpg\"><br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/for-in-5.jpg\"></p>\n<p>可以看到for/in循环循环到了xyr，倘若这时候设置其原型a的某个属性的可枚举型为false，那么也会受到影响。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-1.png\">\n\n<p>如上图是一个定义getter和setter的实例，注意，theta只有getter方法，没有setter方法，所以是只读的，下面进行测试</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-2.png\">\n\n<p>可以看出上图，都获取到了相应的值</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getter-3.png\">\n\n<p>对比看出，对r的修改成功了，而对theta的修改并没有成功。</p>\n<h3 id=\"通过getOwnPropertyDescriptor-方法获得属性描述\"><a href=\"#通过getOwnPropertyDescriptor-方法获得属性描述\" class=\"headerlink\" title=\"通过getOwnPropertyDescriptor()方法获得属性描述\"></a>通过getOwnPropertyDescriptor()方法获得属性描述</h3><ul>\n<li>value: 值</li>\n<li>writable: 可写性</li>\n<li>enumerable: 可枚举性</li>\n<li>configurable: 可配置性</li>\n</ul>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/getOwnPropertyDscriptor-1.png\">\n\n<h3 id=\"通过definePeoperty-方法修改属性描述\"><a href=\"#通过definePeoperty-方法修改属性描述\" class=\"headerlink\" title=\"通过definePeoperty()方法修改属性描述\"></a>通过definePeoperty()方法修改属性描述</h3><p>可通过该方法修改或直接添加数据属性</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-1.png\">\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-1-21/defineProperty-2.png\">\n\n<p>上面即通过definePeoperty添加的一个x数据以及修改的属性</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本来这次想把原型链也顺带整理一下，结果发现这也是一块比较复杂的东西，所以决定详细学习一下类的使用继承方法等内容之后再来详细整理一下类和模块以及原型链的内容。</p>"},{"title":"模板引擎ejs+gulp的使用","date":"2018-03-06T15:03:35.000Z","toc":true,"_content":"\n由于接了个项目，项目里面有很多样式重复的页面，或者还有比如说header或者footer这些每个页面几乎都有的模块。如果按照以往的技术，我肯定会选择直接复制粘贴啦，但是这样的最大问题就是，如果页面改动，那么你要逐个页面的去改动才能将整个网站改变，这样费时费力。于是乎，本着需求驱动技术的原则，学习了一下前端模板引擎ejs。当然，除了ejs还有很多模板引擎，但是业务紧急就选择了这么一个语法比较简单技术。为了将ejs本地编译成html，自动化构建工具进入视野，相比于grunt，我又选择了一个相对容易上手的gulp这么个工具。\n\n<!--more-->\n\n## 准备工作\n\n此处已默认全局安装gulp工具\n\n##### 本地安装gulp\n\n```bash\nnpm install --save -dev gulp\n```\n\n* 此处使用cnpm似乎无法安装，暂时未搞清楚原因\n\n##### 本地安装gulp-ejs\n```bash\nnpm install --save -dev gulp-ejs\n```\n\n* 此处`--save`和`-dev`自动把模块和版本号添加到package.json中devdependencies部分\n\n## 项目结构\n\n+ dist\n  + layout.html //gulp-ejs插件生成结果\n+ include\n  + footer.html \n  + header.html\n+ node_modules\n  + ....... //一些npm包\n+ gulpfile.js //gulp任务文件\n+ layout.ejs //ejs文件\n+ package-lock.json //配置文件\n\n\n## ejs部分\n\nejs部分的语法比较的少，目前用到的就是\n\n* <% '脚本' 标签，用于流程控制，无输出。\n* <%_ 删除其前面的空格符\n* <%= 输出数据到模板（输出是转义 HTML 标签）\n* <%- 输出非转义的数据到模板\n* <%# 注释标签，不执行、不输出内容\n* <%% 输出字符串 '<%'\n* %> 一般结束标签\n* -%> 删除紧随其后的换行符\n* %> 将结束标签后面的空格符删除\n\n##### layout.ejs\n```html \n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <%-include include/header.html %>   \n  <p> 这是 layout 的内容 </p>   \n  <%-include include/footer.html %>\n\n  <% if (condition) { -%>\n    <% for (var i = 0; i < students.length; i++) { -%>\n      <li><%= students[i]%></li>\n    <% } -%>\n  <% } else { -%>\n    <p>condition !== true</p>\n  <% } -%>\n</body>\n</html>\n```\n\n此处注意`<%- >`和`<% >`的区别，加上'-'并不会转义，而不加的话可以直接使用`<% include include/header.ejs %>`ejs书写的模板\n\n##### header.html \n```html\n// ./include/header.html \n<h1>header</h1>\n```\n\n##### footer.html \n```html \n// ./include/footer.html\n<h1>footer</h1>\n```\n\n##### gulpfile.js \n```js\nvar gulp = require('gulp');\nvar ejs  = require('gulp-ejs');\nvar data = require('gulp-data');\n \ngulp.task('ejs', function() {\n    gulp.src('**.ejs')\n        .pipe(ejs({ \n          students: [\"stu1\", \"stu2\", \"stu3\"],\n          condition: false\n        }, {}, { ext: '.html' }))\n    .pipe(gulp.dest('dist'));\n});\n```\n\n然后在命令行中使用`gulp ejs`即gulp+任务名称的格式来执行任务，输出结果。ejs第一个参数为传递的数据，第二个基本不用，第三个是输出html文件\n\n##### layout.html\n```html \n// ./dist/layout.html\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <h1>header</h1>   \n  <p> 这是 layout 的内容 </p>   \n  <h1>footer</h1>\n\n      <p>condition !== true</p>\n  </body>\n</html>\n```\n\n由此即可完成ejs模板的使用\n\n## 后记\n\n此外，推荐一个github上的项目，gulp-ejs-demo,感觉挺好用的，而且作者是hexo博客主题indigo的作者，风格我挺喜欢的。","source":"_posts/8. 模板引擎ejs+gulp的使用.md","raw":"---\ntitle: 模板引擎ejs+gulp的使用\ndate: 2018-03-06 23:03:35\ntoc: true\ncategories:\n- 前端\ntags:\n- ejs\n- gulp\n---\n\n由于接了个项目，项目里面有很多样式重复的页面，或者还有比如说header或者footer这些每个页面几乎都有的模块。如果按照以往的技术，我肯定会选择直接复制粘贴啦，但是这样的最大问题就是，如果页面改动，那么你要逐个页面的去改动才能将整个网站改变，这样费时费力。于是乎，本着需求驱动技术的原则，学习了一下前端模板引擎ejs。当然，除了ejs还有很多模板引擎，但是业务紧急就选择了这么一个语法比较简单技术。为了将ejs本地编译成html，自动化构建工具进入视野，相比于grunt，我又选择了一个相对容易上手的gulp这么个工具。\n\n<!--more-->\n\n## 准备工作\n\n此处已默认全局安装gulp工具\n\n##### 本地安装gulp\n\n```bash\nnpm install --save -dev gulp\n```\n\n* 此处使用cnpm似乎无法安装，暂时未搞清楚原因\n\n##### 本地安装gulp-ejs\n```bash\nnpm install --save -dev gulp-ejs\n```\n\n* 此处`--save`和`-dev`自动把模块和版本号添加到package.json中devdependencies部分\n\n## 项目结构\n\n+ dist\n  + layout.html //gulp-ejs插件生成结果\n+ include\n  + footer.html \n  + header.html\n+ node_modules\n  + ....... //一些npm包\n+ gulpfile.js //gulp任务文件\n+ layout.ejs //ejs文件\n+ package-lock.json //配置文件\n\n\n## ejs部分\n\nejs部分的语法比较的少，目前用到的就是\n\n* <% '脚本' 标签，用于流程控制，无输出。\n* <%_ 删除其前面的空格符\n* <%= 输出数据到模板（输出是转义 HTML 标签）\n* <%- 输出非转义的数据到模板\n* <%# 注释标签，不执行、不输出内容\n* <%% 输出字符串 '<%'\n* %> 一般结束标签\n* -%> 删除紧随其后的换行符\n* %> 将结束标签后面的空格符删除\n\n##### layout.ejs\n```html \n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <%-include include/header.html %>   \n  <p> 这是 layout 的内容 </p>   \n  <%-include include/footer.html %>\n\n  <% if (condition) { -%>\n    <% for (var i = 0; i < students.length; i++) { -%>\n      <li><%= students[i]%></li>\n    <% } -%>\n  <% } else { -%>\n    <p>condition !== true</p>\n  <% } -%>\n</body>\n</html>\n```\n\n此处注意`<%- >`和`<% >`的区别，加上'-'并不会转义，而不加的话可以直接使用`<% include include/header.ejs %>`ejs书写的模板\n\n##### header.html \n```html\n// ./include/header.html \n<h1>header</h1>\n```\n\n##### footer.html \n```html \n// ./include/footer.html\n<h1>footer</h1>\n```\n\n##### gulpfile.js \n```js\nvar gulp = require('gulp');\nvar ejs  = require('gulp-ejs');\nvar data = require('gulp-data');\n \ngulp.task('ejs', function() {\n    gulp.src('**.ejs')\n        .pipe(ejs({ \n          students: [\"stu1\", \"stu2\", \"stu3\"],\n          condition: false\n        }, {}, { ext: '.html' }))\n    .pipe(gulp.dest('dist'));\n});\n```\n\n然后在命令行中使用`gulp ejs`即gulp+任务名称的格式来执行任务，输出结果。ejs第一个参数为传递的数据，第二个基本不用，第三个是输出html文件\n\n##### layout.html\n```html \n// ./dist/layout.html\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n  <h1>header</h1>   \n  <p> 这是 layout 的内容 </p>   \n  <h1>footer</h1>\n\n      <p>condition !== true</p>\n  </body>\n</html>\n```\n\n由此即可完成ejs模板的使用\n\n## 后记\n\n此外，推荐一个github上的项目，gulp-ejs-demo,感觉挺好用的，而且作者是hexo博客主题indigo的作者，风格我挺喜欢的。","slug":"8. 模板引擎ejs+gulp的使用","published":1,"updated":"2021-09-30T06:45:39.004Z","_id":"cku41le95001oidp25lzmd5a0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于接了个项目，项目里面有很多样式重复的页面，或者还有比如说header或者footer这些每个页面几乎都有的模块。如果按照以往的技术，我肯定会选择直接复制粘贴啦，但是这样的最大问题就是，如果页面改动，那么你要逐个页面的去改动才能将整个网站改变，这样费时费力。于是乎，本着需求驱动技术的原则，学习了一下前端模板引擎ejs。当然，除了ejs还有很多模板引擎，但是业务紧急就选择了这么一个语法比较简单技术。为了将ejs本地编译成html，自动化构建工具进入视野，相比于grunt，我又选择了一个相对容易上手的gulp这么个工具。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>此处已默认全局安装gulp工具</p>\n<h5 id=\"本地安装gulp\"><a href=\"#本地安装gulp\" class=\"headerlink\" title=\"本地安装gulp\"></a>本地安装gulp</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save -dev gulp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处使用cnpm似乎无法安装，暂时未搞清楚原因</li>\n</ul>\n<h5 id=\"本地安装gulp-ejs\"><a href=\"#本地安装gulp-ejs\" class=\"headerlink\" title=\"本地安装gulp-ejs\"></a>本地安装gulp-ejs</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save -dev gulp-ejs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处<code>--save</code>和<code>-dev</code>自动把模块和版本号添加到package.json中devdependencies部分</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><ul>\n<li>dist<ul>\n<li>layout.html //gulp-ejs插件生成结果</li>\n</ul>\n</li>\n<li>include<ul>\n<li>footer.html </li>\n<li>header.html</li>\n</ul>\n</li>\n<li>node_modules<ul>\n<li>……. //一些npm包</li>\n</ul>\n</li>\n<li>gulpfile.js //gulp任务文件</li>\n<li>layout.ejs //ejs文件</li>\n<li>package-lock.json //配置文件</li>\n</ul>\n<h2 id=\"ejs部分\"><a href=\"#ejs部分\" class=\"headerlink\" title=\"ejs部分\"></a>ejs部分</h2><p>ejs部分的语法比较的少，目前用到的就是</p>\n<ul>\n<li>&lt;% ‘脚本’ 标签，用于流程控制，无输出。</li>\n<li>&lt;%_ 删除其前面的空格符</li>\n<li>&lt;%= 输出数据到模板（输出是转义 HTML 标签）</li>\n<li>&lt;%- 输出非转义的数据到模板</li>\n<li>&lt;%# 注释标签，不执行、不输出内容</li>\n<li>&lt;%% 输出字符串 ‘&lt;%’</li>\n<li>%&gt; 一般结束标签</li>\n<li>-%&gt; 删除紧随其后的换行符</li>\n<li>%&gt; 将结束标签后面的空格符删除</li>\n</ul>\n<h5 id=\"layout-ejs\"><a href=\"#layout-ejs\" class=\"headerlink\" title=\"layout.ejs\"></a>layout.ejs</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  &lt;%-include include/header.html %&gt;   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 这是 layout 的内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   </span><br><span class=\"line\">  &lt;%-include include/footer.html %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (condition) &#123; -%&gt;</span><br><span class=\"line\">    &lt;% for (var i = 0; i &lt; students.length; i++) &#123; -%&gt;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&lt;%= students[i]%&gt;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    &lt;% &#125; -%&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; -%&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>condition !== true<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  &lt;% &#125; -%&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处注意<code>&lt;%- &gt;</code>和<code>&lt;% &gt;</code>的区别，加上’-‘并不会转义，而不加的话可以直接使用<code>&lt;% include include/header.ejs %&gt;</code>ejs书写的模板</p>\n<h5 id=\"header-html\"><a href=\"#header-html\" class=\"headerlink\" title=\"header.html\"></a>header.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./include/header.html </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"footer-html\"><a href=\"#footer-html\" class=\"headerlink\" title=\"footer.html\"></a>footer.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./include/footer.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ejs  = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-ejs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-data&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;ejs&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">&#x27;**.ejs&#x27;</span>)</span><br><span class=\"line\">        .pipe(ejs(&#123; </span><br><span class=\"line\">          <span class=\"attr\">students</span>: [<span class=\"string\">&quot;stu1&quot;</span>, <span class=\"string\">&quot;stu2&quot;</span>, <span class=\"string\">&quot;stu3&quot;</span>],</span><br><span class=\"line\">          <span class=\"attr\">condition</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;, &#123;&#125;, &#123; <span class=\"attr\">ext</span>: <span class=\"string\">&#x27;.html&#x27;</span> &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后在命令行中使用<code>gulp ejs</code>即gulp+任务名称的格式来执行任务，输出结果。ejs第一个参数为传递的数据，第二个基本不用，第三个是输出html文件</p>\n<h5 id=\"layout-html\"><a href=\"#layout-html\" class=\"headerlink\" title=\"layout.html\"></a>layout.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./dist/layout.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 这是 layout 的内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>condition !== true<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由此即可完成ejs模板的使用</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>此外，推荐一个github上的项目，gulp-ejs-demo,感觉挺好用的，而且作者是hexo博客主题indigo的作者，风格我挺喜欢的。</p>\n","site":{"data":{}},"excerpt":"<p>由于接了个项目，项目里面有很多样式重复的页面，或者还有比如说header或者footer这些每个页面几乎都有的模块。如果按照以往的技术，我肯定会选择直接复制粘贴啦，但是这样的最大问题就是，如果页面改动，那么你要逐个页面的去改动才能将整个网站改变，这样费时费力。于是乎，本着需求驱动技术的原则，学习了一下前端模板引擎ejs。当然，除了ejs还有很多模板引擎，但是业务紧急就选择了这么一个语法比较简单技术。为了将ejs本地编译成html，自动化构建工具进入视野，相比于grunt，我又选择了一个相对容易上手的gulp这么个工具。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>此处已默认全局安装gulp工具</p>\n<h5 id=\"本地安装gulp\"><a href=\"#本地安装gulp\" class=\"headerlink\" title=\"本地安装gulp\"></a>本地安装gulp</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save -dev gulp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处使用cnpm似乎无法安装，暂时未搞清楚原因</li>\n</ul>\n<h5 id=\"本地安装gulp-ejs\"><a href=\"#本地安装gulp-ejs\" class=\"headerlink\" title=\"本地安装gulp-ejs\"></a>本地安装gulp-ejs</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save -dev gulp-ejs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处<code>--save</code>和<code>-dev</code>自动把模块和版本号添加到package.json中devdependencies部分</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><ul>\n<li>dist<ul>\n<li>layout.html //gulp-ejs插件生成结果</li>\n</ul>\n</li>\n<li>include<ul>\n<li>footer.html </li>\n<li>header.html</li>\n</ul>\n</li>\n<li>node_modules<ul>\n<li>……. //一些npm包</li>\n</ul>\n</li>\n<li>gulpfile.js //gulp任务文件</li>\n<li>layout.ejs //ejs文件</li>\n<li>package-lock.json //配置文件</li>\n</ul>\n<h2 id=\"ejs部分\"><a href=\"#ejs部分\" class=\"headerlink\" title=\"ejs部分\"></a>ejs部分</h2><p>ejs部分的语法比较的少，目前用到的就是</p>\n<ul>\n<li>&lt;% ‘脚本’ 标签，用于流程控制，无输出。</li>\n<li>&lt;%_ 删除其前面的空格符</li>\n<li>&lt;%= 输出数据到模板（输出是转义 HTML 标签）</li>\n<li>&lt;%- 输出非转义的数据到模板</li>\n<li>&lt;%# 注释标签，不执行、不输出内容</li>\n<li>&lt;%% 输出字符串 ‘&lt;%’</li>\n<li>%&gt; 一般结束标签</li>\n<li>-%&gt; 删除紧随其后的换行符</li>\n<li>%&gt; 将结束标签后面的空格符删除</li>\n</ul>\n<h5 id=\"layout-ejs\"><a href=\"#layout-ejs\" class=\"headerlink\" title=\"layout.ejs\"></a>layout.ejs</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  &lt;%-include include/header.html %&gt;   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 这是 layout 的内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   </span><br><span class=\"line\">  &lt;%-include include/footer.html %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (condition) &#123; -%&gt;</span><br><span class=\"line\">    &lt;% for (var i = 0; i &lt; students.length; i++) &#123; -%&gt;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&lt;%= students[i]%&gt;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    &lt;% &#125; -%&gt;</span><br><span class=\"line\">  &lt;% &#125; else &#123; -%&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>condition !== true<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  &lt;% &#125; -%&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处注意<code>&lt;%- &gt;</code>和<code>&lt;% &gt;</code>的区别，加上’-‘并不会转义，而不加的话可以直接使用<code>&lt;% include include/header.ejs %&gt;</code>ejs书写的模板</p>\n<h5 id=\"header-html\"><a href=\"#header-html\" class=\"headerlink\" title=\"header.html\"></a>header.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./include/header.html </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"footer-html\"><a href=\"#footer-html\" class=\"headerlink\" title=\"footer.html\"></a>footer.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./include/footer.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ejs  = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-ejs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-data&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.task(<span class=\"string\">&#x27;ejs&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">&#x27;**.ejs&#x27;</span>)</span><br><span class=\"line\">        .pipe(ejs(&#123; </span><br><span class=\"line\">          <span class=\"attr\">students</span>: [<span class=\"string\">&quot;stu1&quot;</span>, <span class=\"string\">&quot;stu2&quot;</span>, <span class=\"string\">&quot;stu3&quot;</span>],</span><br><span class=\"line\">          <span class=\"attr\">condition</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;, &#123;&#125;, &#123; <span class=\"attr\">ext</span>: <span class=\"string\">&#x27;.html&#x27;</span> &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后在命令行中使用<code>gulp ejs</code>即gulp+任务名称的格式来执行任务，输出结果。ejs第一个参数为传递的数据，第二个基本不用，第三个是输出html文件</p>\n<h5 id=\"layout-html\"><a href=\"#layout-html\" class=\"headerlink\" title=\"layout.html\"></a>layout.html</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ./dist/layout.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>header<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 这是 layout 的内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>condition !== true<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由此即可完成ejs模板的使用</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>此外，推荐一个github上的项目，gulp-ejs-demo,感觉挺好用的，而且作者是hexo博客主题indigo的作者，风格我挺喜欢的。</p>"},{"title":"数字图像处理和PS","date":"2018-03-09T02:08:17.000Z","toc":true,"_content":"\n学期新开了一门课，数字图像处理，上了几节课之后收获很多，和之前用PS处理图片时候以及前端的CSS很多地方相互印证，原来很多原理不懂，只是看教程上这么做就做了，现在发现有许多地方豁然开朗，于是简单整理一下。\n\n<!--more-->\n\n## 灰度图像和RGB\n\n### 基本概念\n\n灰度图像0-255个级别，0是黑色，255是白色\n\nRGB即红色，绿色，蓝色三种颜色，从0-255共256个级别。以红色R为例，如果GB都为255，那么R为0是黑色，R为255则是纯红，其他类似，因此RGB(255,255,255)就可以说是白色，因此如果能看到RGB数值就能判断出来此颜色哪一种成分更多，这也是PS中通道模块的理论支撑。\n\n### PS处理 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame.jpg\" height=\"300px\">\n\n以上是本次处理的素材图，那么启动PS分别用红、绿、蓝三种通道观察图片，通道即把颜色分离，例如下图R通道，越白的地方说明R值越高，也就是越红，越黑的地方说明R值越低，也就越黑，将RGB三个值抽出来可用灰度图像来理解\n\nR通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red.jpg\" height=\"300px\">\n\nG通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_green.jpg\" height=\"300px\">\n\nB通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_blue.jpg\" height=\"300px\">\n\n那么观察图像可以看出，在R通道下白色区域最多，G通道次之，B通道最少，那么可以得出结论，该图像红色居多，绿色次之，蓝色最少几乎没有，那么为什么G通道也有很多白区域呢，原因即火焰中有很多黄色区域，而且红色和绿色值越高，也就越黄。那么有什么用呢。我们知道PS经常需要切图，对于轮廓清晰的图片，我们当然可以手工切图，或者自动选区之类的，但是如果我们要把该火焰图片切出来存成png格式图片呢，手工切不太可能，自动选取效果也不理想，那么我们就可以通过通道图来切图。\n\n切换成R通道图，然后ctrl+左键在R通道下选区\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_deal.jpg\" height=\"300px\">\n\n然后拖出来\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_res.jpg\" height=\"300px\">\n\n于是火焰就切出来了，似乎看起来不太亮，那是因为对比的原因，如果背景换成黑色，那么和原图近乎一样，除了一些边缘没有切出来，其他基本一样\n\n将切出来的图片放在黑色背景下的最终效果\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_res.jpg\" height=\"300px\">\n\n感觉火焰更加凝练了，之后就可通过滤镜之类的自由修改了","source":"_posts/9. 数字图像处理和PS.md","raw":"---\ntitle: 数字图像处理和PS\ndate: 2018-03-09 10:08:17\ntoc: true\ncategories:\n- PS\ntags:\n- PS\n---\n\n学期新开了一门课，数字图像处理，上了几节课之后收获很多，和之前用PS处理图片时候以及前端的CSS很多地方相互印证，原来很多原理不懂，只是看教程上这么做就做了，现在发现有许多地方豁然开朗，于是简单整理一下。\n\n<!--more-->\n\n## 灰度图像和RGB\n\n### 基本概念\n\n灰度图像0-255个级别，0是黑色，255是白色\n\nRGB即红色，绿色，蓝色三种颜色，从0-255共256个级别。以红色R为例，如果GB都为255，那么R为0是黑色，R为255则是纯红，其他类似，因此RGB(255,255,255)就可以说是白色，因此如果能看到RGB数值就能判断出来此颜色哪一种成分更多，这也是PS中通道模块的理论支撑。\n\n### PS处理 \n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame.jpg\" height=\"300px\">\n\n以上是本次处理的素材图，那么启动PS分别用红、绿、蓝三种通道观察图片，通道即把颜色分离，例如下图R通道，越白的地方说明R值越高，也就是越红，越黑的地方说明R值越低，也就越黑，将RGB三个值抽出来可用灰度图像来理解\n\nR通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red.jpg\" height=\"300px\">\n\nG通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_green.jpg\" height=\"300px\">\n\nB通道\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_blue.jpg\" height=\"300px\">\n\n那么观察图像可以看出，在R通道下白色区域最多，G通道次之，B通道最少，那么可以得出结论，该图像红色居多，绿色次之，蓝色最少几乎没有，那么为什么G通道也有很多白区域呢，原因即火焰中有很多黄色区域，而且红色和绿色值越高，也就越黄。那么有什么用呢。我们知道PS经常需要切图，对于轮廓清晰的图片，我们当然可以手工切图，或者自动选区之类的，但是如果我们要把该火焰图片切出来存成png格式图片呢，手工切不太可能，自动选取效果也不理想，那么我们就可以通过通道图来切图。\n\n切换成R通道图，然后ctrl+左键在R通道下选区\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_deal.jpg\" height=\"300px\">\n\n然后拖出来\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_res.jpg\" height=\"300px\">\n\n于是火焰就切出来了，似乎看起来不太亮，那是因为对比的原因，如果背景换成黑色，那么和原图近乎一样，除了一些边缘没有切出来，其他基本一样\n\n将切出来的图片放在黑色背景下的最终效果\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_res.jpg\" height=\"300px\">\n\n感觉火焰更加凝练了，之后就可通过滤镜之类的自由修改了","slug":"9. 数字图像处理和PS","published":1,"updated":"2021-09-30T06:45:46.545Z","_id":"cku41le96001ridp2ecke48f0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>学期新开了一门课，数字图像处理，上了几节课之后收获很多，和之前用PS处理图片时候以及前端的CSS很多地方相互印证，原来很多原理不懂，只是看教程上这么做就做了，现在发现有许多地方豁然开朗，于是简单整理一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"灰度图像和RGB\"><a href=\"#灰度图像和RGB\" class=\"headerlink\" title=\"灰度图像和RGB\"></a>灰度图像和RGB</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>灰度图像0-255个级别，0是黑色，255是白色</p>\n<p>RGB即红色，绿色，蓝色三种颜色，从0-255共256个级别。以红色R为例，如果GB都为255，那么R为0是黑色，R为255则是纯红，其他类似，因此RGB(255,255,255)就可以说是白色，因此如果能看到RGB数值就能判断出来此颜色哪一种成分更多，这也是PS中通道模块的理论支撑。</p>\n<h3 id=\"PS处理\"><a href=\"#PS处理\" class=\"headerlink\" title=\"PS处理\"></a>PS处理</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame.jpg\" height=\"300px\">\n\n<p>以上是本次处理的素材图，那么启动PS分别用红、绿、蓝三种通道观察图片，通道即把颜色分离，例如下图R通道，越白的地方说明R值越高，也就是越红，越黑的地方说明R值越低，也就越黑，将RGB三个值抽出来可用灰度图像来理解</p>\n<p>R通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red.jpg\" height=\"300px\"></p>\n<p>G通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_green.jpg\" height=\"300px\"></p>\n<p>B通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_blue.jpg\" height=\"300px\"></p>\n<p>那么观察图像可以看出，在R通道下白色区域最多，G通道次之，B通道最少，那么可以得出结论，该图像红色居多，绿色次之，蓝色最少几乎没有，那么为什么G通道也有很多白区域呢，原因即火焰中有很多黄色区域，而且红色和绿色值越高，也就越黄。那么有什么用呢。我们知道PS经常需要切图，对于轮廓清晰的图片，我们当然可以手工切图，或者自动选区之类的，但是如果我们要把该火焰图片切出来存成png格式图片呢，手工切不太可能，自动选取效果也不理想，那么我们就可以通过通道图来切图。</p>\n<p>切换成R通道图，然后ctrl+左键在R通道下选区</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_deal.jpg\" height=\"300px\">\n\n<p>然后拖出来</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_res.jpg\" height=\"300px\">\n\n<p>于是火焰就切出来了，似乎看起来不太亮，那是因为对比的原因，如果背景换成黑色，那么和原图近乎一样，除了一些边缘没有切出来，其他基本一样</p>\n<p>将切出来的图片放在黑色背景下的最终效果</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_res.jpg\" height=\"300px\">\n\n<p>感觉火焰更加凝练了，之后就可通过滤镜之类的自由修改了</p>\n","site":{"data":{}},"excerpt":"<p>学期新开了一门课，数字图像处理，上了几节课之后收获很多，和之前用PS处理图片时候以及前端的CSS很多地方相互印证，原来很多原理不懂，只是看教程上这么做就做了，现在发现有许多地方豁然开朗，于是简单整理一下。</p>","more":"<h2 id=\"灰度图像和RGB\"><a href=\"#灰度图像和RGB\" class=\"headerlink\" title=\"灰度图像和RGB\"></a>灰度图像和RGB</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>灰度图像0-255个级别，0是黑色，255是白色</p>\n<p>RGB即红色，绿色，蓝色三种颜色，从0-255共256个级别。以红色R为例，如果GB都为255，那么R为0是黑色，R为255则是纯红，其他类似，因此RGB(255,255,255)就可以说是白色，因此如果能看到RGB数值就能判断出来此颜色哪一种成分更多，这也是PS中通道模块的理论支撑。</p>\n<h3 id=\"PS处理\"><a href=\"#PS处理\" class=\"headerlink\" title=\"PS处理\"></a>PS处理</h3><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame.jpg\" height=\"300px\">\n\n<p>以上是本次处理的素材图，那么启动PS分别用红、绿、蓝三种通道观察图片，通道即把颜色分离，例如下图R通道，越白的地方说明R值越高，也就是越红，越黑的地方说明R值越低，也就越黑，将RGB三个值抽出来可用灰度图像来理解</p>\n<p>R通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red.jpg\" height=\"300px\"></p>\n<p>G通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_green.jpg\" height=\"300px\"></p>\n<p>B通道<br><img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_blue.jpg\" height=\"300px\"></p>\n<p>那么观察图像可以看出，在R通道下白色区域最多，G通道次之，B通道最少，那么可以得出结论，该图像红色居多，绿色次之，蓝色最少几乎没有，那么为什么G通道也有很多白区域呢，原因即火焰中有很多黄色区域，而且红色和绿色值越高，也就越黄。那么有什么用呢。我们知道PS经常需要切图，对于轮廓清晰的图片，我们当然可以手工切图，或者自动选区之类的，但是如果我们要把该火焰图片切出来存成png格式图片呢，手工切不太可能，自动选取效果也不理想，那么我们就可以通过通道图来切图。</p>\n<p>切换成R通道图，然后ctrl+左键在R通道下选区</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_deal.jpg\" height=\"300px\">\n\n<p>然后拖出来</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_red_res.jpg\" height=\"300px\">\n\n<p>于是火焰就切出来了，似乎看起来不太亮，那是因为对比的原因，如果背景换成黑色，那么和原图近乎一样，除了一些边缘没有切出来，其他基本一样</p>\n<p>将切出来的图片放在黑色背景下的最终效果</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-3-9/flame_res.jpg\" height=\"300px\">\n\n<p>感觉火焰更加凝练了，之后就可通过滤镜之类的自由修改了</p>"},{"title":"论文查询平台","date":"2018-12-02T14:51:20.000Z","toc":true,"_content":"\n又是很久都没有整理过了，这次也不立什么一定要坚持写博客的flag了。这一段时间忙了一些别的事情，技术上把Vue全家桶用于项目中实践了一下，也算是收获不少。\n\n<!--more-->\n\n## 大概需求\n\n先放一张大概效果图。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-12-2/picture.jpg\">\n\n需求简单点讲就是学科期刊，以及热点论文什么的查询。内容上分为六个模块，其中一个ESI学科期刊模块，两个顶级论文模块内容基本一样。查询时左侧会分别用关键词、月份、年份、学科进行过滤。然后还要支持导出excel，就是把数据整合成excel表格导出。\n\n需求并不是很复杂，但是实际写的时候确实也是考虑了很多东西，算是在代码规范上更近了一步吧。\n\n## 结构设计\n\n### 组件抽象\n\n学科期刊和顶级论文这三个模块内容基本一致，返回数据不同，因此可以把他们归为一类。\n\n#### 左侧过滤组件\n\n```html\n<FilterForm \n  v-if=\"isRenderTime\"\n  filterType=\"timeMonth\"\n  ref=\"checkedMonth\"\n  :filterItems=\"formData.filterMonth\"\n  @give-conditions=\"getArticaleData\"\n></FilterForm>\n```\n\n左侧抽象出来过滤组件，其中关键词查询都有不用做过多抽象。\n\n分类检索部分分三块，也可以抽象成一个小的过滤组件。通过父级组件传值`filterType`，来确定渲染成哪一部分的过滤模块\n\n其中由于月份的显示方式不太一样，为了节省空间，一行放了两个。所以需要绑定一个特殊的class，再用一个计算属性`isMonth`来判断是否是月份过滤，来判断有`display: inline-block`的class是否显示该组件上\n\n月份、年份、学科这三个过滤条件并不是每个页面都需要，因此根据获取的路由数据来判断哪一个过滤条件需要显示\n\n由于点击一个过滤按钮，需要获取其所有兄弟过滤组件的选中数据，所以这里我通过在过滤组件点击时，向父级元素传递信号，然后在父级元素上通过ref获取了三个过滤组件的值。\n\n\n### vuex数据管理\n\n把Vuex的相关代码分割成了数个模块，便于管理。然后提交方式都是通过action异步提交（这样更规范一些？此处后面还需要深入理解一下）\n\n查询里面的条件全部都用了Vuex来管理，`关键词`、`页码`、`月份`、`年份`、`学科`（此处可能还需要深入思考一下，`关键词`、`月份`、`年份`、`学科`这四个确实还有别的兄弟组件渲染的时候需要使用，但仅仅是读取并不会修改，放在Vuex里面管理代码方便了很多，但是究竟有没有更合适的方法还需要深入思考一下。但是`页码`这个并没有别的组件需要共享，放在里面纯属是因为和后台传参的时候直接读取Vuex的数据就行，图个方便，是否合理确实还要三思一下）\n\n搜索结果，就是后端传回来的文章数据，我也把他放在了Vuex里面管理。当时想的是，获取结果有四种方式，分别是`页面跳转`、`关键词查询`、`过滤条件`、`页码`这四个部分需要从后端获取数据，后端返回数据以后直接分发提交到Vuex里面，然后页面直接响应式渲染出来（其实也是图个方便，而且也确实目前的水准想不出什么更好的方式来组织结构）。\n\n文章下载全选功能，这个应该是用的比较的合适了。就是点击全选后，所有文章前面的多选框都要确定上，然后若某一个多选框取消了，全选前面的框也要取消。从这个角度看，双方共同维护这个选中的文章数组，两方都是可读可写，此处用的应该可以说是非常合适了。\n\n因此，总结一下，Vuex用了之后非常的方便，但是也可能造成一些Vuex的滥用，目前也确实没有想到比较好的方式来管理，此处需要在项目结束之后深入思考一下。\n\n\n## 关于css\n\n### css嵌套问题\n\n之前为了图方便，往往把子元素都写在其父元素内，导致父元素的class拉的很长，这样一是不便查看，二是不便于组件复用（只有位于特定父元素下，该class才会生效，不便于复用）。\n重构后，发现代码可读性并不是很高。于是再次重构，将联系紧密的嵌套一起，嵌套层数不超过2层，感觉可读性更强了一些。\n\n还有css不要嵌套选择器，比如说导航  .list a  ，像这样可能会导致后面改动的问题，比如说list内又加了一个item，item里加了一个a，这时候就会影响到item a，不便于维护。\n\n### 将less的全局变量文件抽离\n\n```js\n// 深灰\n@deep-grey: #e6e6e6;\n// 浅灰\n@light-grey: #F1F1F1;\n// 深色边框\n@border-deep: #bababa;\n// 浅色边框\n@border-light: #d3d3d3;\n// header底色\n@header-blue: #2a4c90;\n// 字体颜色\n@font-color: #4b505a;\n// 搜索结果面板背景\n@content-color: #f8f8f8;\n// 按钮颜色\n@button-color: #e4e5ec;\n```\n\n为了方便项目颜色的调整，很多时候取的颜色都是相同的，这里可以使用less的变量定义。但是这里如果每个vue文件都要引入一遍less文件，会很麻烦，也不方便维护。这里使用`style-resources-loader`插件来管理，npm安装好后，在vue.config.js里面配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  pluginOptions: {\n    // 配置less全局变量\n    \"style-resources-loader\": {\n      preProcessor: \"less\",\n      patterns: [path.resolve(__dirname, \"src/global.less\")]\n    }\n  }\n};\n\n```\n\n配置好后，就可以直接在每个vue中使用了（此处需要研究一下原理）。\n\n\n## axios二次封装\n\n```js\nimport axios from \"axios\";\n// import qs from \"qs\"; // 序列化请求数据，视服务端的要求\n// import router from \"../router\";\n\nconst Axios = axios.create({\n  baseURL: \"http://106.14.153.164:6374\",\n  timeout: 10000,\n  responseType: \"json\",\n  withCredentials: false, // 是否允许带cookie这些\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\"\n  }\n});\n\n//POST传参序列化(添加请求拦截器)\nAxios.interceptors.request.use(\n  config => {\n    // 在发送请求之前做某件事\n    // if (config.method === \"post\") {\n    //   // 序列化\n    //   config.data = qs.stringify(config.data);\n    // }\n\n    // 若是有做鉴权token , 就给头部带上token\n    // 若是需要跨站点,存放到 cookie 会好一点,限制也没那么多,有些浏览环境限制了 localstorage 的使用\n    // 这里localStorage一般是请求成功后我们自行写入到本地的,因为你放在vuex刷新就没了\n    // 一些必要的数据写入本地,优先从本地读取\n\n    // 这里在api.js里面加了一个参数，控制是否需要传递鉴权\n    // 当有requiresAuth且为true是加上鉴权\n    if (\n      config.requiresAuth &&\n      config.requiresAuth === true &&\n      localStorage.loginUserBaseInfo &&\n      JSON.parse(localStorage.loginUserBaseInfo).jwtCode\n    ) {\n      let token = JSON.parse(localStorage.loginUserBaseInfo).jwtCode;\n      config.headers.Authorization = token;\n    }\n    console.log(\"config:\", config);\n    return config;\n  },\n  error => {\n    // error 的回调信息\n    console.log(\"request:\", error);\n    return Promise.reject(error);\n  }\n);\n\n//返回状态判断(添加响应拦截器)\nAxios.interceptors.response.use(\n  res => {\n    //对响应数据做些事\n    if (res.data && !(res.data.code === 200)) {\n      console.log(\"返回状态判断\");\n      // console.log(\"res:\", res);\n      alert(res.data.msg);\n      return Promise.reject(res.data.msg);\n    }\n    console.log(\"res:\", res);\n    return res;\n  },\n  error => {\n    if (error && error.response) {\n      let msg = error.response.data.msg;\n      switch (error.response.status) {\n        case 400:\n          alert(\"请求错误：\" + msg);\n          break;\n        case 401:\n          alert(\"未经授权的\" + msg);\n          break;\n        case 403:\n          alert(\"拒绝访问\" + msg);\n          break;\n        case 404:\n          alert(\"请求地址出错\" + msg);\n          break;\n        case 500:\n          alert(\"服务器内部错误\");\n          break;\n        default:\n          alert(\"错误\");\n      }\n    }\n    console.log(\"response:\", error.response);\n    return Promise.reject(error.response);\n  }\n);\n\nexport default Axios;\n\n```\n\n这里由于每次请求分到各个逻辑里面处理的话，代码不好管理，而且代码会很乱，工作量也大。这里把axios做一个二次封装，做一个请求和相应的统一拦截。\n\n比如说很多请求（除了登录）都需要鉴权验证，在请求前做一个请求头统一加上Authorization。然后也可以设置一下统一的`Content-Type`，这里需要和后端协商一下，让他统一接收参数或者json。如果接收参数的话，也可以使用qs做一个统一序列化。\n\n然后可以共同约定一下返回的错误code，然后把返回的code值根据约定作相应的处理，比如说401鉴权失败，然后重定向到`/login`\n\n然后也可以把接口统一封装一下，便于修改\n\n然后如果想要在全局使用这个封装好的api，在main.js中引入api文件，然后使用`Vue.prototype.$api = api;`，(这里应该是把$api放到了Vue的原型上)，就可以在全局通过`this.$api`调用了\n\n\n## JWT鉴权验证\n\nJWT之前一直没用过，这次和后端用了一下，在前后端分离里面用的比较多吧。\n\n那么鉴权验证的流程是什么呢？简单讲就是，前端用户登陆后，后端会返回一个token，然后前端把这个token存到localStorage或者session再或者Vuex里面管理，不同位置有不同的适用范围吧。考虑到session以及Vuex里面管理的话，刷新后就没有了，所以我存到了localStorage里面。\n\n然后每次需要鉴权的时候（比如说这里面的查询就需要鉴权，但是登陆不需要鉴权），把token加到请求头里面，发给后端进行身份验证。然后后端返回code状态码，或者直接重定向什么的都行。\n\nJWT按照我的理解主要用于签名验证，JWT分为三段，验证前两段编码后和第三段是否相同，即可判断是否是目标签名。\n\n### 具体的一些实现\n\n#### axios拦截\n\n```js\nif (\n  localStorage.loginUserBaseInfo &&\n  JSON.parse(localStorage.loginUserBaseInfo).jwtCode\n) {\n  let token = JSON.parse(localStorage.loginUserBaseInfo).jwtCode;\n  config.headers.Authorization = token;\n}\n```\n\n这里我一开始把所有的请求都加上了token，这里就是做一个简单的判断，判断本地有没有保存token信息，保存的话就加到请求头里面。\n\n但是后来有一个问题，那就是比如登录并不需要加上token，虽然后端没有判断，一开始并没有什么问题。但是当超过了过期时间之后，我发现登录的时候有莫名的报错，看了好半天才找到了这个问题。那就是后端应该是把这个鉴权统一处理了，那只能我这边来改。\n\n解决方法，在封装过的api请求文件里面，多加上一个参数`requiresAuth`为`true`则表示需要鉴权。然后在axios拦截器里面多加上一个判断`config.requiresAuth && config.requiresAuth === true`（~~此处需要深入理解一下Promise和ajax的区别~~）\n\nPromise主要用于异步编程，和ajax并无联系，只不过是因为Promise用于ajax异步后，能解决回调地狱问题，更多实践查看[js异步编程](/2019/02/18/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/)\n\n#### vue-router全局导航守卫\n\n这里每次跳转前都要做一个判断，就是判断当前是否有鉴权信息，以及是否过期\n\n```js\n// vue-router导航守卫，全局守卫\n// 并不是所有页面请求都需要加上token，所以需要做一个全局守卫\n// 在路由meta加一个字段requiresAuth,设置为true则必须加上鉴权\n// 登录页不需要鉴权\nrouter.beforeEach((to, from, next) => {\n  // 如果检测到meta含有字段\n  if (to.matched.some(res => res.meta.requiresAuth)) {\n    // 检测是否有鉴权信息\n    if (localStorage.loginUserBaseInfo) {\n      let lifeTime = JSON.parse(localStorage.loginUserBaseInfo).lifeTime;\n      let nowTime = new Date().getTime();\n      // 比较当前时间和过期时间\n      if (nowTime < lifeTime) {\n        // 有鉴权信息而且未过期\n        next();\n      } else {\n        // 鉴权已过期，跳转到登录页\n        alert(\"登录状态过期，请重新登录\");\n        next({\n          path: \"/login\"\n        });\n      }\n    } else {\n      // 没有鉴权信息，跳转到登录页\n      alert(\"登录状态过期，请重新登录\");\n      next({\n        path: \"/login\"\n      });\n    }\n  } else {\n    // 无需鉴权信息，继续\n    next();\n  }\n});\n```\n\n由于后端返回的过期时间是时间段，所以这里判断过期采用的方法是，login登录后获取的过期时间加上`getTime()`，得到过期时间戳存入localStrage。然后在路由处设置meta字段，来控制路由跳转时是否需要鉴权判断过期时间，如果过期，直接跳转到`/login`。\n\n\n## 二进制流文件下载\n\n```js\nconsole.log(response.headers);\nlet content = response.data;\nlet blob = new Blob([content]);\nlet fileName = response.headers[\"content-disposition\"].split(\"=\")[1];\nif (\"download\" in document.createElement(\"a\")) {\n  // 非IE下载\n  let elink = document.createElement(\"a\");\n  elink.download = fileName;\n  elink.style.display = \"none\";\n  elink.href = URL.createObjectURL(blob);\n  document.body.appendChild(elink);\n  elink.click();\n  URL.revokeObjectURL(elink.href);\n} else {\n  // IE 10+ 下载\n  navigator.msSaveBlob(blob, fileName);\n}\n```\n\n这里后端传我的是二进制流，虽然之前写的项目也是这样处理的，但是一个是当时没有认真研究，而且当时没有使用axios，导致这次也卡了一小段时间。\n\n然后就是Blob对象，Blob 对象表示一个不可变、原始数据的类文件对象。这里创建了一个文本节点，并隐藏，触发点击事件，触发下载。而且需要把api封装的接口设置`responseType: \"blob\"`。\n\n这里获取的是excel文件，后端通过`Content-Disposition`把文件名返回给我，这里其实有一个问题。虽然从network里面分析到了该请求头，但是axios并没有拦截到该请求头，这里需要后端设置`Access-Control-Expose-Headers`才能获取到该请求头。\n\n但是目前有一个问题还没有解决，那就是后端直接返回我的是`data: Blob()`，似乎是不能再多返回一个code状态码？没有状态码的话，我前面axios的拦截就不能统一根据返回的code来采取不同的处理。~~这里暂时没有解决，后面需要尝试写一下后端研究一下。~~\n\n解决方案：直接判断返回类型，如果返回的是Blob型，直接另一套操作\n\n```js\nif (res.data && !(res.data instanceof Blob) && !(res.data.code === 200))\n```\n\n## 将共同方法抽离\n\n情景：左侧过滤，翻页，页面跳转，排序四处操作都需要发送查询结果的请求，其返回结果都差不多，只是参数数量和数据不同。根据不同模块，其调用接口不相同，而且每处操作有略微不同，这是抽离的难处。但是，每次改动后，都需要将这些方法逐个修改，代码可维护性极差，因此，将其抽离出来势在必行。\n\n```js\nimport store from \"@/store/index\";\nimport api from \"@/request/api\";\n\n/**\n * 获取ESI期刊的方法抽离\n *\n * 传入两个参数，一个是一级目录名，一个是二级目录名\n * 这里两个api接口的传过去的参数不同，但是获取数据后的操作相同\n * 所以用if判断了二级目录\n * 在全期下是一个接口\n * 在当期，当期新增，当期跌出是一个接口\n * @param {*} firDirectory\n * @param {*} secDirectory\n */\n\nexport const getEsi = (firDirectory, secDirectory) => {\n  if (firDirectory === \"periodical\") {\n    // 如果当前在esi期刊目录下\n    if (secDirectory === \"all\") {\n      // 如果在全期\n      // 获取数据\n      api.search\n        .searchAll()\n        .then(response => {\n          console.log(response.data.data);\n          // ES6变量解构\n          let { totalElemNums, data } = response.data.data;\n          let articleTotal = totalElemNums;\n          let articleList = data;\n          // map遍历文章数组，取出esiId属性重新组成数组\n          let checkedArr = articleList.map(obj => obj.esiId);\n\n          // 提交文章数量和文章列表\n          store.dispatch(\"getArticleTotal\", articleTotal);\n          store.dispatch(\"getArticleListList\", articleList);\n          // 提交文章id数组\n          store.dispatch(\"getCheckedArr\", checkedArr);\n\n          // 初始化Vuex中的checkedId\n          store.dispatch(\"getCheckedId\", []);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      // 在esi模块的其它栏目下\n      const periodicalTimeTxt = {\n        current: \"current\",\n        new: \"newAddition\",\n        decrease: \"fellOut\"\n      };\n      console.log(periodicalTimeTxt[secDirectory]);\n      // 获取数据\n      api.search\n        .searchCurrent(periodicalTimeTxt[secDirectory])\n        .then(response => {\n          // ES6变量解构\n          let { totalElemNums, data } = response.data.data;\n          let articleTotal = totalElemNums;\n          let articleList = data;\n          // map遍历文章数组，取出esiId属性重新组成数组\n          let checkedArr = articleList.map(obj => obj.esiId);\n\n          // 提交文章数量和文章列表\n          store.dispatch(\"getArticleTotal\", articleTotal);\n          store.dispatch(\"getArticleListList\", articleList);\n          // 提交文章id数组\n          store.dispatch(\"getCheckedArr\", checkedArr);\n\n          // 初始化Vuex中的checkedId\n          store.dispatch(\"getCheckedId\", []);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }\n};\n```\n\n上面只是列举了期刊的处理办法，由于模块不同，分为两级栏目，因此函数设置了两个参数，一个是一级栏目，一个是二级栏目。根据栏目不同调用不同的处理办法。\n\n其中需要管理vuex，以及调用封装好的api请求接口，因此将这两模块引入，然后在每一处需要使用该方法的地方`import`导入，根据不同情况调用该方法即可。\n\n## Vue插件形式扩展一个全局组件\n\n情景：需要做一个类似iview或者element-ui里面的一个全局提示组件，因为alert弹出提示太丑了，该组件多在ajax回调中使用，来显示请求结果成功或者失败\n\n```html\n<template>\n  <transition name=\"fade\">\n      <div class=\"message\" :class=\"type\" v-show=\"show\">\n        <i v-if=\"type === 'info'\" class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n        <i v-else-if=\"type === 'success'\" class=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n        <i v-else-if=\"type === 'error'\" class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>        \n        <span class=\"text\">{{text}}</span>\n      </div>\n  </transition>\n</template>\n```\n\n```js\nlet VueMessage = Vue.extend({\n  render(h) {\n    let props = {\n      type,\n      text: msg,\n      show: this.show\n    };\n    // return h(\"Message\", { props: props });\n    // ES6简写\n    return h(\"Message\", { props });\n  },\n  data() {\n    return {\n      show: false\n    };\n  }\n});\nlet newMessage = new VueMessage();\nlet vm = newMessage.$mount();\nconsole.log(vm);\nlet el = vm.$el;\nconsole.log(el);\ndocument.body.appendChild(el); // 把生成的提示的dom插入body中\n```\n\n该组件代码参考了一片文章。只贴了一部分代码。首先，开发插件要使用Vue公开方法`install`，然后使用了`Vue.extend()`创建一个子类，后面的Message组件都是以实例化该类形成的，`extend()`return的参数可以参照Vue官方文档，作者这里使用`render()`而并未使用`template`暂时没看明白原因。不过直接使用template也不会有错。\n\n后面就是要先将实例化对象挂载到DOM上，然后通过$el来访问DOM。\n\n```js\n// 添加到window上，暴露三个方法（可以在js文件里直接调用）\nwindow.$message = {\n  info(text, callBack) {\n    if (!text) return;\n    msg(\"info\", text, callBack);\n  },\n  success(text, callBack) {\n    if (!text) return;\n    msg(\"success\", text, callBack);\n  },\n  error(text, callBack) {\n    if (!text) return;\n    msg(\"error\", text, callBack);\n  }\n};\n```\n\n还要提一点，因为我把axios二次封装，所以请求回调都没有写在vue文件里面，而是写在了抽离出来的js文件，因此无法通过Vue组件来调用。因此我将方法也同样添加到了到了window上，暴露了三个方法，然后在js文件中直接使用`window.$message.error(msg);`来调用。\n\n虽然不知道合不合理，但是确实解决了这一问题。\n\n\n","source":"_posts/22. 论文查询平台.md","raw":"---\ntitle: 论文查询平台\ndate: 2018-12-02 22:51:20\ntoc: true\ncategories:\n- 项目\ntags:\n- Vue\n- 项目\n---\n\n又是很久都没有整理过了，这次也不立什么一定要坚持写博客的flag了。这一段时间忙了一些别的事情，技术上把Vue全家桶用于项目中实践了一下，也算是收获不少。\n\n<!--more-->\n\n## 大概需求\n\n先放一张大概效果图。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-12-2/picture.jpg\">\n\n需求简单点讲就是学科期刊，以及热点论文什么的查询。内容上分为六个模块，其中一个ESI学科期刊模块，两个顶级论文模块内容基本一样。查询时左侧会分别用关键词、月份、年份、学科进行过滤。然后还要支持导出excel，就是把数据整合成excel表格导出。\n\n需求并不是很复杂，但是实际写的时候确实也是考虑了很多东西，算是在代码规范上更近了一步吧。\n\n## 结构设计\n\n### 组件抽象\n\n学科期刊和顶级论文这三个模块内容基本一致，返回数据不同，因此可以把他们归为一类。\n\n#### 左侧过滤组件\n\n```html\n<FilterForm \n  v-if=\"isRenderTime\"\n  filterType=\"timeMonth\"\n  ref=\"checkedMonth\"\n  :filterItems=\"formData.filterMonth\"\n  @give-conditions=\"getArticaleData\"\n></FilterForm>\n```\n\n左侧抽象出来过滤组件，其中关键词查询都有不用做过多抽象。\n\n分类检索部分分三块，也可以抽象成一个小的过滤组件。通过父级组件传值`filterType`，来确定渲染成哪一部分的过滤模块\n\n其中由于月份的显示方式不太一样，为了节省空间，一行放了两个。所以需要绑定一个特殊的class，再用一个计算属性`isMonth`来判断是否是月份过滤，来判断有`display: inline-block`的class是否显示该组件上\n\n月份、年份、学科这三个过滤条件并不是每个页面都需要，因此根据获取的路由数据来判断哪一个过滤条件需要显示\n\n由于点击一个过滤按钮，需要获取其所有兄弟过滤组件的选中数据，所以这里我通过在过滤组件点击时，向父级元素传递信号，然后在父级元素上通过ref获取了三个过滤组件的值。\n\n\n### vuex数据管理\n\n把Vuex的相关代码分割成了数个模块，便于管理。然后提交方式都是通过action异步提交（这样更规范一些？此处后面还需要深入理解一下）\n\n查询里面的条件全部都用了Vuex来管理，`关键词`、`页码`、`月份`、`年份`、`学科`（此处可能还需要深入思考一下，`关键词`、`月份`、`年份`、`学科`这四个确实还有别的兄弟组件渲染的时候需要使用，但仅仅是读取并不会修改，放在Vuex里面管理代码方便了很多，但是究竟有没有更合适的方法还需要深入思考一下。但是`页码`这个并没有别的组件需要共享，放在里面纯属是因为和后台传参的时候直接读取Vuex的数据就行，图个方便，是否合理确实还要三思一下）\n\n搜索结果，就是后端传回来的文章数据，我也把他放在了Vuex里面管理。当时想的是，获取结果有四种方式，分别是`页面跳转`、`关键词查询`、`过滤条件`、`页码`这四个部分需要从后端获取数据，后端返回数据以后直接分发提交到Vuex里面，然后页面直接响应式渲染出来（其实也是图个方便，而且也确实目前的水准想不出什么更好的方式来组织结构）。\n\n文章下载全选功能，这个应该是用的比较的合适了。就是点击全选后，所有文章前面的多选框都要确定上，然后若某一个多选框取消了，全选前面的框也要取消。从这个角度看，双方共同维护这个选中的文章数组，两方都是可读可写，此处用的应该可以说是非常合适了。\n\n因此，总结一下，Vuex用了之后非常的方便，但是也可能造成一些Vuex的滥用，目前也确实没有想到比较好的方式来管理，此处需要在项目结束之后深入思考一下。\n\n\n## 关于css\n\n### css嵌套问题\n\n之前为了图方便，往往把子元素都写在其父元素内，导致父元素的class拉的很长，这样一是不便查看，二是不便于组件复用（只有位于特定父元素下，该class才会生效，不便于复用）。\n重构后，发现代码可读性并不是很高。于是再次重构，将联系紧密的嵌套一起，嵌套层数不超过2层，感觉可读性更强了一些。\n\n还有css不要嵌套选择器，比如说导航  .list a  ，像这样可能会导致后面改动的问题，比如说list内又加了一个item，item里加了一个a，这时候就会影响到item a，不便于维护。\n\n### 将less的全局变量文件抽离\n\n```js\n// 深灰\n@deep-grey: #e6e6e6;\n// 浅灰\n@light-grey: #F1F1F1;\n// 深色边框\n@border-deep: #bababa;\n// 浅色边框\n@border-light: #d3d3d3;\n// header底色\n@header-blue: #2a4c90;\n// 字体颜色\n@font-color: #4b505a;\n// 搜索结果面板背景\n@content-color: #f8f8f8;\n// 按钮颜色\n@button-color: #e4e5ec;\n```\n\n为了方便项目颜色的调整，很多时候取的颜色都是相同的，这里可以使用less的变量定义。但是这里如果每个vue文件都要引入一遍less文件，会很麻烦，也不方便维护。这里使用`style-resources-loader`插件来管理，npm安装好后，在vue.config.js里面配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  pluginOptions: {\n    // 配置less全局变量\n    \"style-resources-loader\": {\n      preProcessor: \"less\",\n      patterns: [path.resolve(__dirname, \"src/global.less\")]\n    }\n  }\n};\n\n```\n\n配置好后，就可以直接在每个vue中使用了（此处需要研究一下原理）。\n\n\n## axios二次封装\n\n```js\nimport axios from \"axios\";\n// import qs from \"qs\"; // 序列化请求数据，视服务端的要求\n// import router from \"../router\";\n\nconst Axios = axios.create({\n  baseURL: \"http://106.14.153.164:6374\",\n  timeout: 10000,\n  responseType: \"json\",\n  withCredentials: false, // 是否允许带cookie这些\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\"\n  }\n});\n\n//POST传参序列化(添加请求拦截器)\nAxios.interceptors.request.use(\n  config => {\n    // 在发送请求之前做某件事\n    // if (config.method === \"post\") {\n    //   // 序列化\n    //   config.data = qs.stringify(config.data);\n    // }\n\n    // 若是有做鉴权token , 就给头部带上token\n    // 若是需要跨站点,存放到 cookie 会好一点,限制也没那么多,有些浏览环境限制了 localstorage 的使用\n    // 这里localStorage一般是请求成功后我们自行写入到本地的,因为你放在vuex刷新就没了\n    // 一些必要的数据写入本地,优先从本地读取\n\n    // 这里在api.js里面加了一个参数，控制是否需要传递鉴权\n    // 当有requiresAuth且为true是加上鉴权\n    if (\n      config.requiresAuth &&\n      config.requiresAuth === true &&\n      localStorage.loginUserBaseInfo &&\n      JSON.parse(localStorage.loginUserBaseInfo).jwtCode\n    ) {\n      let token = JSON.parse(localStorage.loginUserBaseInfo).jwtCode;\n      config.headers.Authorization = token;\n    }\n    console.log(\"config:\", config);\n    return config;\n  },\n  error => {\n    // error 的回调信息\n    console.log(\"request:\", error);\n    return Promise.reject(error);\n  }\n);\n\n//返回状态判断(添加响应拦截器)\nAxios.interceptors.response.use(\n  res => {\n    //对响应数据做些事\n    if (res.data && !(res.data.code === 200)) {\n      console.log(\"返回状态判断\");\n      // console.log(\"res:\", res);\n      alert(res.data.msg);\n      return Promise.reject(res.data.msg);\n    }\n    console.log(\"res:\", res);\n    return res;\n  },\n  error => {\n    if (error && error.response) {\n      let msg = error.response.data.msg;\n      switch (error.response.status) {\n        case 400:\n          alert(\"请求错误：\" + msg);\n          break;\n        case 401:\n          alert(\"未经授权的\" + msg);\n          break;\n        case 403:\n          alert(\"拒绝访问\" + msg);\n          break;\n        case 404:\n          alert(\"请求地址出错\" + msg);\n          break;\n        case 500:\n          alert(\"服务器内部错误\");\n          break;\n        default:\n          alert(\"错误\");\n      }\n    }\n    console.log(\"response:\", error.response);\n    return Promise.reject(error.response);\n  }\n);\n\nexport default Axios;\n\n```\n\n这里由于每次请求分到各个逻辑里面处理的话，代码不好管理，而且代码会很乱，工作量也大。这里把axios做一个二次封装，做一个请求和相应的统一拦截。\n\n比如说很多请求（除了登录）都需要鉴权验证，在请求前做一个请求头统一加上Authorization。然后也可以设置一下统一的`Content-Type`，这里需要和后端协商一下，让他统一接收参数或者json。如果接收参数的话，也可以使用qs做一个统一序列化。\n\n然后可以共同约定一下返回的错误code，然后把返回的code值根据约定作相应的处理，比如说401鉴权失败，然后重定向到`/login`\n\n然后也可以把接口统一封装一下，便于修改\n\n然后如果想要在全局使用这个封装好的api，在main.js中引入api文件，然后使用`Vue.prototype.$api = api;`，(这里应该是把$api放到了Vue的原型上)，就可以在全局通过`this.$api`调用了\n\n\n## JWT鉴权验证\n\nJWT之前一直没用过，这次和后端用了一下，在前后端分离里面用的比较多吧。\n\n那么鉴权验证的流程是什么呢？简单讲就是，前端用户登陆后，后端会返回一个token，然后前端把这个token存到localStorage或者session再或者Vuex里面管理，不同位置有不同的适用范围吧。考虑到session以及Vuex里面管理的话，刷新后就没有了，所以我存到了localStorage里面。\n\n然后每次需要鉴权的时候（比如说这里面的查询就需要鉴权，但是登陆不需要鉴权），把token加到请求头里面，发给后端进行身份验证。然后后端返回code状态码，或者直接重定向什么的都行。\n\nJWT按照我的理解主要用于签名验证，JWT分为三段，验证前两段编码后和第三段是否相同，即可判断是否是目标签名。\n\n### 具体的一些实现\n\n#### axios拦截\n\n```js\nif (\n  localStorage.loginUserBaseInfo &&\n  JSON.parse(localStorage.loginUserBaseInfo).jwtCode\n) {\n  let token = JSON.parse(localStorage.loginUserBaseInfo).jwtCode;\n  config.headers.Authorization = token;\n}\n```\n\n这里我一开始把所有的请求都加上了token，这里就是做一个简单的判断，判断本地有没有保存token信息，保存的话就加到请求头里面。\n\n但是后来有一个问题，那就是比如登录并不需要加上token，虽然后端没有判断，一开始并没有什么问题。但是当超过了过期时间之后，我发现登录的时候有莫名的报错，看了好半天才找到了这个问题。那就是后端应该是把这个鉴权统一处理了，那只能我这边来改。\n\n解决方法，在封装过的api请求文件里面，多加上一个参数`requiresAuth`为`true`则表示需要鉴权。然后在axios拦截器里面多加上一个判断`config.requiresAuth && config.requiresAuth === true`（~~此处需要深入理解一下Promise和ajax的区别~~）\n\nPromise主要用于异步编程，和ajax并无联系，只不过是因为Promise用于ajax异步后，能解决回调地狱问题，更多实践查看[js异步编程](/2019/02/18/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/)\n\n#### vue-router全局导航守卫\n\n这里每次跳转前都要做一个判断，就是判断当前是否有鉴权信息，以及是否过期\n\n```js\n// vue-router导航守卫，全局守卫\n// 并不是所有页面请求都需要加上token，所以需要做一个全局守卫\n// 在路由meta加一个字段requiresAuth,设置为true则必须加上鉴权\n// 登录页不需要鉴权\nrouter.beforeEach((to, from, next) => {\n  // 如果检测到meta含有字段\n  if (to.matched.some(res => res.meta.requiresAuth)) {\n    // 检测是否有鉴权信息\n    if (localStorage.loginUserBaseInfo) {\n      let lifeTime = JSON.parse(localStorage.loginUserBaseInfo).lifeTime;\n      let nowTime = new Date().getTime();\n      // 比较当前时间和过期时间\n      if (nowTime < lifeTime) {\n        // 有鉴权信息而且未过期\n        next();\n      } else {\n        // 鉴权已过期，跳转到登录页\n        alert(\"登录状态过期，请重新登录\");\n        next({\n          path: \"/login\"\n        });\n      }\n    } else {\n      // 没有鉴权信息，跳转到登录页\n      alert(\"登录状态过期，请重新登录\");\n      next({\n        path: \"/login\"\n      });\n    }\n  } else {\n    // 无需鉴权信息，继续\n    next();\n  }\n});\n```\n\n由于后端返回的过期时间是时间段，所以这里判断过期采用的方法是，login登录后获取的过期时间加上`getTime()`，得到过期时间戳存入localStrage。然后在路由处设置meta字段，来控制路由跳转时是否需要鉴权判断过期时间，如果过期，直接跳转到`/login`。\n\n\n## 二进制流文件下载\n\n```js\nconsole.log(response.headers);\nlet content = response.data;\nlet blob = new Blob([content]);\nlet fileName = response.headers[\"content-disposition\"].split(\"=\")[1];\nif (\"download\" in document.createElement(\"a\")) {\n  // 非IE下载\n  let elink = document.createElement(\"a\");\n  elink.download = fileName;\n  elink.style.display = \"none\";\n  elink.href = URL.createObjectURL(blob);\n  document.body.appendChild(elink);\n  elink.click();\n  URL.revokeObjectURL(elink.href);\n} else {\n  // IE 10+ 下载\n  navigator.msSaveBlob(blob, fileName);\n}\n```\n\n这里后端传我的是二进制流，虽然之前写的项目也是这样处理的，但是一个是当时没有认真研究，而且当时没有使用axios，导致这次也卡了一小段时间。\n\n然后就是Blob对象，Blob 对象表示一个不可变、原始数据的类文件对象。这里创建了一个文本节点，并隐藏，触发点击事件，触发下载。而且需要把api封装的接口设置`responseType: \"blob\"`。\n\n这里获取的是excel文件，后端通过`Content-Disposition`把文件名返回给我，这里其实有一个问题。虽然从network里面分析到了该请求头，但是axios并没有拦截到该请求头，这里需要后端设置`Access-Control-Expose-Headers`才能获取到该请求头。\n\n但是目前有一个问题还没有解决，那就是后端直接返回我的是`data: Blob()`，似乎是不能再多返回一个code状态码？没有状态码的话，我前面axios的拦截就不能统一根据返回的code来采取不同的处理。~~这里暂时没有解决，后面需要尝试写一下后端研究一下。~~\n\n解决方案：直接判断返回类型，如果返回的是Blob型，直接另一套操作\n\n```js\nif (res.data && !(res.data instanceof Blob) && !(res.data.code === 200))\n```\n\n## 将共同方法抽离\n\n情景：左侧过滤，翻页，页面跳转，排序四处操作都需要发送查询结果的请求，其返回结果都差不多，只是参数数量和数据不同。根据不同模块，其调用接口不相同，而且每处操作有略微不同，这是抽离的难处。但是，每次改动后，都需要将这些方法逐个修改，代码可维护性极差，因此，将其抽离出来势在必行。\n\n```js\nimport store from \"@/store/index\";\nimport api from \"@/request/api\";\n\n/**\n * 获取ESI期刊的方法抽离\n *\n * 传入两个参数，一个是一级目录名，一个是二级目录名\n * 这里两个api接口的传过去的参数不同，但是获取数据后的操作相同\n * 所以用if判断了二级目录\n * 在全期下是一个接口\n * 在当期，当期新增，当期跌出是一个接口\n * @param {*} firDirectory\n * @param {*} secDirectory\n */\n\nexport const getEsi = (firDirectory, secDirectory) => {\n  if (firDirectory === \"periodical\") {\n    // 如果当前在esi期刊目录下\n    if (secDirectory === \"all\") {\n      // 如果在全期\n      // 获取数据\n      api.search\n        .searchAll()\n        .then(response => {\n          console.log(response.data.data);\n          // ES6变量解构\n          let { totalElemNums, data } = response.data.data;\n          let articleTotal = totalElemNums;\n          let articleList = data;\n          // map遍历文章数组，取出esiId属性重新组成数组\n          let checkedArr = articleList.map(obj => obj.esiId);\n\n          // 提交文章数量和文章列表\n          store.dispatch(\"getArticleTotal\", articleTotal);\n          store.dispatch(\"getArticleListList\", articleList);\n          // 提交文章id数组\n          store.dispatch(\"getCheckedArr\", checkedArr);\n\n          // 初始化Vuex中的checkedId\n          store.dispatch(\"getCheckedId\", []);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      // 在esi模块的其它栏目下\n      const periodicalTimeTxt = {\n        current: \"current\",\n        new: \"newAddition\",\n        decrease: \"fellOut\"\n      };\n      console.log(periodicalTimeTxt[secDirectory]);\n      // 获取数据\n      api.search\n        .searchCurrent(periodicalTimeTxt[secDirectory])\n        .then(response => {\n          // ES6变量解构\n          let { totalElemNums, data } = response.data.data;\n          let articleTotal = totalElemNums;\n          let articleList = data;\n          // map遍历文章数组，取出esiId属性重新组成数组\n          let checkedArr = articleList.map(obj => obj.esiId);\n\n          // 提交文章数量和文章列表\n          store.dispatch(\"getArticleTotal\", articleTotal);\n          store.dispatch(\"getArticleListList\", articleList);\n          // 提交文章id数组\n          store.dispatch(\"getCheckedArr\", checkedArr);\n\n          // 初始化Vuex中的checkedId\n          store.dispatch(\"getCheckedId\", []);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }\n};\n```\n\n上面只是列举了期刊的处理办法，由于模块不同，分为两级栏目，因此函数设置了两个参数，一个是一级栏目，一个是二级栏目。根据栏目不同调用不同的处理办法。\n\n其中需要管理vuex，以及调用封装好的api请求接口，因此将这两模块引入，然后在每一处需要使用该方法的地方`import`导入，根据不同情况调用该方法即可。\n\n## Vue插件形式扩展一个全局组件\n\n情景：需要做一个类似iview或者element-ui里面的一个全局提示组件，因为alert弹出提示太丑了，该组件多在ajax回调中使用，来显示请求结果成功或者失败\n\n```html\n<template>\n  <transition name=\"fade\">\n      <div class=\"message\" :class=\"type\" v-show=\"show\">\n        <i v-if=\"type === 'info'\" class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n        <i v-else-if=\"type === 'success'\" class=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n        <i v-else-if=\"type === 'error'\" class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>        \n        <span class=\"text\">{{text}}</span>\n      </div>\n  </transition>\n</template>\n```\n\n```js\nlet VueMessage = Vue.extend({\n  render(h) {\n    let props = {\n      type,\n      text: msg,\n      show: this.show\n    };\n    // return h(\"Message\", { props: props });\n    // ES6简写\n    return h(\"Message\", { props });\n  },\n  data() {\n    return {\n      show: false\n    };\n  }\n});\nlet newMessage = new VueMessage();\nlet vm = newMessage.$mount();\nconsole.log(vm);\nlet el = vm.$el;\nconsole.log(el);\ndocument.body.appendChild(el); // 把生成的提示的dom插入body中\n```\n\n该组件代码参考了一片文章。只贴了一部分代码。首先，开发插件要使用Vue公开方法`install`，然后使用了`Vue.extend()`创建一个子类，后面的Message组件都是以实例化该类形成的，`extend()`return的参数可以参照Vue官方文档，作者这里使用`render()`而并未使用`template`暂时没看明白原因。不过直接使用template也不会有错。\n\n后面就是要先将实例化对象挂载到DOM上，然后通过$el来访问DOM。\n\n```js\n// 添加到window上，暴露三个方法（可以在js文件里直接调用）\nwindow.$message = {\n  info(text, callBack) {\n    if (!text) return;\n    msg(\"info\", text, callBack);\n  },\n  success(text, callBack) {\n    if (!text) return;\n    msg(\"success\", text, callBack);\n  },\n  error(text, callBack) {\n    if (!text) return;\n    msg(\"error\", text, callBack);\n  }\n};\n```\n\n还要提一点，因为我把axios二次封装，所以请求回调都没有写在vue文件里面，而是写在了抽离出来的js文件，因此无法通过Vue组件来调用。因此我将方法也同样添加到了到了window上，暴露了三个方法，然后在js文件中直接使用`window.$message.error(msg);`来调用。\n\n虽然不知道合不合理，但是确实解决了这一问题。\n\n\n","slug":"22. 论文查询平台","published":1,"updated":"2021-09-30T06:47:07.069Z","_id":"cku41le9j002xidp21mck4toj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>又是很久都没有整理过了，这次也不立什么一定要坚持写博客的flag了。这一段时间忙了一些别的事情，技术上把Vue全家桶用于项目中实践了一下，也算是收获不少。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"大概需求\"><a href=\"#大概需求\" class=\"headerlink\" title=\"大概需求\"></a>大概需求</h2><p>先放一张大概效果图。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-12-2/picture.jpg\">\n\n<p>需求简单点讲就是学科期刊，以及热点论文什么的查询。内容上分为六个模块，其中一个ESI学科期刊模块，两个顶级论文模块内容基本一样。查询时左侧会分别用关键词、月份、年份、学科进行过滤。然后还要支持导出excel，就是把数据整合成excel表格导出。</p>\n<p>需求并不是很复杂，但是实际写的时候确实也是考虑了很多东西，算是在代码规范上更近了一步吧。</p>\n<h2 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h2><h3 id=\"组件抽象\"><a href=\"#组件抽象\" class=\"headerlink\" title=\"组件抽象\"></a>组件抽象</h3><p>学科期刊和顶级论文这三个模块内容基本一致，返回数据不同，因此可以把他们归为一类。</p>\n<h4 id=\"左侧过滤组件\"><a href=\"#左侧过滤组件\" class=\"headerlink\" title=\"左侧过滤组件\"></a>左侧过滤组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FilterForm</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRenderTime&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">filterType</span>=<span class=\"string\">&quot;timeMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;checkedMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:filterItems</span>=<span class=\"string\">&quot;formData.filterMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">give-conditions</span>=<span class=\"string\">&quot;getArticaleData&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">FilterForm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>左侧抽象出来过滤组件，其中关键词查询都有不用做过多抽象。</p>\n<p>分类检索部分分三块，也可以抽象成一个小的过滤组件。通过父级组件传值<code>filterType</code>，来确定渲染成哪一部分的过滤模块</p>\n<p>其中由于月份的显示方式不太一样，为了节省空间，一行放了两个。所以需要绑定一个特殊的class，再用一个计算属性<code>isMonth</code>来判断是否是月份过滤，来判断有<code>display: inline-block</code>的class是否显示该组件上</p>\n<p>月份、年份、学科这三个过滤条件并不是每个页面都需要，因此根据获取的路由数据来判断哪一个过滤条件需要显示</p>\n<p>由于点击一个过滤按钮，需要获取其所有兄弟过滤组件的选中数据，所以这里我通过在过滤组件点击时，向父级元素传递信号，然后在父级元素上通过ref获取了三个过滤组件的值。</p>\n<h3 id=\"vuex数据管理\"><a href=\"#vuex数据管理\" class=\"headerlink\" title=\"vuex数据管理\"></a>vuex数据管理</h3><p>把Vuex的相关代码分割成了数个模块，便于管理。然后提交方式都是通过action异步提交（这样更规范一些？此处后面还需要深入理解一下）</p>\n<p>查询里面的条件全部都用了Vuex来管理，<code>关键词</code>、<code>页码</code>、<code>月份</code>、<code>年份</code>、<code>学科</code>（此处可能还需要深入思考一下，<code>关键词</code>、<code>月份</code>、<code>年份</code>、<code>学科</code>这四个确实还有别的兄弟组件渲染的时候需要使用，但仅仅是读取并不会修改，放在Vuex里面管理代码方便了很多，但是究竟有没有更合适的方法还需要深入思考一下。但是<code>页码</code>这个并没有别的组件需要共享，放在里面纯属是因为和后台传参的时候直接读取Vuex的数据就行，图个方便，是否合理确实还要三思一下）</p>\n<p>搜索结果，就是后端传回来的文章数据，我也把他放在了Vuex里面管理。当时想的是，获取结果有四种方式，分别是<code>页面跳转</code>、<code>关键词查询</code>、<code>过滤条件</code>、<code>页码</code>这四个部分需要从后端获取数据，后端返回数据以后直接分发提交到Vuex里面，然后页面直接响应式渲染出来（其实也是图个方便，而且也确实目前的水准想不出什么更好的方式来组织结构）。</p>\n<p>文章下载全选功能，这个应该是用的比较的合适了。就是点击全选后，所有文章前面的多选框都要确定上，然后若某一个多选框取消了，全选前面的框也要取消。从这个角度看，双方共同维护这个选中的文章数组，两方都是可读可写，此处用的应该可以说是非常合适了。</p>\n<p>因此，总结一下，Vuex用了之后非常的方便，但是也可能造成一些Vuex的滥用，目前也确实没有想到比较好的方式来管理，此处需要在项目结束之后深入思考一下。</p>\n<h2 id=\"关于css\"><a href=\"#关于css\" class=\"headerlink\" title=\"关于css\"></a>关于css</h2><h3 id=\"css嵌套问题\"><a href=\"#css嵌套问题\" class=\"headerlink\" title=\"css嵌套问题\"></a>css嵌套问题</h3><p>之前为了图方便，往往把子元素都写在其父元素内，导致父元素的class拉的很长，这样一是不便查看，二是不便于组件复用（只有位于特定父元素下，该class才会生效，不便于复用）。<br>重构后，发现代码可读性并不是很高。于是再次重构，将联系紧密的嵌套一起，嵌套层数不超过2层，感觉可读性更强了一些。</p>\n<p>还有css不要嵌套选择器，比如说导航  .list a  ，像这样可能会导致后面改动的问题，比如说list内又加了一个item，item里加了一个a，这时候就会影响到item a，不便于维护。</p>\n<h3 id=\"将less的全局变量文件抽离\"><a href=\"#将less的全局变量文件抽离\" class=\"headerlink\" title=\"将less的全局变量文件抽离\"></a>将less的全局变量文件抽离</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深灰</span></span><br><span class=\"line\">@deep-grey: #e6e6e6;</span><br><span class=\"line\"><span class=\"comment\">// 浅灰</span></span><br><span class=\"line\">@light-grey: #F1F1F1;</span><br><span class=\"line\"><span class=\"comment\">// 深色边框</span></span><br><span class=\"line\">@border-deep: #bababa;</span><br><span class=\"line\"><span class=\"comment\">// 浅色边框</span></span><br><span class=\"line\">@border-light: #d3d3d3;</span><br><span class=\"line\"><span class=\"comment\">// header底色</span></span><br><span class=\"line\">@header-blue: #2a4c90;</span><br><span class=\"line\"><span class=\"comment\">// 字体颜色</span></span><br><span class=\"line\">@font-color: #4b505a;</span><br><span class=\"line\"><span class=\"comment\">// 搜索结果面板背景</span></span><br><span class=\"line\">@content-color: #f8f8f8;</span><br><span class=\"line\"><span class=\"comment\">// 按钮颜色</span></span><br><span class=\"line\">@button-color: #e4e5ec;</span><br></pre></td></tr></table></figure>\n\n<p>为了方便项目颜色的调整，很多时候取的颜色都是相同的，这里可以使用less的变量定义。但是这里如果每个vue文件都要引入一遍less文件，会很麻烦，也不方便维护。这里使用<code>style-resources-loader</code>插件来管理，npm安装好后，在vue.config.js里面配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pluginOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置less全局变量</span></span><br><span class=\"line\">    <span class=\"string\">&quot;style-resources-loader&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">preProcessor</span>: <span class=\"string\">&quot;less&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">patterns</span>: [path.resolve(__dirname, <span class=\"string\">&quot;src/global.less&quot;</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，就可以直接在每个vue中使用了（此处需要研究一下原理）。</p>\n<h2 id=\"axios二次封装\"><a href=\"#axios二次封装\" class=\"headerlink\" title=\"axios二次封装\"></a>axios二次封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import qs from &quot;qs&quot;; // 序列化请求数据，视服务端的要求</span></span><br><span class=\"line\"><span class=\"comment\">// import router from &quot;../router&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Axios = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;http://106.14.153.164:6374&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">withCredentials</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否允许带cookie这些</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//POST传参序列化(添加请求拦截器)</span></span><br><span class=\"line\">Axios.interceptors.request.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在发送请求之前做某件事</span></span><br><span class=\"line\">    <span class=\"comment\">// if (config.method === &quot;post&quot;) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   // 序列化</span></span><br><span class=\"line\">    <span class=\"comment\">//   config.data = qs.stringify(config.data);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若是有做鉴权token , 就给头部带上token</span></span><br><span class=\"line\">    <span class=\"comment\">// 若是需要跨站点,存放到 cookie 会好一点,限制也没那么多,有些浏览环境限制了 localstorage 的使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里localStorage一般是请求成功后我们自行写入到本地的,因为你放在vuex刷新就没了</span></span><br><span class=\"line\">    <span class=\"comment\">// 一些必要的数据写入本地,优先从本地读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里在api.js里面加了一个参数，控制是否需要传递鉴权</span></span><br><span class=\"line\">    <span class=\"comment\">// 当有requiresAuth且为true是加上鉴权</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      config.requiresAuth &amp;&amp;</span><br><span class=\"line\">      config.requiresAuth === <span class=\"literal\">true</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"built_in\">localStorage</span>.loginUserBaseInfo &amp;&amp;</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> token = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode;</span><br><span class=\"line\">      config.headers.Authorization = token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;config:&quot;</span>, config);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// error 的回调信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;request:&quot;</span>, error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回状态判断(添加响应拦截器)</span></span><br><span class=\"line\">Axios.interceptors.response.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对响应数据做些事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.data &amp;&amp; !(res.data.code === <span class=\"number\">200</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;返回状态判断&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&quot;res:&quot;, res);</span></span><br><span class=\"line\">      alert(res.data.msg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res.data.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res:&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> msg = error.response.data.msg;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;请求错误：&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;未经授权的&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;拒绝访问&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;请求地址出错&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;服务器内部错误&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;错误&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;response:&quot;</span>, error.response);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error.response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Axios;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里由于每次请求分到各个逻辑里面处理的话，代码不好管理，而且代码会很乱，工作量也大。这里把axios做一个二次封装，做一个请求和相应的统一拦截。</p>\n<p>比如说很多请求（除了登录）都需要鉴权验证，在请求前做一个请求头统一加上Authorization。然后也可以设置一下统一的<code>Content-Type</code>，这里需要和后端协商一下，让他统一接收参数或者json。如果接收参数的话，也可以使用qs做一个统一序列化。</p>\n<p>然后可以共同约定一下返回的错误code，然后把返回的code值根据约定作相应的处理，比如说401鉴权失败，然后重定向到<code>/login</code></p>\n<p>然后也可以把接口统一封装一下，便于修改</p>\n<p>然后如果想要在全局使用这个封装好的api，在main.js中引入api文件，然后使用<code>Vue.prototype.$api = api;</code>，(这里应该是把$api放到了Vue的原型上)，就可以在全局通过<code>this.$api</code>调用了</p>\n<h2 id=\"JWT鉴权验证\"><a href=\"#JWT鉴权验证\" class=\"headerlink\" title=\"JWT鉴权验证\"></a>JWT鉴权验证</h2><p>JWT之前一直没用过，这次和后端用了一下，在前后端分离里面用的比较多吧。</p>\n<p>那么鉴权验证的流程是什么呢？简单讲就是，前端用户登陆后，后端会返回一个token，然后前端把这个token存到localStorage或者session再或者Vuex里面管理，不同位置有不同的适用范围吧。考虑到session以及Vuex里面管理的话，刷新后就没有了，所以我存到了localStorage里面。</p>\n<p>然后每次需要鉴权的时候（比如说这里面的查询就需要鉴权，但是登陆不需要鉴权），把token加到请求头里面，发给后端进行身份验证。然后后端返回code状态码，或者直接重定向什么的都行。</p>\n<p>JWT按照我的理解主要用于签名验证，JWT分为三段，验证前两段编码后和第三段是否相同，即可判断是否是目标签名。</p>\n<h3 id=\"具体的一些实现\"><a href=\"#具体的一些实现\" class=\"headerlink\" title=\"具体的一些实现\"></a>具体的一些实现</h3><h4 id=\"axios拦截\"><a href=\"#axios拦截\" class=\"headerlink\" title=\"axios拦截\"></a>axios拦截</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.loginUserBaseInfo &amp;&amp;</span><br><span class=\"line\">  <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode;</span><br><span class=\"line\">  config.headers.Authorization = token;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我一开始把所有的请求都加上了token，这里就是做一个简单的判断，判断本地有没有保存token信息，保存的话就加到请求头里面。</p>\n<p>但是后来有一个问题，那就是比如登录并不需要加上token，虽然后端没有判断，一开始并没有什么问题。但是当超过了过期时间之后，我发现登录的时候有莫名的报错，看了好半天才找到了这个问题。那就是后端应该是把这个鉴权统一处理了，那只能我这边来改。</p>\n<p>解决方法，在封装过的api请求文件里面，多加上一个参数<code>requiresAuth</code>为<code>true</code>则表示需要鉴权。然后在axios拦截器里面多加上一个判断<code>config.requiresAuth &amp;&amp; config.requiresAuth === true</code>（<del>此处需要深入理解一下Promise和ajax的区别</del>）</p>\n<p>Promise主要用于异步编程，和ajax并无联系，只不过是因为Promise用于ajax异步后，能解决回调地狱问题，更多实践查看<a href=\"/2019/02/18/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/\">js异步编程</a></p>\n<h4 id=\"vue-router全局导航守卫\"><a href=\"#vue-router全局导航守卫\" class=\"headerlink\" title=\"vue-router全局导航守卫\"></a>vue-router全局导航守卫</h4><p>这里每次跳转前都要做一个判断，就是判断当前是否有鉴权信息，以及是否过期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue-router导航守卫，全局守卫</span></span><br><span class=\"line\"><span class=\"comment\">// 并不是所有页面请求都需要加上token，所以需要做一个全局守卫</span></span><br><span class=\"line\"><span class=\"comment\">// 在路由meta加一个字段requiresAuth,设置为true则必须加上鉴权</span></span><br><span class=\"line\"><span class=\"comment\">// 登录页不需要鉴权</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果检测到meta含有字段</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.matched.some(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.meta.requiresAuth)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检测是否有鉴权信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">localStorage</span>.loginUserBaseInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> lifeTime = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).lifeTime;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">      <span class=\"comment\">// 比较当前时间和过期时间</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nowTime &lt; lifeTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 有鉴权信息而且未过期</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 鉴权已过期，跳转到登录页</span></span><br><span class=\"line\">        alert(<span class=\"string\">&quot;登录状态过期，请重新登录&quot;</span>);</span><br><span class=\"line\">        next(&#123;</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有鉴权信息，跳转到登录页</span></span><br><span class=\"line\">      alert(<span class=\"string\">&quot;登录状态过期，请重新登录&quot;</span>);</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无需鉴权信息，继续</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于后端返回的过期时间是时间段，所以这里判断过期采用的方法是，login登录后获取的过期时间加上<code>getTime()</code>，得到过期时间戳存入localStrage。然后在路由处设置meta字段，来控制路由跳转时是否需要鉴权判断过期时间，如果过期，直接跳转到<code>/login</code>。</p>\n<h2 id=\"二进制流文件下载\"><a href=\"#二进制流文件下载\" class=\"headerlink\" title=\"二进制流文件下载\"></a>二进制流文件下载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\"><span class=\"keyword\">let</span> content = response.data;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([content]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fileName = response.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;download&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 非IE下载</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> elink = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  elink.download = fileName;</span><br><span class=\"line\">  elink.style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  elink.href = URL.createObjectURL(blob);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(elink);</span><br><span class=\"line\">  elink.click();</span><br><span class=\"line\">  URL.revokeObjectURL(elink.href);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// IE 10+ 下载</span></span><br><span class=\"line\">  navigator.msSaveBlob(blob, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里后端传我的是二进制流，虽然之前写的项目也是这样处理的，但是一个是当时没有认真研究，而且当时没有使用axios，导致这次也卡了一小段时间。</p>\n<p>然后就是Blob对象，Blob 对象表示一个不可变、原始数据的类文件对象。这里创建了一个文本节点，并隐藏，触发点击事件，触发下载。而且需要把api封装的接口设置<code>responseType: &quot;blob&quot;</code>。</p>\n<p>这里获取的是excel文件，后端通过<code>Content-Disposition</code>把文件名返回给我，这里其实有一个问题。虽然从network里面分析到了该请求头，但是axios并没有拦截到该请求头，这里需要后端设置<code>Access-Control-Expose-Headers</code>才能获取到该请求头。</p>\n<p>但是目前有一个问题还没有解决，那就是后端直接返回我的是<code>data: Blob()</code>，似乎是不能再多返回一个code状态码？没有状态码的话，我前面axios的拦截就不能统一根据返回的code来采取不同的处理。<del>这里暂时没有解决，后面需要尝试写一下后端研究一下。</del></p>\n<p>解决方案：直接判断返回类型，如果返回的是Blob型，直接另一套操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (res.data &amp;&amp; !(res.data <span class=\"keyword\">instanceof</span> Blob) &amp;&amp; !(res.data.code === <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将共同方法抽离\"><a href=\"#将共同方法抽离\" class=\"headerlink\" title=\"将共同方法抽离\"></a>将共同方法抽离</h2><p>情景：左侧过滤，翻页，页面跳转，排序四处操作都需要发送查询结果的请求，其返回结果都差不多，只是参数数量和数据不同。根据不同模块，其调用接口不相同，而且每处操作有略微不同，这是抽离的难处。但是，每次改动后，都需要将这些方法逐个修改，代码可维护性极差，因此，将其抽离出来势在必行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/request/api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取ESI期刊的方法抽离</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入两个参数，一个是一级目录名，一个是二级目录名</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里两个api接口的传过去的参数不同，但是获取数据后的操作相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以用if判断了二级目录</span></span><br><span class=\"line\"><span class=\"comment\"> * 在全期下是一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 在当期，当期新增，当期跌出是一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> <span class=\"variable\">firDirectory</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> <span class=\"variable\">secDirectory</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getEsi = <span class=\"function\">(<span class=\"params\">firDirectory, secDirectory</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (firDirectory === <span class=\"string\">&quot;periodical&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前在esi期刊目录下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (secDirectory === <span class=\"string\">&quot;all&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果在全期</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">      api.search</span><br><span class=\"line\">        .searchAll()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(response.data.data);</span><br><span class=\"line\">          <span class=\"comment\">// ES6变量解构</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; totalElemNums, data &#125; = response.data.data;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleTotal = totalElemNums;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleList = data;</span><br><span class=\"line\">          <span class=\"comment\">// map遍历文章数组，取出esiId属性重新组成数组</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> checkedArr = articleList.map(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.esiId);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 提交文章数量和文章列表</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleTotal&quot;</span>, articleTotal);</span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleListList&quot;</span>, articleList);</span><br><span class=\"line\">          <span class=\"comment\">// 提交文章id数组</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedArr&quot;</span>, checkedArr);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 初始化Vuex中的checkedId</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedId&quot;</span>, []);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在esi模块的其它栏目下</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> periodicalTimeTxt = &#123;</span><br><span class=\"line\">        <span class=\"attr\">current</span>: <span class=\"string\">&quot;current&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">new</span>: <span class=\"string\">&quot;newAddition&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">decrease</span>: <span class=\"string\">&quot;fellOut&quot;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(periodicalTimeTxt[secDirectory]);</span><br><span class=\"line\">      <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">      api.search</span><br><span class=\"line\">        .searchCurrent(periodicalTimeTxt[secDirectory])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ES6变量解构</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; totalElemNums, data &#125; = response.data.data;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleTotal = totalElemNums;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleList = data;</span><br><span class=\"line\">          <span class=\"comment\">// map遍历文章数组，取出esiId属性重新组成数组</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> checkedArr = articleList.map(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.esiId);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 提交文章数量和文章列表</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleTotal&quot;</span>, articleTotal);</span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleListList&quot;</span>, articleList);</span><br><span class=\"line\">          <span class=\"comment\">// 提交文章id数组</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedArr&quot;</span>, checkedArr);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 初始化Vuex中的checkedId</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedId&quot;</span>, []);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面只是列举了期刊的处理办法，由于模块不同，分为两级栏目，因此函数设置了两个参数，一个是一级栏目，一个是二级栏目。根据栏目不同调用不同的处理办法。</p>\n<p>其中需要管理vuex，以及调用封装好的api请求接口，因此将这两模块引入，然后在每一处需要使用该方法的地方<code>import</code>导入，根据不同情况调用该方法即可。</p>\n<h2 id=\"Vue插件形式扩展一个全局组件\"><a href=\"#Vue插件形式扩展一个全局组件\" class=\"headerlink\" title=\"Vue插件形式扩展一个全局组件\"></a>Vue插件形式扩展一个全局组件</h2><p>情景：需要做一个类似iview或者element-ui里面的一个全局提示组件，因为alert弹出提示太丑了，该组件多在ajax回调中使用，来显示请求结果成功或者失败</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;type&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;type === &#x27;info&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-info-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type === &#x27;success&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-check-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type === &#x27;error&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-times-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> VueMessage = Vue.extend(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">h</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> props = &#123;</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      <span class=\"attr\">text</span>: msg,</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"built_in\">this</span>.show</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// return h(&quot;Message&quot;, &#123; props: props &#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// ES6简写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&quot;Message&quot;</span>, &#123; props &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> newMessage = <span class=\"keyword\">new</span> VueMessage();</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = newMessage.$mount();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm);</span><br><span class=\"line\"><span class=\"keyword\">let</span> el = vm.$el;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(el);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el); <span class=\"comment\">// 把生成的提示的dom插入body中</span></span><br></pre></td></tr></table></figure>\n\n<p>该组件代码参考了一片文章。只贴了一部分代码。首先，开发插件要使用Vue公开方法<code>install</code>，然后使用了<code>Vue.extend()</code>创建一个子类，后面的Message组件都是以实例化该类形成的，<code>extend()</code>return的参数可以参照Vue官方文档，作者这里使用<code>render()</code>而并未使用<code>template</code>暂时没看明白原因。不过直接使用template也不会有错。</p>\n<p>后面就是要先将实例化对象挂载到DOM上，然后通过$el来访问DOM。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加到window上，暴露三个方法（可以在js文件里直接调用）</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.$message = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">info</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;info&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;success&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;error&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>还要提一点，因为我把axios二次封装，所以请求回调都没有写在vue文件里面，而是写在了抽离出来的js文件，因此无法通过Vue组件来调用。因此我将方法也同样添加到了到了window上，暴露了三个方法，然后在js文件中直接使用<code>window.$message.error(msg);</code>来调用。</p>\n<p>虽然不知道合不合理，但是确实解决了这一问题。</p>\n","site":{"data":{}},"excerpt":"<p>又是很久都没有整理过了，这次也不立什么一定要坚持写博客的flag了。这一段时间忙了一些别的事情，技术上把Vue全家桶用于项目中实践了一下，也算是收获不少。</p>","more":"<h2 id=\"大概需求\"><a href=\"#大概需求\" class=\"headerlink\" title=\"大概需求\"></a>大概需求</h2><p>先放一张大概效果图。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2018-12-2/picture.jpg\">\n\n<p>需求简单点讲就是学科期刊，以及热点论文什么的查询。内容上分为六个模块，其中一个ESI学科期刊模块，两个顶级论文模块内容基本一样。查询时左侧会分别用关键词、月份、年份、学科进行过滤。然后还要支持导出excel，就是把数据整合成excel表格导出。</p>\n<p>需求并不是很复杂，但是实际写的时候确实也是考虑了很多东西，算是在代码规范上更近了一步吧。</p>\n<h2 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h2><h3 id=\"组件抽象\"><a href=\"#组件抽象\" class=\"headerlink\" title=\"组件抽象\"></a>组件抽象</h3><p>学科期刊和顶级论文这三个模块内容基本一致，返回数据不同，因此可以把他们归为一类。</p>\n<h4 id=\"左侧过滤组件\"><a href=\"#左侧过滤组件\" class=\"headerlink\" title=\"左侧过滤组件\"></a>左侧过滤组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FilterForm</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isRenderTime&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">filterType</span>=<span class=\"string\">&quot;timeMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;checkedMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:filterItems</span>=<span class=\"string\">&quot;formData.filterMonth&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">give-conditions</span>=<span class=\"string\">&quot;getArticaleData&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">FilterForm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>左侧抽象出来过滤组件，其中关键词查询都有不用做过多抽象。</p>\n<p>分类检索部分分三块，也可以抽象成一个小的过滤组件。通过父级组件传值<code>filterType</code>，来确定渲染成哪一部分的过滤模块</p>\n<p>其中由于月份的显示方式不太一样，为了节省空间，一行放了两个。所以需要绑定一个特殊的class，再用一个计算属性<code>isMonth</code>来判断是否是月份过滤，来判断有<code>display: inline-block</code>的class是否显示该组件上</p>\n<p>月份、年份、学科这三个过滤条件并不是每个页面都需要，因此根据获取的路由数据来判断哪一个过滤条件需要显示</p>\n<p>由于点击一个过滤按钮，需要获取其所有兄弟过滤组件的选中数据，所以这里我通过在过滤组件点击时，向父级元素传递信号，然后在父级元素上通过ref获取了三个过滤组件的值。</p>\n<h3 id=\"vuex数据管理\"><a href=\"#vuex数据管理\" class=\"headerlink\" title=\"vuex数据管理\"></a>vuex数据管理</h3><p>把Vuex的相关代码分割成了数个模块，便于管理。然后提交方式都是通过action异步提交（这样更规范一些？此处后面还需要深入理解一下）</p>\n<p>查询里面的条件全部都用了Vuex来管理，<code>关键词</code>、<code>页码</code>、<code>月份</code>、<code>年份</code>、<code>学科</code>（此处可能还需要深入思考一下，<code>关键词</code>、<code>月份</code>、<code>年份</code>、<code>学科</code>这四个确实还有别的兄弟组件渲染的时候需要使用，但仅仅是读取并不会修改，放在Vuex里面管理代码方便了很多，但是究竟有没有更合适的方法还需要深入思考一下。但是<code>页码</code>这个并没有别的组件需要共享，放在里面纯属是因为和后台传参的时候直接读取Vuex的数据就行，图个方便，是否合理确实还要三思一下）</p>\n<p>搜索结果，就是后端传回来的文章数据，我也把他放在了Vuex里面管理。当时想的是，获取结果有四种方式，分别是<code>页面跳转</code>、<code>关键词查询</code>、<code>过滤条件</code>、<code>页码</code>这四个部分需要从后端获取数据，后端返回数据以后直接分发提交到Vuex里面，然后页面直接响应式渲染出来（其实也是图个方便，而且也确实目前的水准想不出什么更好的方式来组织结构）。</p>\n<p>文章下载全选功能，这个应该是用的比较的合适了。就是点击全选后，所有文章前面的多选框都要确定上，然后若某一个多选框取消了，全选前面的框也要取消。从这个角度看，双方共同维护这个选中的文章数组，两方都是可读可写，此处用的应该可以说是非常合适了。</p>\n<p>因此，总结一下，Vuex用了之后非常的方便，但是也可能造成一些Vuex的滥用，目前也确实没有想到比较好的方式来管理，此处需要在项目结束之后深入思考一下。</p>\n<h2 id=\"关于css\"><a href=\"#关于css\" class=\"headerlink\" title=\"关于css\"></a>关于css</h2><h3 id=\"css嵌套问题\"><a href=\"#css嵌套问题\" class=\"headerlink\" title=\"css嵌套问题\"></a>css嵌套问题</h3><p>之前为了图方便，往往把子元素都写在其父元素内，导致父元素的class拉的很长，这样一是不便查看，二是不便于组件复用（只有位于特定父元素下，该class才会生效，不便于复用）。<br>重构后，发现代码可读性并不是很高。于是再次重构，将联系紧密的嵌套一起，嵌套层数不超过2层，感觉可读性更强了一些。</p>\n<p>还有css不要嵌套选择器，比如说导航  .list a  ，像这样可能会导致后面改动的问题，比如说list内又加了一个item，item里加了一个a，这时候就会影响到item a，不便于维护。</p>\n<h3 id=\"将less的全局变量文件抽离\"><a href=\"#将less的全局变量文件抽离\" class=\"headerlink\" title=\"将less的全局变量文件抽离\"></a>将less的全局变量文件抽离</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深灰</span></span><br><span class=\"line\">@deep-grey: #e6e6e6;</span><br><span class=\"line\"><span class=\"comment\">// 浅灰</span></span><br><span class=\"line\">@light-grey: #F1F1F1;</span><br><span class=\"line\"><span class=\"comment\">// 深色边框</span></span><br><span class=\"line\">@border-deep: #bababa;</span><br><span class=\"line\"><span class=\"comment\">// 浅色边框</span></span><br><span class=\"line\">@border-light: #d3d3d3;</span><br><span class=\"line\"><span class=\"comment\">// header底色</span></span><br><span class=\"line\">@header-blue: #2a4c90;</span><br><span class=\"line\"><span class=\"comment\">// 字体颜色</span></span><br><span class=\"line\">@font-color: #4b505a;</span><br><span class=\"line\"><span class=\"comment\">// 搜索结果面板背景</span></span><br><span class=\"line\">@content-color: #f8f8f8;</span><br><span class=\"line\"><span class=\"comment\">// 按钮颜色</span></span><br><span class=\"line\">@button-color: #e4e5ec;</span><br></pre></td></tr></table></figure>\n\n<p>为了方便项目颜色的调整，很多时候取的颜色都是相同的，这里可以使用less的变量定义。但是这里如果每个vue文件都要引入一遍less文件，会很麻烦，也不方便维护。这里使用<code>style-resources-loader</code>插件来管理，npm安装好后，在vue.config.js里面配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pluginOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置less全局变量</span></span><br><span class=\"line\">    <span class=\"string\">&quot;style-resources-loader&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">preProcessor</span>: <span class=\"string\">&quot;less&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">patterns</span>: [path.resolve(__dirname, <span class=\"string\">&quot;src/global.less&quot;</span>)]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，就可以直接在每个vue中使用了（此处需要研究一下原理）。</p>\n<h2 id=\"axios二次封装\"><a href=\"#axios二次封装\" class=\"headerlink\" title=\"axios二次封装\"></a>axios二次封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import qs from &quot;qs&quot;; // 序列化请求数据，视服务端的要求</span></span><br><span class=\"line\"><span class=\"comment\">// import router from &quot;../router&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Axios = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&quot;http://106.14.153.164:6374&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">withCredentials</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否允许带cookie这些</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//POST传参序列化(添加请求拦截器)</span></span><br><span class=\"line\">Axios.interceptors.request.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在发送请求之前做某件事</span></span><br><span class=\"line\">    <span class=\"comment\">// if (config.method === &quot;post&quot;) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   // 序列化</span></span><br><span class=\"line\">    <span class=\"comment\">//   config.data = qs.stringify(config.data);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若是有做鉴权token , 就给头部带上token</span></span><br><span class=\"line\">    <span class=\"comment\">// 若是需要跨站点,存放到 cookie 会好一点,限制也没那么多,有些浏览环境限制了 localstorage 的使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里localStorage一般是请求成功后我们自行写入到本地的,因为你放在vuex刷新就没了</span></span><br><span class=\"line\">    <span class=\"comment\">// 一些必要的数据写入本地,优先从本地读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里在api.js里面加了一个参数，控制是否需要传递鉴权</span></span><br><span class=\"line\">    <span class=\"comment\">// 当有requiresAuth且为true是加上鉴权</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      config.requiresAuth &amp;&amp;</span><br><span class=\"line\">      config.requiresAuth === <span class=\"literal\">true</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"built_in\">localStorage</span>.loginUserBaseInfo &amp;&amp;</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> token = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode;</span><br><span class=\"line\">      config.headers.Authorization = token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;config:&quot;</span>, config);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// error 的回调信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;request:&quot;</span>, error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回状态判断(添加响应拦截器)</span></span><br><span class=\"line\">Axios.interceptors.response.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//对响应数据做些事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.data &amp;&amp; !(res.data.code === <span class=\"number\">200</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;返回状态判断&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&quot;res:&quot;, res);</span></span><br><span class=\"line\">      alert(res.data.msg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res.data.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res:&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> msg = error.response.data.msg;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;请求错误：&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;未经授权的&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;拒绝访问&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;请求地址出错&quot;</span> + msg);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;服务器内部错误&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;错误&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;response:&quot;</span>, error.response);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error.response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Axios;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里由于每次请求分到各个逻辑里面处理的话，代码不好管理，而且代码会很乱，工作量也大。这里把axios做一个二次封装，做一个请求和相应的统一拦截。</p>\n<p>比如说很多请求（除了登录）都需要鉴权验证，在请求前做一个请求头统一加上Authorization。然后也可以设置一下统一的<code>Content-Type</code>，这里需要和后端协商一下，让他统一接收参数或者json。如果接收参数的话，也可以使用qs做一个统一序列化。</p>\n<p>然后可以共同约定一下返回的错误code，然后把返回的code值根据约定作相应的处理，比如说401鉴权失败，然后重定向到<code>/login</code></p>\n<p>然后也可以把接口统一封装一下，便于修改</p>\n<p>然后如果想要在全局使用这个封装好的api，在main.js中引入api文件，然后使用<code>Vue.prototype.$api = api;</code>，(这里应该是把$api放到了Vue的原型上)，就可以在全局通过<code>this.$api</code>调用了</p>\n<h2 id=\"JWT鉴权验证\"><a href=\"#JWT鉴权验证\" class=\"headerlink\" title=\"JWT鉴权验证\"></a>JWT鉴权验证</h2><p>JWT之前一直没用过，这次和后端用了一下，在前后端分离里面用的比较多吧。</p>\n<p>那么鉴权验证的流程是什么呢？简单讲就是，前端用户登陆后，后端会返回一个token，然后前端把这个token存到localStorage或者session再或者Vuex里面管理，不同位置有不同的适用范围吧。考虑到session以及Vuex里面管理的话，刷新后就没有了，所以我存到了localStorage里面。</p>\n<p>然后每次需要鉴权的时候（比如说这里面的查询就需要鉴权，但是登陆不需要鉴权），把token加到请求头里面，发给后端进行身份验证。然后后端返回code状态码，或者直接重定向什么的都行。</p>\n<p>JWT按照我的理解主要用于签名验证，JWT分为三段，验证前两段编码后和第三段是否相同，即可判断是否是目标签名。</p>\n<h3 id=\"具体的一些实现\"><a href=\"#具体的一些实现\" class=\"headerlink\" title=\"具体的一些实现\"></a>具体的一些实现</h3><h4 id=\"axios拦截\"><a href=\"#axios拦截\" class=\"headerlink\" title=\"axios拦截\"></a>axios拦截</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.loginUserBaseInfo &amp;&amp;</span><br><span class=\"line\">  <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).jwtCode;</span><br><span class=\"line\">  config.headers.Authorization = token;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我一开始把所有的请求都加上了token，这里就是做一个简单的判断，判断本地有没有保存token信息，保存的话就加到请求头里面。</p>\n<p>但是后来有一个问题，那就是比如登录并不需要加上token，虽然后端没有判断，一开始并没有什么问题。但是当超过了过期时间之后，我发现登录的时候有莫名的报错，看了好半天才找到了这个问题。那就是后端应该是把这个鉴权统一处理了，那只能我这边来改。</p>\n<p>解决方法，在封装过的api请求文件里面，多加上一个参数<code>requiresAuth</code>为<code>true</code>则表示需要鉴权。然后在axios拦截器里面多加上一个判断<code>config.requiresAuth &amp;&amp; config.requiresAuth === true</code>（<del>此处需要深入理解一下Promise和ajax的区别</del>）</p>\n<p>Promise主要用于异步编程，和ajax并无联系，只不过是因为Promise用于ajax异步后，能解决回调地狱问题，更多实践查看<a href=\"/2019/02/18/js%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/\">js异步编程</a></p>\n<h4 id=\"vue-router全局导航守卫\"><a href=\"#vue-router全局导航守卫\" class=\"headerlink\" title=\"vue-router全局导航守卫\"></a>vue-router全局导航守卫</h4><p>这里每次跳转前都要做一个判断，就是判断当前是否有鉴权信息，以及是否过期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue-router导航守卫，全局守卫</span></span><br><span class=\"line\"><span class=\"comment\">// 并不是所有页面请求都需要加上token，所以需要做一个全局守卫</span></span><br><span class=\"line\"><span class=\"comment\">// 在路由meta加一个字段requiresAuth,设置为true则必须加上鉴权</span></span><br><span class=\"line\"><span class=\"comment\">// 登录页不需要鉴权</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果检测到meta含有字段</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.matched.some(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.meta.requiresAuth)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检测是否有鉴权信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">localStorage</span>.loginUserBaseInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> lifeTime = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.loginUserBaseInfo).lifeTime;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nowTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">      <span class=\"comment\">// 比较当前时间和过期时间</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nowTime &lt; lifeTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 有鉴权信息而且未过期</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 鉴权已过期，跳转到登录页</span></span><br><span class=\"line\">        alert(<span class=\"string\">&quot;登录状态过期，请重新登录&quot;</span>);</span><br><span class=\"line\">        next(&#123;</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有鉴权信息，跳转到登录页</span></span><br><span class=\"line\">      alert(<span class=\"string\">&quot;登录状态过期，请重新登录&quot;</span>);</span><br><span class=\"line\">      next(&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 无需鉴权信息，继续</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于后端返回的过期时间是时间段，所以这里判断过期采用的方法是，login登录后获取的过期时间加上<code>getTime()</code>，得到过期时间戳存入localStrage。然后在路由处设置meta字段，来控制路由跳转时是否需要鉴权判断过期时间，如果过期，直接跳转到<code>/login</code>。</p>\n<h2 id=\"二进制流文件下载\"><a href=\"#二进制流文件下载\" class=\"headerlink\" title=\"二进制流文件下载\"></a>二进制流文件下载</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\"><span class=\"keyword\">let</span> content = response.data;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob([content]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fileName = response.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;download&quot;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 非IE下载</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> elink = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">  elink.download = fileName;</span><br><span class=\"line\">  elink.style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">  elink.href = URL.createObjectURL(blob);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(elink);</span><br><span class=\"line\">  elink.click();</span><br><span class=\"line\">  URL.revokeObjectURL(elink.href);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// IE 10+ 下载</span></span><br><span class=\"line\">  navigator.msSaveBlob(blob, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里后端传我的是二进制流，虽然之前写的项目也是这样处理的，但是一个是当时没有认真研究，而且当时没有使用axios，导致这次也卡了一小段时间。</p>\n<p>然后就是Blob对象，Blob 对象表示一个不可变、原始数据的类文件对象。这里创建了一个文本节点，并隐藏，触发点击事件，触发下载。而且需要把api封装的接口设置<code>responseType: &quot;blob&quot;</code>。</p>\n<p>这里获取的是excel文件，后端通过<code>Content-Disposition</code>把文件名返回给我，这里其实有一个问题。虽然从network里面分析到了该请求头，但是axios并没有拦截到该请求头，这里需要后端设置<code>Access-Control-Expose-Headers</code>才能获取到该请求头。</p>\n<p>但是目前有一个问题还没有解决，那就是后端直接返回我的是<code>data: Blob()</code>，似乎是不能再多返回一个code状态码？没有状态码的话，我前面axios的拦截就不能统一根据返回的code来采取不同的处理。<del>这里暂时没有解决，后面需要尝试写一下后端研究一下。</del></p>\n<p>解决方案：直接判断返回类型，如果返回的是Blob型，直接另一套操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (res.data &amp;&amp; !(res.data <span class=\"keyword\">instanceof</span> Blob) &amp;&amp; !(res.data.code === <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将共同方法抽离\"><a href=\"#将共同方法抽离\" class=\"headerlink\" title=\"将共同方法抽离\"></a>将共同方法抽离</h2><p>情景：左侧过滤，翻页，页面跳转，排序四处操作都需要发送查询结果的请求，其返回结果都差不多，只是参数数量和数据不同。根据不同模块，其调用接口不相同，而且每处操作有略微不同，这是抽离的难处。但是，每次改动后，都需要将这些方法逐个修改，代码可维护性极差，因此，将其抽离出来势在必行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> api <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/request/api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取ESI期刊的方法抽离</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入两个参数，一个是一级目录名，一个是二级目录名</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里两个api接口的传过去的参数不同，但是获取数据后的操作相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以用if判断了二级目录</span></span><br><span class=\"line\"><span class=\"comment\"> * 在全期下是一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 在当期，当期新增，当期跌出是一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> <span class=\"variable\">firDirectory</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> <span class=\"variable\">secDirectory</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getEsi = <span class=\"function\">(<span class=\"params\">firDirectory, secDirectory</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (firDirectory === <span class=\"string\">&quot;periodical&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前在esi期刊目录下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (secDirectory === <span class=\"string\">&quot;all&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果在全期</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">      api.search</span><br><span class=\"line\">        .searchAll()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(response.data.data);</span><br><span class=\"line\">          <span class=\"comment\">// ES6变量解构</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; totalElemNums, data &#125; = response.data.data;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleTotal = totalElemNums;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleList = data;</span><br><span class=\"line\">          <span class=\"comment\">// map遍历文章数组，取出esiId属性重新组成数组</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> checkedArr = articleList.map(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.esiId);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 提交文章数量和文章列表</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleTotal&quot;</span>, articleTotal);</span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleListList&quot;</span>, articleList);</span><br><span class=\"line\">          <span class=\"comment\">// 提交文章id数组</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedArr&quot;</span>, checkedArr);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 初始化Vuex中的checkedId</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedId&quot;</span>, []);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在esi模块的其它栏目下</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> periodicalTimeTxt = &#123;</span><br><span class=\"line\">        <span class=\"attr\">current</span>: <span class=\"string\">&quot;current&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">new</span>: <span class=\"string\">&quot;newAddition&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">decrease</span>: <span class=\"string\">&quot;fellOut&quot;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(periodicalTimeTxt[secDirectory]);</span><br><span class=\"line\">      <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">      api.search</span><br><span class=\"line\">        .searchCurrent(periodicalTimeTxt[secDirectory])</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ES6变量解构</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; totalElemNums, data &#125; = response.data.data;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleTotal = totalElemNums;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> articleList = data;</span><br><span class=\"line\">          <span class=\"comment\">// map遍历文章数组，取出esiId属性重新组成数组</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> checkedArr = articleList.map(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.esiId);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 提交文章数量和文章列表</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleTotal&quot;</span>, articleTotal);</span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getArticleListList&quot;</span>, articleList);</span><br><span class=\"line\">          <span class=\"comment\">// 提交文章id数组</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedArr&quot;</span>, checkedArr);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 初始化Vuex中的checkedId</span></span><br><span class=\"line\">          store.dispatch(<span class=\"string\">&quot;getCheckedId&quot;</span>, []);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面只是列举了期刊的处理办法，由于模块不同，分为两级栏目，因此函数设置了两个参数，一个是一级栏目，一个是二级栏目。根据栏目不同调用不同的处理办法。</p>\n<p>其中需要管理vuex，以及调用封装好的api请求接口，因此将这两模块引入，然后在每一处需要使用该方法的地方<code>import</code>导入，根据不同情况调用该方法即可。</p>\n<h2 id=\"Vue插件形式扩展一个全局组件\"><a href=\"#Vue插件形式扩展一个全局组件\" class=\"headerlink\" title=\"Vue插件形式扩展一个全局组件\"></a>Vue插件形式扩展一个全局组件</h2><p>情景：需要做一个类似iview或者element-ui里面的一个全局提示组件，因为alert弹出提示太丑了，该组件多在ajax回调中使用，来显示请求结果成功或者失败</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;type&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;type === &#x27;info&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-info-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type === &#x27;success&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-check-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type === &#x27;error&#x27;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-times-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> VueMessage = Vue.extend(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">h</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> props = &#123;</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      <span class=\"attr\">text</span>: msg,</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"built_in\">this</span>.show</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// return h(&quot;Message&quot;, &#123; props: props &#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// ES6简写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&quot;Message&quot;</span>, &#123; props &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> newMessage = <span class=\"keyword\">new</span> VueMessage();</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = newMessage.$mount();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm);</span><br><span class=\"line\"><span class=\"keyword\">let</span> el = vm.$el;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(el);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el); <span class=\"comment\">// 把生成的提示的dom插入body中</span></span><br></pre></td></tr></table></figure>\n\n<p>该组件代码参考了一片文章。只贴了一部分代码。首先，开发插件要使用Vue公开方法<code>install</code>，然后使用了<code>Vue.extend()</code>创建一个子类，后面的Message组件都是以实例化该类形成的，<code>extend()</code>return的参数可以参照Vue官方文档，作者这里使用<code>render()</code>而并未使用<code>template</code>暂时没看明白原因。不过直接使用template也不会有错。</p>\n<p>后面就是要先将实例化对象挂载到DOM上，然后通过$el来访问DOM。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加到window上，暴露三个方法（可以在js文件里直接调用）</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.$message = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">info</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;info&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;success&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">error</span>(<span class=\"params\">text, callBack</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!text) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    msg(<span class=\"string\">&quot;error&quot;</span>, text, callBack);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>还要提一点，因为我把axios二次封装，所以请求回调都没有写在vue文件里面，而是写在了抽离出来的js文件，因此无法通过Vue组件来调用。因此我将方法也同样添加到了到了window上，暴露了三个方法，然后在js文件中直接使用<code>window.$message.error(msg);</code>来调用。</p>\n<p>虽然不知道合不合理，但是确实解决了这一问题。</p>"},{"title":"hexo源码分析（一）","date":"2021-09-30T03:50:21.000Z","toc":true,"_content":"\n其实是由一个小问题引发的，在配置icarus主题的时候，发现的一个[问题](https://githubmemory.com/repo/ppoffice/hexo-theme-icarus/issues/855?page=1)，类似这个链接。就是`hexo-renderer-inferno`这个插件没有正常运行导致的，但是`node_modules`中可以很明显的看到，作为`hexo-theme-icarus`依赖的依赖，是被正常的安装下来了，按照文中的解决方案虽然能解决，但是并没有真正从源头上解决。基于这个原因，想从hexo的源码中看一看插件加载机制。\n\n很明显搜索引擎按照`hexo 源码`作为关键字的搜索结果中，并没有真正的源码分析，都是非常浅层的解析。所以这里我将从源码的角度尝试分析一下hexo内部的运行机制。\n\n注：hexo的版本`\"version\": \"5.4.0\"`\n\n<!--more-->\n\n## 导读\n这里将分几篇文章把我在阅读hexo代码的过程记录一下，作为hexo源码阅读第一篇文章，将分析一下hexo-cli的设计实现思路。\n\n## 输入 hexo <commond> 发生了什么？\n\n和其他的脚手架一样，首先是从`package.json`中的`bin`字段开始的。[bin有什么用](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin)可自行去npm文档查看。\n\n### hexo的bin\n\n我们在安装完`npm i hexo`之后，可以看到hexo的`package.json`中的`bin`字段如下\n```json\n\"bin\": {\n  \"hexo\": \"./bin/hexo\"\n},\n```\n\n此时，执行 hexo命令之后，后续就会被`bin/hexo`接管，可以看下`bin/hexo`的内容，直接使用了`hexo-cli`暴露的方法。\n```\n#!/usr/bin/env node\n'use strict';\nrequire('hexo-cli')();\n```\n\n### hexo-cli做的事情\n\n接下来我们来看一看`hexo-cli`做了什么，直接找 `package.json`中的 main字段，找到入口文件`lib/hexo.js`，接下来执行`hexo ...`都会被这里接管。\n\n`hexo-cli`和其他cli工具类似，里面的实现并不复杂，大致看一下就能了解实现原理，如果想了解一般cli的执行流程，你可以看我之前写的 vue-cli源码学习2.x，里面分析了vue-cli版本2的实现原理。\n\n`hexo-cli`提供了`init`、`help`、`version`这三个命令，那么此时你一定会有一个疑惑，`hexo server`、`hexo g`等等命令是怎么执行的？hexo-cli和hexo两个依赖的关系是怎么样的？\n\n其实我的最大的疑问也在这里，因为按照cli的惯例，一般所有命令都会在cli中实现对应的逻辑，但是经过调试发现，hexo似乎并不想这么做，而是把其他的命令逻辑放到hexo这个依赖中了。我理解是hexo作为一个暴露出来的核心类，里面的逻辑会很复杂，所以单独抽离出来了，`hexo-cli`只是提供了很简单的一个功能。那么我们接下来看。\n```js\n// hexo-cli/lib/hexo.js\nreturn findPkg(cwd, args).then(path => {\n  if (!path) return;\n  // ...\n}).then(mod => {\n  if (mod) hexo = mod;\n  log = hexo.log;\n\n  // 注册 hexo的控制台命令\n  require('./console')(hexo);\n\n  return hexo.init();\n})\n\nfunction loadModule(path, args) {\n  return Promise.try(() => {\n    // 会在目标目录中找 hexo这个依赖的路径，然后实例化 hexo\n    const modulePath = resolve.sync('hexo', { basedir: path });\n    const Hexo = require(modulePath);\n\n    return new Hexo(path, args);\n  });\n}\n```\n\n上面这段逻辑就是实例化Hexo的关键步骤，第一遍看的时候没发现，后来才发现这里，这个就是`hexo-cli`和`hexo`这两个依赖之间的关系。同时这里也做了保底逻辑，如果没有找到对应的`hexo`依赖的路径，那么会有一个保底逻辑，直接使用`hexo-cli`中内置的 Context来实例化 Hexo对象，你可以在`hexo-cli/lib/context.js`中找到对应的实现。\n\n我们先来看看假如使用`hexo-cli`中的实例化 Hexo是如何做的\n\n```js\n// hexo-cli/lib/context.js\nclass Context extends EventEmitter {\n  constructor(base = process.cwd(), args = {}) {\n    super();\n    this.base_dir = base;\n    this.log = logger(args);\n\n    this.extend = {\n      console: new ConsoleExtend()\n    };\n  }\n  // ...\n}\n```\n\n其他的暂时都不太重要，我们直接省去，我们先来看这一段\n```js\n// hexo-cli/lib/context.js\nthis.extend = {\n  console: new ConsoleExtend()\n};\n```\n\n这一段赋值了 extend，里面为 console实例化了一个 `ConsoleExtend`对象，为什么要看这个？\n\n```js\n// hexo-cli/lib/hexo.js\n// 注册 hexo的控制台命令\nrequire('./console')(hexo);\n```\n\n上面这段逻辑注册了 hexo的命令，那么里面是如何实现的插件注册逻辑？\n\n### hexo-cli的插件式结构\n\n```js\n// hexo-cli/lib/console/index.js\nmodule.exports = function(ctx) {\n  const { console } = ctx.extend;\n\n  console.register('help', 'Get help on a command.', {}, require('./help'));\n\n  console.register('init', 'Create a new Hexo folder.', {\n    desc: 'Create a new Hexo folder at the specified path or the current directory.',\n    usage: '[destination]',\n    arguments: [\n      {name: 'destination', desc: 'Folder path. Initialize in current folder if not specified'}\n    ],\n    options: [\n      {name: '--no-clone', desc: 'Copy files instead of cloning from GitHub'},\n      {name: '--no-install', desc: 'Skip npm install'}\n    ]\n  }, require('./init'));\n\n  console.register('version', 'Display version information.', {}, require('./version'));\n};\n```\n\n使用了 Hexo实例化的 extend字段，里面的 console就是 `ConsoleExtend`实例化的对象，使用 `console.register`来为hexo控制台提供命令注册，我们来看下`ConsoleExtend`的具体实现。\n\n```js\n// hexo-cli/lib/extend/console.js\nclass Console {\n  constructor() {\n    this.store = {};\n    this.alias = {};\n  }\n\n  register(name, desc, options, fn) {\n    // ...\n    this.store[name.toLowerCase()] = fn;\n    const c = fn;\n    c.options = options;\n    c.desc = desc;\n  }\n}\n```\n\n可以看到这里最核心的部分其实就是为传进来的回调方法添加上 `options`和 `desc`属性，因为fn传递的是引用，因此这里是会为传进来的fn修改对应的 `options`和 `desc`的。hexo的命令存储结构是类似 `{ [name]: fn: Function }`这种结构的（虽然我个人觉得这种方式不太好，更理想的结构应该是`{ [name]: { fn: Function, desc: string } }`，类似这样的结构）。不过这不重要，知道整体的设计思路即可。\n\n所有调用`register`的都会被记录到 Hexo实例对象的 store字段中，这样就完成了插件的注册步骤，最终结构类似下面\n```js\n{\n  help: [Function (anonymous)] { options: {}, desc: 'Get help on a command.' },\n  init: [Function (anonymous)] {\n    options: {\n      desc: 'Create a new Hexo folder at the specified path or the current directory.',\n      usage: '[destination]',\n      arguments: [Array],\n      options: [Array]\n    },\n    desc: 'Create a new Hexo folder.'\n  },\n  version: [Function (anonymous)] {\n    options: {},\n    desc: 'Display version information.'\n  }\n}\n```\n\n### 如何执行 hexo <command> ？\n\n```js\nfunction entry(cwd = process.cwd(), args) {\n  // ...\n  return findPkg(cwd, args).then(path => {\n  // ...\n  }).then(mod => {\n  // ...\n  }).then(() => {\n    let cmd = 'help';\n\n    if (!args.h && !args.help) {\n      const c = args._.shift();\n      // 这里取到 hexo命令执行的 目标\n      // 比如 cmd = 'init'\n      if (c && hexo.extend.console.get(c)) cmd = c;\n    }\n\n    watchSignal(hexo);\n    // 执行的关键 hexo.call()，cmd代表从命令行中取到的命令\n    return hexo.call(cmd, args).then(() => hexo.exit()).catch(err => hexo.exit(err).then(() => {\n      // `hexo.exit()` already dumped `err`\n      handleError(null);\n    }));\n  }).catch(handleError);\n}\n```\n\n我们依然只看关键的代码逻辑，可以看到`hexo.call(cmd, args)`这句代码就是执行的关键，里面的`cmd`参数代表了想要执行的命令，然后我们来看看`hexo.call()`的实现。\n\n```js\nclass Context extends EventEmitter {\n  // ...\n  call(name, args, callback) {\n    if (!callback && typeof args === 'function') {\n      callback = args;\n      args = {};\n    }\n\n    return new Promise((resolve, reject) => {\n      const c = this.extend.console.get(name);\n      // c是 fn，fn有 options和 desc\n      if (c) {\n        c.call(this, args).then(resolve, reject);\n      } else {\n        reject(new Error(`Console \\`${name}\\` has not been registered yet!`));\n      }\n    }).asCallback(callback);\n  }\n  // ...\n}\n```\n\n就是直接调用我们上文中`register`注册的方法，然后根据传入的name执行对应的方法回调。`hexo-cli`提供了`init`、`help`、`version`三个命令（不包含hexo依赖中注册的），你可以去`hexo-cli/lib/console`中去查看对应的三个命令实现，这里不再赘述，我们只提供主干流程的梳理，对应的细节你可以去代码中查看。\n\n### hexo-cli的执行过程\n\n至此，hexo-cli的整体实现逻辑，我们已经看完了。画一张流程图简单梳理一下。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2021-9-30/hexo-cli-process.png\">\n\n## 小结\n\n整个cli的过程其实大同小异，和其他的cli整体实现思路比较类似。\n","source":"_posts/32. hexo源码分析（一）.md","raw":"---\ntitle: hexo源码分析（一）\ndate: 2021-09-30 11:50:21\ntoc: true\ncategories:\n- hexo\ntags:\n- hexo\n- 源码\n---\n\n其实是由一个小问题引发的，在配置icarus主题的时候，发现的一个[问题](https://githubmemory.com/repo/ppoffice/hexo-theme-icarus/issues/855?page=1)，类似这个链接。就是`hexo-renderer-inferno`这个插件没有正常运行导致的，但是`node_modules`中可以很明显的看到，作为`hexo-theme-icarus`依赖的依赖，是被正常的安装下来了，按照文中的解决方案虽然能解决，但是并没有真正从源头上解决。基于这个原因，想从hexo的源码中看一看插件加载机制。\n\n很明显搜索引擎按照`hexo 源码`作为关键字的搜索结果中，并没有真正的源码分析，都是非常浅层的解析。所以这里我将从源码的角度尝试分析一下hexo内部的运行机制。\n\n注：hexo的版本`\"version\": \"5.4.0\"`\n\n<!--more-->\n\n## 导读\n这里将分几篇文章把我在阅读hexo代码的过程记录一下，作为hexo源码阅读第一篇文章，将分析一下hexo-cli的设计实现思路。\n\n## 输入 hexo <commond> 发生了什么？\n\n和其他的脚手架一样，首先是从`package.json`中的`bin`字段开始的。[bin有什么用](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin)可自行去npm文档查看。\n\n### hexo的bin\n\n我们在安装完`npm i hexo`之后，可以看到hexo的`package.json`中的`bin`字段如下\n```json\n\"bin\": {\n  \"hexo\": \"./bin/hexo\"\n},\n```\n\n此时，执行 hexo命令之后，后续就会被`bin/hexo`接管，可以看下`bin/hexo`的内容，直接使用了`hexo-cli`暴露的方法。\n```\n#!/usr/bin/env node\n'use strict';\nrequire('hexo-cli')();\n```\n\n### hexo-cli做的事情\n\n接下来我们来看一看`hexo-cli`做了什么，直接找 `package.json`中的 main字段，找到入口文件`lib/hexo.js`，接下来执行`hexo ...`都会被这里接管。\n\n`hexo-cli`和其他cli工具类似，里面的实现并不复杂，大致看一下就能了解实现原理，如果想了解一般cli的执行流程，你可以看我之前写的 vue-cli源码学习2.x，里面分析了vue-cli版本2的实现原理。\n\n`hexo-cli`提供了`init`、`help`、`version`这三个命令，那么此时你一定会有一个疑惑，`hexo server`、`hexo g`等等命令是怎么执行的？hexo-cli和hexo两个依赖的关系是怎么样的？\n\n其实我的最大的疑问也在这里，因为按照cli的惯例，一般所有命令都会在cli中实现对应的逻辑，但是经过调试发现，hexo似乎并不想这么做，而是把其他的命令逻辑放到hexo这个依赖中了。我理解是hexo作为一个暴露出来的核心类，里面的逻辑会很复杂，所以单独抽离出来了，`hexo-cli`只是提供了很简单的一个功能。那么我们接下来看。\n```js\n// hexo-cli/lib/hexo.js\nreturn findPkg(cwd, args).then(path => {\n  if (!path) return;\n  // ...\n}).then(mod => {\n  if (mod) hexo = mod;\n  log = hexo.log;\n\n  // 注册 hexo的控制台命令\n  require('./console')(hexo);\n\n  return hexo.init();\n})\n\nfunction loadModule(path, args) {\n  return Promise.try(() => {\n    // 会在目标目录中找 hexo这个依赖的路径，然后实例化 hexo\n    const modulePath = resolve.sync('hexo', { basedir: path });\n    const Hexo = require(modulePath);\n\n    return new Hexo(path, args);\n  });\n}\n```\n\n上面这段逻辑就是实例化Hexo的关键步骤，第一遍看的时候没发现，后来才发现这里，这个就是`hexo-cli`和`hexo`这两个依赖之间的关系。同时这里也做了保底逻辑，如果没有找到对应的`hexo`依赖的路径，那么会有一个保底逻辑，直接使用`hexo-cli`中内置的 Context来实例化 Hexo对象，你可以在`hexo-cli/lib/context.js`中找到对应的实现。\n\n我们先来看看假如使用`hexo-cli`中的实例化 Hexo是如何做的\n\n```js\n// hexo-cli/lib/context.js\nclass Context extends EventEmitter {\n  constructor(base = process.cwd(), args = {}) {\n    super();\n    this.base_dir = base;\n    this.log = logger(args);\n\n    this.extend = {\n      console: new ConsoleExtend()\n    };\n  }\n  // ...\n}\n```\n\n其他的暂时都不太重要，我们直接省去，我们先来看这一段\n```js\n// hexo-cli/lib/context.js\nthis.extend = {\n  console: new ConsoleExtend()\n};\n```\n\n这一段赋值了 extend，里面为 console实例化了一个 `ConsoleExtend`对象，为什么要看这个？\n\n```js\n// hexo-cli/lib/hexo.js\n// 注册 hexo的控制台命令\nrequire('./console')(hexo);\n```\n\n上面这段逻辑注册了 hexo的命令，那么里面是如何实现的插件注册逻辑？\n\n### hexo-cli的插件式结构\n\n```js\n// hexo-cli/lib/console/index.js\nmodule.exports = function(ctx) {\n  const { console } = ctx.extend;\n\n  console.register('help', 'Get help on a command.', {}, require('./help'));\n\n  console.register('init', 'Create a new Hexo folder.', {\n    desc: 'Create a new Hexo folder at the specified path or the current directory.',\n    usage: '[destination]',\n    arguments: [\n      {name: 'destination', desc: 'Folder path. Initialize in current folder if not specified'}\n    ],\n    options: [\n      {name: '--no-clone', desc: 'Copy files instead of cloning from GitHub'},\n      {name: '--no-install', desc: 'Skip npm install'}\n    ]\n  }, require('./init'));\n\n  console.register('version', 'Display version information.', {}, require('./version'));\n};\n```\n\n使用了 Hexo实例化的 extend字段，里面的 console就是 `ConsoleExtend`实例化的对象，使用 `console.register`来为hexo控制台提供命令注册，我们来看下`ConsoleExtend`的具体实现。\n\n```js\n// hexo-cli/lib/extend/console.js\nclass Console {\n  constructor() {\n    this.store = {};\n    this.alias = {};\n  }\n\n  register(name, desc, options, fn) {\n    // ...\n    this.store[name.toLowerCase()] = fn;\n    const c = fn;\n    c.options = options;\n    c.desc = desc;\n  }\n}\n```\n\n可以看到这里最核心的部分其实就是为传进来的回调方法添加上 `options`和 `desc`属性，因为fn传递的是引用，因此这里是会为传进来的fn修改对应的 `options`和 `desc`的。hexo的命令存储结构是类似 `{ [name]: fn: Function }`这种结构的（虽然我个人觉得这种方式不太好，更理想的结构应该是`{ [name]: { fn: Function, desc: string } }`，类似这样的结构）。不过这不重要，知道整体的设计思路即可。\n\n所有调用`register`的都会被记录到 Hexo实例对象的 store字段中，这样就完成了插件的注册步骤，最终结构类似下面\n```js\n{\n  help: [Function (anonymous)] { options: {}, desc: 'Get help on a command.' },\n  init: [Function (anonymous)] {\n    options: {\n      desc: 'Create a new Hexo folder at the specified path or the current directory.',\n      usage: '[destination]',\n      arguments: [Array],\n      options: [Array]\n    },\n    desc: 'Create a new Hexo folder.'\n  },\n  version: [Function (anonymous)] {\n    options: {},\n    desc: 'Display version information.'\n  }\n}\n```\n\n### 如何执行 hexo <command> ？\n\n```js\nfunction entry(cwd = process.cwd(), args) {\n  // ...\n  return findPkg(cwd, args).then(path => {\n  // ...\n  }).then(mod => {\n  // ...\n  }).then(() => {\n    let cmd = 'help';\n\n    if (!args.h && !args.help) {\n      const c = args._.shift();\n      // 这里取到 hexo命令执行的 目标\n      // 比如 cmd = 'init'\n      if (c && hexo.extend.console.get(c)) cmd = c;\n    }\n\n    watchSignal(hexo);\n    // 执行的关键 hexo.call()，cmd代表从命令行中取到的命令\n    return hexo.call(cmd, args).then(() => hexo.exit()).catch(err => hexo.exit(err).then(() => {\n      // `hexo.exit()` already dumped `err`\n      handleError(null);\n    }));\n  }).catch(handleError);\n}\n```\n\n我们依然只看关键的代码逻辑，可以看到`hexo.call(cmd, args)`这句代码就是执行的关键，里面的`cmd`参数代表了想要执行的命令，然后我们来看看`hexo.call()`的实现。\n\n```js\nclass Context extends EventEmitter {\n  // ...\n  call(name, args, callback) {\n    if (!callback && typeof args === 'function') {\n      callback = args;\n      args = {};\n    }\n\n    return new Promise((resolve, reject) => {\n      const c = this.extend.console.get(name);\n      // c是 fn，fn有 options和 desc\n      if (c) {\n        c.call(this, args).then(resolve, reject);\n      } else {\n        reject(new Error(`Console \\`${name}\\` has not been registered yet!`));\n      }\n    }).asCallback(callback);\n  }\n  // ...\n}\n```\n\n就是直接调用我们上文中`register`注册的方法，然后根据传入的name执行对应的方法回调。`hexo-cli`提供了`init`、`help`、`version`三个命令（不包含hexo依赖中注册的），你可以去`hexo-cli/lib/console`中去查看对应的三个命令实现，这里不再赘述，我们只提供主干流程的梳理，对应的细节你可以去代码中查看。\n\n### hexo-cli的执行过程\n\n至此，hexo-cli的整体实现逻辑，我们已经看完了。画一张流程图简单梳理一下。\n\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2021-9-30/hexo-cli-process.png\">\n\n## 小结\n\n整个cli的过程其实大同小异，和其他的cli整体实现思路比较类似。\n","slug":"32. hexo源码分析（一）","published":1,"updated":"2021-10-13T07:38:35.600Z","_id":"cku6pndd600000gp2cets10d8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>其实是由一个小问题引发的，在配置icarus主题的时候，发现的一个<a href=\"https://githubmemory.com/repo/ppoffice/hexo-theme-icarus/issues/855?page=1\">问题</a>，类似这个链接。就是<code>hexo-renderer-inferno</code>这个插件没有正常运行导致的，但是<code>node_modules</code>中可以很明显的看到，作为<code>hexo-theme-icarus</code>依赖的依赖，是被正常的安装下来了，按照文中的解决方案虽然能解决，但是并没有真正从源头上解决。基于这个原因，想从hexo的源码中看一看插件加载机制。</p>\n<p>很明显搜索引擎按照<code>hexo 源码</code>作为关键字的搜索结果中，并没有真正的源码分析，都是非常浅层的解析。所以这里我将从源码的角度尝试分析一下hexo内部的运行机制。</p>\n<p>注：hexo的版本<code>&quot;version&quot;: &quot;5.4.0&quot;</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>这里将分几篇文章把我在阅读hexo代码的过程记录一下，作为hexo源码阅读第一篇文章，将分析一下hexo-cli的设计实现思路。</p>\n<h2 id=\"输入-hexo-发生了什么？\"><a href=\"#输入-hexo-发生了什么？\" class=\"headerlink\" title=\"输入 hexo  发生了什么？\"></a>输入 hexo <commond> 发生了什么？</h2><p>和其他的脚手架一样，首先是从<code>package.json</code>中的<code>bin</code>字段开始的。<a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin\">bin有什么用</a>可自行去npm文档查看。</p>\n<h3 id=\"hexo的bin\"><a href=\"#hexo的bin\" class=\"headerlink\" title=\"hexo的bin\"></a>hexo的bin</h3><p>我们在安装完<code>npm i hexo</code>之后，可以看到hexo的<code>package.json</code>中的<code>bin</code>字段如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;bin&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;hexo&quot;</span>: <span class=\"string\">&quot;./bin/hexo&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>此时，执行 hexo命令之后，后续就会被<code>bin/hexo</code>接管，可以看下<code>bin/hexo</code>的内容，直接使用了<code>hexo-cli</code>暴露的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env node</span><br><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\">require(&#x27;hexo-cli&#x27;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-cli做的事情\"><a href=\"#hexo-cli做的事情\" class=\"headerlink\" title=\"hexo-cli做的事情\"></a>hexo-cli做的事情</h3><p>接下来我们来看一看<code>hexo-cli</code>做了什么，直接找 <code>package.json</code>中的 main字段，找到入口文件<code>lib/hexo.js</code>，接下来执行<code>hexo ...</code>都会被这里接管。</p>\n<p><code>hexo-cli</code>和其他cli工具类似，里面的实现并不复杂，大致看一下就能了解实现原理，如果想了解一般cli的执行流程，你可以看我之前写的 vue-cli源码学习2.x，里面分析了vue-cli版本2的实现原理。</p>\n<p><code>hexo-cli</code>提供了<code>init</code>、<code>help</code>、<code>version</code>这三个命令，那么此时你一定会有一个疑惑，<code>hexo server</code>、<code>hexo g</code>等等命令是怎么执行的？hexo-cli和hexo两个依赖的关系是怎么样的？</p>\n<p>其实我的最大的疑问也在这里，因为按照cli的惯例，一般所有命令都会在cli中实现对应的逻辑，但是经过调试发现，hexo似乎并不想这么做，而是把其他的命令逻辑放到hexo这个依赖中了。我理解是hexo作为一个暴露出来的核心类，里面的逻辑会很复杂，所以单独抽离出来了，<code>hexo-cli</code>只是提供了很简单的一个功能。那么我们接下来看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/hexo.js</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">mod</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mod) hexo = mod;</span><br><span class=\"line\">  log = hexo.log;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注册 hexo的控制台命令</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./console&#x27;</span>)(hexo);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hexo.init();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 会在目标目录中找 hexo这个依赖的路径，然后实例化 hexo</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> modulePath = resolve.sync(<span class=\"string\">&#x27;hexo&#x27;</span>, &#123; <span class=\"attr\">basedir</span>: path &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段逻辑就是实例化Hexo的关键步骤，第一遍看的时候没发现，后来才发现这里，这个就是<code>hexo-cli</code>和<code>hexo</code>这两个依赖之间的关系。同时这里也做了保底逻辑，如果没有找到对应的<code>hexo</code>依赖的路径，那么会有一个保底逻辑，直接使用<code>hexo-cli</code>中内置的 Context来实例化 Hexo对象，你可以在<code>hexo-cli/lib/context.js</code>中找到对应的实现。</p>\n<p>我们先来看看假如使用<code>hexo-cli</code>中的实例化 Hexo是如何做的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/context.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">base = process.cwd(), args = &#123;&#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.base_dir = base;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log = logger(args);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">      <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> ConsoleExtend()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他的暂时都不太重要，我们直接省去，我们先来看这一段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/context.js</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">  <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> ConsoleExtend()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这一段赋值了 extend，里面为 console实例化了一个 <code>ConsoleExtend</code>对象，为什么要看这个？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/hexo.js</span></span><br><span class=\"line\"><span class=\"comment\">// 注册 hexo的控制台命令</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./console&#x27;</span>)(hexo);</span><br></pre></td></tr></table></figure>\n\n<p>上面这段逻辑注册了 hexo的命令，那么里面是如何实现的插件注册逻辑？</p>\n<h3 id=\"hexo-cli的插件式结构\"><a href=\"#hexo-cli的插件式结构\" class=\"headerlink\" title=\"hexo-cli的插件式结构\"></a>hexo-cli的插件式结构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/console/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; <span class=\"built_in\">console</span> &#125; = ctx.extend;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;help&#x27;</span>, <span class=\"string\">&#x27;Get help on a command.&#x27;</span>, &#123;&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./help&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;Create a new Hexo folder.&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder at the specified path or the current directory.&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[destination]&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;destination&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Folder path. Initialize in current folder if not specified&#x27;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">options</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;--no-clone&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Copy files instead of cloning from GitHub&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;--no-install&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Skip npm install&#x27;</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./init&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;version&#x27;</span>, <span class=\"string\">&#x27;Display version information.&#x27;</span>, &#123;&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./version&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用了 Hexo实例化的 extend字段，里面的 console就是 <code>ConsoleExtend</code>实例化的对象，使用 <code>console.register</code>来为hexo控制台提供命令注册，我们来看下<code>ConsoleExtend</code>的具体实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/extend/console.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Console</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.store = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.alias = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">register</span>(<span class=\"params\">name, desc, options, fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.store[name.toLowerCase()] = fn;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = fn;</span><br><span class=\"line\">    c.options = options;</span><br><span class=\"line\">    c.desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这里最核心的部分其实就是为传进来的回调方法添加上 <code>options</code>和 <code>desc</code>属性，因为fn传递的是引用，因此这里是会为传进来的fn修改对应的 <code>options</code>和 <code>desc</code>的。hexo的命令存储结构是类似 <code>&#123; [name]: fn: Function &#125;</code>这种结构的（虽然我个人觉得这种方式不太好，更理想的结构应该是<code>&#123; [name]: &#123; fn: Function, desc: string &#125; &#125;</code>，类似这样的结构）。不过这不重要，知道整体的设计思路即可。</p>\n<p>所有调用<code>register</code>的都会被记录到 Hexo实例对象的 store字段中，这样就完成了插件的注册步骤，最终结构类似下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">help</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123; <span class=\"attr\">options</span>: &#123;&#125;, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Get help on a command.&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">init</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder at the specified path or the current directory.&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[destination]&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">arguments</span>: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">      <span class=\"attr\">options</span>: [<span class=\"built_in\">Array</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder.&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Display version information.&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何执行-hexo-？\"><a href=\"#如何执行-hexo-？\" class=\"headerlink\" title=\"如何执行 hexo  ？\"></a>如何执行 hexo <command> ？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entry</span>(<span class=\"params\">cwd = process.cwd(), args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">mod</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cmd = <span class=\"string\">&#x27;help&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!args.h &amp;&amp; !args.help) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = args._.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 这里取到 hexo命令执行的 目标</span></span><br><span class=\"line\">      <span class=\"comment\">// 比如 cmd = &#x27;init&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c &amp;&amp; hexo.extend.console.get(c)) cmd = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    watchSignal(hexo);</span><br><span class=\"line\">    <span class=\"comment\">// 执行的关键 hexo.call()，cmd代表从命令行中取到的命令</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hexo.call(cmd, args).then(<span class=\"function\">() =&gt;</span> hexo.exit()).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> hexo.exit(err).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// `hexo.exit()` already dumped `err`</span></span><br><span class=\"line\">      handleError(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;).catch(handleError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们依然只看关键的代码逻辑，可以看到<code>hexo.call(cmd, args)</code>这句代码就是执行的关键，里面的<code>cmd</code>参数代表了想要执行的命令，然后我们来看看<code>hexo.call()</code>的实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">call</span>(<span class=\"params\">name, args, callback</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> args === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      callback = args;</span><br><span class=\"line\">      args = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = <span class=\"built_in\">this</span>.extend.console.get(name);</span><br><span class=\"line\">      <span class=\"comment\">// c是 fn，fn有 options和 desc</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c) &#123;</span><br><span class=\"line\">        c.call(<span class=\"built_in\">this</span>, args).then(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Console \\`<span class=\"subst\">$&#123;name&#125;</span>\\` has not been registered yet!`</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).asCallback(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是直接调用我们上文中<code>register</code>注册的方法，然后根据传入的name执行对应的方法回调。<code>hexo-cli</code>提供了<code>init</code>、<code>help</code>、<code>version</code>三个命令（不包含hexo依赖中注册的），你可以去<code>hexo-cli/lib/console</code>中去查看对应的三个命令实现，这里不再赘述，我们只提供主干流程的梳理，对应的细节你可以去代码中查看。</p>\n<h3 id=\"hexo-cli的执行过程\"><a href=\"#hexo-cli的执行过程\" class=\"headerlink\" title=\"hexo-cli的执行过程\"></a>hexo-cli的执行过程</h3><p>至此，hexo-cli的整体实现逻辑，我们已经看完了。画一张流程图简单梳理一下。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2021-9-30/hexo-cli-process.png\">\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整个cli的过程其实大同小异，和其他的cli整体实现思路比较类似。</p>\n","site":{"data":{}},"excerpt":"<p>其实是由一个小问题引发的，在配置icarus主题的时候，发现的一个<a href=\"https://githubmemory.com/repo/ppoffice/hexo-theme-icarus/issues/855?page=1\">问题</a>，类似这个链接。就是<code>hexo-renderer-inferno</code>这个插件没有正常运行导致的，但是<code>node_modules</code>中可以很明显的看到，作为<code>hexo-theme-icarus</code>依赖的依赖，是被正常的安装下来了，按照文中的解决方案虽然能解决，但是并没有真正从源头上解决。基于这个原因，想从hexo的源码中看一看插件加载机制。</p>\n<p>很明显搜索引擎按照<code>hexo 源码</code>作为关键字的搜索结果中，并没有真正的源码分析，都是非常浅层的解析。所以这里我将从源码的角度尝试分析一下hexo内部的运行机制。</p>\n<p>注：hexo的版本<code>&quot;version&quot;: &quot;5.4.0&quot;</code></p>","more":"<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>这里将分几篇文章把我在阅读hexo代码的过程记录一下，作为hexo源码阅读第一篇文章，将分析一下hexo-cli的设计实现思路。</p>\n<h2 id=\"输入-hexo-发生了什么？\"><a href=\"#输入-hexo-发生了什么？\" class=\"headerlink\" title=\"输入 hexo  发生了什么？\"></a>输入 hexo <commond> 发生了什么？</h2><p>和其他的脚手架一样，首先是从<code>package.json</code>中的<code>bin</code>字段开始的。<a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin\">bin有什么用</a>可自行去npm文档查看。</p>\n<h3 id=\"hexo的bin\"><a href=\"#hexo的bin\" class=\"headerlink\" title=\"hexo的bin\"></a>hexo的bin</h3><p>我们在安装完<code>npm i hexo</code>之后，可以看到hexo的<code>package.json</code>中的<code>bin</code>字段如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;bin&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;hexo&quot;</span>: <span class=\"string\">&quot;./bin/hexo&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>此时，执行 hexo命令之后，后续就会被<code>bin/hexo</code>接管，可以看下<code>bin/hexo</code>的内容，直接使用了<code>hexo-cli</code>暴露的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env node</span><br><span class=\"line\">&#x27;use strict&#x27;;</span><br><span class=\"line\">require(&#x27;hexo-cli&#x27;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-cli做的事情\"><a href=\"#hexo-cli做的事情\" class=\"headerlink\" title=\"hexo-cli做的事情\"></a>hexo-cli做的事情</h3><p>接下来我们来看一看<code>hexo-cli</code>做了什么，直接找 <code>package.json</code>中的 main字段，找到入口文件<code>lib/hexo.js</code>，接下来执行<code>hexo ...</code>都会被这里接管。</p>\n<p><code>hexo-cli</code>和其他cli工具类似，里面的实现并不复杂，大致看一下就能了解实现原理，如果想了解一般cli的执行流程，你可以看我之前写的 vue-cli源码学习2.x，里面分析了vue-cli版本2的实现原理。</p>\n<p><code>hexo-cli</code>提供了<code>init</code>、<code>help</code>、<code>version</code>这三个命令，那么此时你一定会有一个疑惑，<code>hexo server</code>、<code>hexo g</code>等等命令是怎么执行的？hexo-cli和hexo两个依赖的关系是怎么样的？</p>\n<p>其实我的最大的疑问也在这里，因为按照cli的惯例，一般所有命令都会在cli中实现对应的逻辑，但是经过调试发现，hexo似乎并不想这么做，而是把其他的命令逻辑放到hexo这个依赖中了。我理解是hexo作为一个暴露出来的核心类，里面的逻辑会很复杂，所以单独抽离出来了，<code>hexo-cli</code>只是提供了很简单的一个功能。那么我们接下来看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/hexo.js</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">mod</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mod) hexo = mod;</span><br><span class=\"line\">  log = hexo.log;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注册 hexo的控制台命令</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./console&#x27;</span>)(hexo);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hexo.init();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 会在目标目录中找 hexo这个依赖的路径，然后实例化 hexo</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> modulePath = resolve.sync(<span class=\"string\">&#x27;hexo&#x27;</span>, &#123; <span class=\"attr\">basedir</span>: path &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段逻辑就是实例化Hexo的关键步骤，第一遍看的时候没发现，后来才发现这里，这个就是<code>hexo-cli</code>和<code>hexo</code>这两个依赖之间的关系。同时这里也做了保底逻辑，如果没有找到对应的<code>hexo</code>依赖的路径，那么会有一个保底逻辑，直接使用<code>hexo-cli</code>中内置的 Context来实例化 Hexo对象，你可以在<code>hexo-cli/lib/context.js</code>中找到对应的实现。</p>\n<p>我们先来看看假如使用<code>hexo-cli</code>中的实例化 Hexo是如何做的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/context.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">base = process.cwd(), args = &#123;&#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.base_dir = base;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log = logger(args);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">      <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> ConsoleExtend()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他的暂时都不太重要，我们直接省去，我们先来看这一段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/context.js</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">  <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> ConsoleExtend()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这一段赋值了 extend，里面为 console实例化了一个 <code>ConsoleExtend</code>对象，为什么要看这个？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/hexo.js</span></span><br><span class=\"line\"><span class=\"comment\">// 注册 hexo的控制台命令</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./console&#x27;</span>)(hexo);</span><br></pre></td></tr></table></figure>\n\n<p>上面这段逻辑注册了 hexo的命令，那么里面是如何实现的插件注册逻辑？</p>\n<h3 id=\"hexo-cli的插件式结构\"><a href=\"#hexo-cli的插件式结构\" class=\"headerlink\" title=\"hexo-cli的插件式结构\"></a>hexo-cli的插件式结构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/console/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; <span class=\"built_in\">console</span> &#125; = ctx.extend;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;help&#x27;</span>, <span class=\"string\">&#x27;Get help on a command.&#x27;</span>, &#123;&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./help&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;init&#x27;</span>, <span class=\"string\">&#x27;Create a new Hexo folder.&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder at the specified path or the current directory.&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[destination]&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;destination&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Folder path. Initialize in current folder if not specified&#x27;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">options</span>: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;--no-clone&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Copy files instead of cloning from GitHub&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;--no-install&#x27;</span>, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Skip npm install&#x27;</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./init&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">&#x27;version&#x27;</span>, <span class=\"string\">&#x27;Display version information.&#x27;</span>, &#123;&#125;, <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./version&#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用了 Hexo实例化的 extend字段，里面的 console就是 <code>ConsoleExtend</code>实例化的对象，使用 <code>console.register</code>来为hexo控制台提供命令注册，我们来看下<code>ConsoleExtend</code>的具体实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hexo-cli/lib/extend/console.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Console</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.store = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.alias = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">register</span>(<span class=\"params\">name, desc, options, fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.store[name.toLowerCase()] = fn;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = fn;</span><br><span class=\"line\">    c.options = options;</span><br><span class=\"line\">    c.desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这里最核心的部分其实就是为传进来的回调方法添加上 <code>options</code>和 <code>desc</code>属性，因为fn传递的是引用，因此这里是会为传进来的fn修改对应的 <code>options</code>和 <code>desc</code>的。hexo的命令存储结构是类似 <code>&#123; [name]: fn: Function &#125;</code>这种结构的（虽然我个人觉得这种方式不太好，更理想的结构应该是<code>&#123; [name]: &#123; fn: Function, desc: string &#125; &#125;</code>，类似这样的结构）。不过这不重要，知道整体的设计思路即可。</p>\n<p>所有调用<code>register</code>的都会被记录到 Hexo实例对象的 store字段中，这样就完成了插件的注册步骤，最终结构类似下面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">help</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123; <span class=\"attr\">options</span>: &#123;&#125;, <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Get help on a command.&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">init</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder at the specified path or the current directory.&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">usage</span>: <span class=\"string\">&#x27;[destination]&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">arguments</span>: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">      <span class=\"attr\">options</span>: [<span class=\"built_in\">Array</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Create a new Hexo folder.&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: [<span class=\"built_in\">Function</span> (anonymous)] &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;Display version information.&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何执行-hexo-？\"><a href=\"#如何执行-hexo-？\" class=\"headerlink\" title=\"如何执行 hexo  ？\"></a>如何执行 hexo <command> ？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entry</span>(<span class=\"params\">cwd = process.cwd(), args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">mod</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cmd = <span class=\"string\">&#x27;help&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!args.h &amp;&amp; !args.help) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = args._.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 这里取到 hexo命令执行的 目标</span></span><br><span class=\"line\">      <span class=\"comment\">// 比如 cmd = &#x27;init&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c &amp;&amp; hexo.extend.console.get(c)) cmd = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    watchSignal(hexo);</span><br><span class=\"line\">    <span class=\"comment\">// 执行的关键 hexo.call()，cmd代表从命令行中取到的命令</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hexo.call(cmd, args).then(<span class=\"function\">() =&gt;</span> hexo.exit()).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> hexo.exit(err).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// `hexo.exit()` already dumped `err`</span></span><br><span class=\"line\">      handleError(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;).catch(handleError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们依然只看关键的代码逻辑，可以看到<code>hexo.call(cmd, args)</code>这句代码就是执行的关键，里面的<code>cmd</code>参数代表了想要执行的命令，然后我们来看看<code>hexo.call()</code>的实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">call</span>(<span class=\"params\">name, args, callback</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> args === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      callback = args;</span><br><span class=\"line\">      args = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> c = <span class=\"built_in\">this</span>.extend.console.get(name);</span><br><span class=\"line\">      <span class=\"comment\">// c是 fn，fn有 options和 desc</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c) &#123;</span><br><span class=\"line\">        c.call(<span class=\"built_in\">this</span>, args).then(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Console \\`<span class=\"subst\">$&#123;name&#125;</span>\\` has not been registered yet!`</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).asCallback(callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是直接调用我们上文中<code>register</code>注册的方法，然后根据传入的name执行对应的方法回调。<code>hexo-cli</code>提供了<code>init</code>、<code>help</code>、<code>version</code>三个命令（不包含hexo依赖中注册的），你可以去<code>hexo-cli/lib/console</code>中去查看对应的三个命令实现，这里不再赘述，我们只提供主干流程的梳理，对应的细节你可以去代码中查看。</p>\n<h3 id=\"hexo-cli的执行过程\"><a href=\"#hexo-cli的执行过程\" class=\"headerlink\" title=\"hexo-cli的执行过程\"></a>hexo-cli的执行过程</h3><p>至此，hexo-cli的整体实现逻辑，我们已经看完了。画一张流程图简单梳理一下。</p>\n<img src=\"https://file-1305436646.file.myqcloud.com/blog/2021-9-30/hexo-cli-process.png\">\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整个cli的过程其实大同小异，和其他的cli整体实现思路比较类似。</p>"},{"title":"hexo源码分析（二）","date":"2021-10-11T13:50:21.000Z","toc":true,"_content":"\n我们上篇文章分析了`hexo-cli`的执行原理，那么本篇文章，将分析一下`hexo`这个依赖中做的事情。将尝试分析一下`hexo`的内部处理机制。\n\n<!--more-->\n\n## Hexo类\n\n我们承接上文[hexo源码分析（一）]()中的逻辑介绍，里面对Hexo进行了实例化，并执行了`hexo.init()`。因此我们就从这里开始进行分析。\n\n```js\nclass Hexo extends EventEmitter {\n  constructor(base = process.cwd(), args = {}) {\n    super();\n\n    // 这里定义了一些关键的路径，比如项目的路径，theme路径，plugin路径等等\n    // 因为 Hexo实例贯穿整个执行逻辑，因此这里定义的一些路径信息方便后面使用\n    this.base_dir = base + sep;\n    this.public_dir = join(base, 'public') + sep;\n    this.source_dir = join(base, 'source') + sep;\n    // hexo插件一般命名规范都是 hexo-...结构，后面在读取插件的时候会正则判断\n    this.plugin_dir = join(base, 'node_modules') + sep;\n    this.script_dir = join(base, 'scripts') + sep;\n    this.scaffold_dir = join(base, 'scaffolds') + sep;\n    // 这里的 theme路径有两种可能\n    // 1. [project-name]/theme (优先级高)\n    // 2. [project-name]/node_modules/hexo-theme-[name]\n    this.theme_dir = join(base, 'themes', defaultConfig.theme) + sep;\n    this.theme_script_dir = join(this.theme_dir, 'scripts') + sep;\n\n    // ...\n    // 这里定义了一些比较关键的 extend方法，里面全部都是通过 register来注册进来的\n    // 这里的对应逻辑可在 hexo/lib/extend中查看，都是暴露出来的注册类\n    this.extend = {\n      // hexo-cli命令行注册的一些命令，在hexo/lib/plugins/console/index.js中注册进来\n      console: new Console(),\n      deployer: new Deployer(),\n      // filter可以理解为拦截器，在 hexo执行过程中，会看到很多 execFilter(type, data, options)这种的逻辑，就是在某些环节调用对应的拦截器逻辑\n      // 可在 hexo/lib/plugins/filter找对应的拦截逻辑\n      filter: new Filter(),\n      generator: new Generator(),\n      helper: new Helper(),\n      injector: new Injector(),\n      migrator: new Migrator(),\n      processor: new Processor(),\n      // 也是一个比较关键的逻辑，提供给文件渲染，比如 markdown -> html, yml -> json 等等，模板渲染逻辑都通过这里注册\n      renderer: new Renderer(),\n      tag: new Tag()\n    };\n\n    // ...\n    // 这里 hexo存储数据的方式是在 [project-name]/db.json 中，里面记录了整个静态网站的数据信息，比如文章内容，资源文件路径等等\n    // hexo会有在更新的时候会去判断文件的 hash来判断文件是否修改，只针对修改过的文件进行渲染生成\n    this.database = new Database({\n      version: dbVersion,\n      path: join(dbPath, 'db.json')\n    });\n\n    // 引入 models里所有的关键操作，比如 Cache\n    registerModels(this);\n\n    // 这里定义了一些 db.json的查询方式\n    this._bindLocals();\n  }\n\n  // ...\n  init() {\n    // debug模式下会打印出来，在执行命令的时候后面跟上 --debug即可进入该模式，方便查看整个执行流程，便于定位问题\n    // 具体实现可查看 hexo-log\n    this.log.debug('Hexo version: %s', magenta(this.version));\n    this.log.debug('Working directory: %s', magenta(tildify(this.base_dir)));\n\n    // Load internal plugins\n    // hexo/lib/plugins中，基本都是使用 hexo/lib/extend 中实例的对象来进行注册\n    require('../plugins/console')(this);\n    require('../plugins/filter')(this);\n    require('../plugins/generator')(this);\n    require('../plugins/helper')(this);\n    require('../plugins/injector')(this);\n    require('../plugins/processor')(this);\n    require('../plugins/renderer')(this);\n    require('../plugins/tag')(this);\n\n    // Load config\n    return Promise.each([\n      'update_package', // Update package.json\n      'load_config', // Load config\n      'load_theme_config', // Load alternate theme config\n      // 比如一些 模板渲染插件就是在这里被加载进来的，例 hexo-renderer-ejs\n      'load_plugins' // Load external plugins & scripts\n    ], name => require(`./${name}`)(this)).then(() => this.execFilter('after_init', null, {context: this})).then(() => {\n      // Ready to go!\n      this.emit('ready');\n    });\n  }\n}\n```\n\n先来看这一段代码，里面的部分逻辑添加上了一些我的理解注释，这一部分就是Hexo内部的启动逻辑。\n\n","source":"_posts/33. hexo源码分析（二）.md","raw":"---\ntitle: hexo源码分析（二）\ndate: 2021-10-11 21:50:21\ntoc: true\ncategories:\n- hexo\ntags:\n- hexo\n- 源码\n---\n\n我们上篇文章分析了`hexo-cli`的执行原理，那么本篇文章，将分析一下`hexo`这个依赖中做的事情。将尝试分析一下`hexo`的内部处理机制。\n\n<!--more-->\n\n## Hexo类\n\n我们承接上文[hexo源码分析（一）]()中的逻辑介绍，里面对Hexo进行了实例化，并执行了`hexo.init()`。因此我们就从这里开始进行分析。\n\n```js\nclass Hexo extends EventEmitter {\n  constructor(base = process.cwd(), args = {}) {\n    super();\n\n    // 这里定义了一些关键的路径，比如项目的路径，theme路径，plugin路径等等\n    // 因为 Hexo实例贯穿整个执行逻辑，因此这里定义的一些路径信息方便后面使用\n    this.base_dir = base + sep;\n    this.public_dir = join(base, 'public') + sep;\n    this.source_dir = join(base, 'source') + sep;\n    // hexo插件一般命名规范都是 hexo-...结构，后面在读取插件的时候会正则判断\n    this.plugin_dir = join(base, 'node_modules') + sep;\n    this.script_dir = join(base, 'scripts') + sep;\n    this.scaffold_dir = join(base, 'scaffolds') + sep;\n    // 这里的 theme路径有两种可能\n    // 1. [project-name]/theme (优先级高)\n    // 2. [project-name]/node_modules/hexo-theme-[name]\n    this.theme_dir = join(base, 'themes', defaultConfig.theme) + sep;\n    this.theme_script_dir = join(this.theme_dir, 'scripts') + sep;\n\n    // ...\n    // 这里定义了一些比较关键的 extend方法，里面全部都是通过 register来注册进来的\n    // 这里的对应逻辑可在 hexo/lib/extend中查看，都是暴露出来的注册类\n    this.extend = {\n      // hexo-cli命令行注册的一些命令，在hexo/lib/plugins/console/index.js中注册进来\n      console: new Console(),\n      deployer: new Deployer(),\n      // filter可以理解为拦截器，在 hexo执行过程中，会看到很多 execFilter(type, data, options)这种的逻辑，就是在某些环节调用对应的拦截器逻辑\n      // 可在 hexo/lib/plugins/filter找对应的拦截逻辑\n      filter: new Filter(),\n      generator: new Generator(),\n      helper: new Helper(),\n      injector: new Injector(),\n      migrator: new Migrator(),\n      processor: new Processor(),\n      // 也是一个比较关键的逻辑，提供给文件渲染，比如 markdown -> html, yml -> json 等等，模板渲染逻辑都通过这里注册\n      renderer: new Renderer(),\n      tag: new Tag()\n    };\n\n    // ...\n    // 这里 hexo存储数据的方式是在 [project-name]/db.json 中，里面记录了整个静态网站的数据信息，比如文章内容，资源文件路径等等\n    // hexo会有在更新的时候会去判断文件的 hash来判断文件是否修改，只针对修改过的文件进行渲染生成\n    this.database = new Database({\n      version: dbVersion,\n      path: join(dbPath, 'db.json')\n    });\n\n    // 引入 models里所有的关键操作，比如 Cache\n    registerModels(this);\n\n    // 这里定义了一些 db.json的查询方式\n    this._bindLocals();\n  }\n\n  // ...\n  init() {\n    // debug模式下会打印出来，在执行命令的时候后面跟上 --debug即可进入该模式，方便查看整个执行流程，便于定位问题\n    // 具体实现可查看 hexo-log\n    this.log.debug('Hexo version: %s', magenta(this.version));\n    this.log.debug('Working directory: %s', magenta(tildify(this.base_dir)));\n\n    // Load internal plugins\n    // hexo/lib/plugins中，基本都是使用 hexo/lib/extend 中实例的对象来进行注册\n    require('../plugins/console')(this);\n    require('../plugins/filter')(this);\n    require('../plugins/generator')(this);\n    require('../plugins/helper')(this);\n    require('../plugins/injector')(this);\n    require('../plugins/processor')(this);\n    require('../plugins/renderer')(this);\n    require('../plugins/tag')(this);\n\n    // Load config\n    return Promise.each([\n      'update_package', // Update package.json\n      'load_config', // Load config\n      'load_theme_config', // Load alternate theme config\n      // 比如一些 模板渲染插件就是在这里被加载进来的，例 hexo-renderer-ejs\n      'load_plugins' // Load external plugins & scripts\n    ], name => require(`./${name}`)(this)).then(() => this.execFilter('after_init', null, {context: this})).then(() => {\n      // Ready to go!\n      this.emit('ready');\n    });\n  }\n}\n```\n\n先来看这一段代码，里面的部分逻辑添加上了一些我的理解注释，这一部分就是Hexo内部的启动逻辑。\n\n","slug":"33. hexo源码分析（二）","published":1,"updated":"2021-10-13T07:58:57.866Z","_id":"ckum1yyxk00090gp2fo3u7fmh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们上篇文章分析了<code>hexo-cli</code>的执行原理，那么本篇文章，将分析一下<code>hexo</code>这个依赖中做的事情。将尝试分析一下<code>hexo</code>的内部处理机制。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hexo类\"><a href=\"#Hexo类\" class=\"headerlink\" title=\"Hexo类\"></a>Hexo类</h2><p>我们承接上文<a href=\"\">hexo源码分析（一）</a>中的逻辑介绍，里面对Hexo进行了实例化，并执行了<code>hexo.init()</code>。因此我们就从这里开始进行分析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hexo</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">base = process.cwd(), args = &#123;&#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些关键的路径，比如项目的路径，theme路径，plugin路径等等</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为 Hexo实例贯穿整个执行逻辑，因此这里定义的一些路径信息方便后面使用</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.base_dir = base + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.public_dir = join(base, <span class=\"string\">&#x27;public&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.source_dir = join(base, <span class=\"string\">&#x27;source&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"comment\">// hexo插件一般命名规范都是 hexo-...结构，后面在读取插件的时候会正则判断</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.plugin_dir = join(base, <span class=\"string\">&#x27;node_modules&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.script_dir = join(base, <span class=\"string\">&#x27;scripts&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scaffold_dir = join(base, <span class=\"string\">&#x27;scaffolds&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的 theme路径有两种可能</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. [project-name]/theme (优先级高)</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. [project-name]/node_modules/hexo-theme-[name]</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.theme_dir = join(base, <span class=\"string\">&#x27;themes&#x27;</span>, defaultConfig.theme) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.theme_script_dir = join(<span class=\"built_in\">this</span>.theme_dir, <span class=\"string\">&#x27;scripts&#x27;</span>) + sep;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些比较关键的 extend方法，里面全部都是通过 register来注册进来的</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的对应逻辑可在 hexo/lib/extend中查看，都是暴露出来的注册类</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// hexo-cli命令行注册的一些命令，在hexo/lib/plugins/console/index.js中注册进来</span></span><br><span class=\"line\">      <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> Console(),</span><br><span class=\"line\">      <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> Deployer(),</span><br><span class=\"line\">      <span class=\"comment\">// filter可以理解为拦截器，在 hexo执行过程中，会看到很多 execFilter(type, data, options)这种的逻辑，就是在某些环节调用对应的拦截器逻辑</span></span><br><span class=\"line\">      <span class=\"comment\">// 可在 hexo/lib/plugins/filter找对应的拦截逻辑</span></span><br><span class=\"line\">      <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> Filter(),</span><br><span class=\"line\">      <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> Generator(),</span><br><span class=\"line\">      <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> Helper(),</span><br><span class=\"line\">      <span class=\"attr\">injector</span>: <span class=\"keyword\">new</span> Injector(),</span><br><span class=\"line\">      <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> Migrator(),</span><br><span class=\"line\">      <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> Processor(),</span><br><span class=\"line\">      <span class=\"comment\">// 也是一个比较关键的逻辑，提供给文件渲染，比如 markdown -&gt; html, yml -&gt; json 等等，模板渲染逻辑都通过这里注册</span></span><br><span class=\"line\">      <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> Renderer(),</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> Tag()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里 hexo存储数据的方式是在 [project-name]/db.json 中，里面记录了整个静态网站的数据信息，比如文章内容，资源文件路径等等</span></span><br><span class=\"line\">    <span class=\"comment\">// hexo会有在更新的时候会去判断文件的 hash来判断文件是否修改，只针对修改过的文件进行渲染生成</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.database = <span class=\"keyword\">new</span> Database(&#123;</span><br><span class=\"line\">      <span class=\"attr\">version</span>: dbVersion,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: join(dbPath, <span class=\"string\">&#x27;db.json&#x27;</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引入 models里所有的关键操作，比如 Cache</span></span><br><span class=\"line\">    registerModels(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些 db.json的查询方式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._bindLocals();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debug模式下会打印出来，在执行命令的时候后面跟上 --debug即可进入该模式，方便查看整个执行流程，便于定位问题</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体实现可查看 hexo-log</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Hexo version: %s&#x27;</span>, magenta(<span class=\"built_in\">this</span>.version));</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Working directory: %s&#x27;</span>, magenta(tildify(<span class=\"built_in\">this</span>.base_dir)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load internal plugins</span></span><br><span class=\"line\">    <span class=\"comment\">// hexo/lib/plugins中，基本都是使用 hexo/lib/extend 中实例的对象来进行注册</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/console&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/filter&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/generator&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/helper&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/injector&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/processor&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/renderer&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/tag&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load config</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each([</span><br><span class=\"line\">      <span class=\"string\">&#x27;update_package&#x27;</span>, <span class=\"comment\">// Update package.json</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_config&#x27;</span>, <span class=\"comment\">// Load config</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_theme_config&#x27;</span>, <span class=\"comment\">// Load alternate theme config</span></span><br><span class=\"line\">      <span class=\"comment\">// 比如一些 模板渲染插件就是在这里被加载进来的，例 hexo-renderer-ejs</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_plugins&#x27;</span> <span class=\"comment\">// Load external plugins &amp; scripts</span></span><br><span class=\"line\">    ], <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>)(<span class=\"built_in\">this</span>)).then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.execFilter(<span class=\"string\">&#x27;after_init&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">context</span>: <span class=\"built_in\">this</span>&#125;)).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Ready to go!</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.emit(<span class=\"string\">&#x27;ready&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来看这一段代码，里面的部分逻辑添加上了一些我的理解注释，这一部分就是Hexo内部的启动逻辑。</p>\n","site":{"data":{}},"excerpt":"<p>我们上篇文章分析了<code>hexo-cli</code>的执行原理，那么本篇文章，将分析一下<code>hexo</code>这个依赖中做的事情。将尝试分析一下<code>hexo</code>的内部处理机制。</p>","more":"<h2 id=\"Hexo类\"><a href=\"#Hexo类\" class=\"headerlink\" title=\"Hexo类\"></a>Hexo类</h2><p>我们承接上文<a href=\"\">hexo源码分析（一）</a>中的逻辑介绍，里面对Hexo进行了实例化，并执行了<code>hexo.init()</code>。因此我们就从这里开始进行分析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hexo</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">base = process.cwd(), args = &#123;&#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些关键的路径，比如项目的路径，theme路径，plugin路径等等</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为 Hexo实例贯穿整个执行逻辑，因此这里定义的一些路径信息方便后面使用</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.base_dir = base + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.public_dir = join(base, <span class=\"string\">&#x27;public&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.source_dir = join(base, <span class=\"string\">&#x27;source&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"comment\">// hexo插件一般命名规范都是 hexo-...结构，后面在读取插件的时候会正则判断</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.plugin_dir = join(base, <span class=\"string\">&#x27;node_modules&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.script_dir = join(base, <span class=\"string\">&#x27;scripts&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.scaffold_dir = join(base, <span class=\"string\">&#x27;scaffolds&#x27;</span>) + sep;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的 theme路径有两种可能</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. [project-name]/theme (优先级高)</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. [project-name]/node_modules/hexo-theme-[name]</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.theme_dir = join(base, <span class=\"string\">&#x27;themes&#x27;</span>, defaultConfig.theme) + sep;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.theme_script_dir = join(<span class=\"built_in\">this</span>.theme_dir, <span class=\"string\">&#x27;scripts&#x27;</span>) + sep;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些比较关键的 extend方法，里面全部都是通过 register来注册进来的</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的对应逻辑可在 hexo/lib/extend中查看，都是暴露出来的注册类</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.extend = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// hexo-cli命令行注册的一些命令，在hexo/lib/plugins/console/index.js中注册进来</span></span><br><span class=\"line\">      <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> Console(),</span><br><span class=\"line\">      <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> Deployer(),</span><br><span class=\"line\">      <span class=\"comment\">// filter可以理解为拦截器，在 hexo执行过程中，会看到很多 execFilter(type, data, options)这种的逻辑，就是在某些环节调用对应的拦截器逻辑</span></span><br><span class=\"line\">      <span class=\"comment\">// 可在 hexo/lib/plugins/filter找对应的拦截逻辑</span></span><br><span class=\"line\">      <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> Filter(),</span><br><span class=\"line\">      <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> Generator(),</span><br><span class=\"line\">      <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> Helper(),</span><br><span class=\"line\">      <span class=\"attr\">injector</span>: <span class=\"keyword\">new</span> Injector(),</span><br><span class=\"line\">      <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> Migrator(),</span><br><span class=\"line\">      <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> Processor(),</span><br><span class=\"line\">      <span class=\"comment\">// 也是一个比较关键的逻辑，提供给文件渲染，比如 markdown -&gt; html, yml -&gt; json 等等，模板渲染逻辑都通过这里注册</span></span><br><span class=\"line\">      <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> Renderer(),</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> Tag()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里 hexo存储数据的方式是在 [project-name]/db.json 中，里面记录了整个静态网站的数据信息，比如文章内容，资源文件路径等等</span></span><br><span class=\"line\">    <span class=\"comment\">// hexo会有在更新的时候会去判断文件的 hash来判断文件是否修改，只针对修改过的文件进行渲染生成</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.database = <span class=\"keyword\">new</span> Database(&#123;</span><br><span class=\"line\">      <span class=\"attr\">version</span>: dbVersion,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: join(dbPath, <span class=\"string\">&#x27;db.json&#x27;</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引入 models里所有的关键操作，比如 Cache</span></span><br><span class=\"line\">    registerModels(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了一些 db.json的查询方式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._bindLocals();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debug模式下会打印出来，在执行命令的时候后面跟上 --debug即可进入该模式，方便查看整个执行流程，便于定位问题</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体实现可查看 hexo-log</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Hexo version: %s&#x27;</span>, magenta(<span class=\"built_in\">this</span>.version));</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&#x27;Working directory: %s&#x27;</span>, magenta(tildify(<span class=\"built_in\">this</span>.base_dir)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load internal plugins</span></span><br><span class=\"line\">    <span class=\"comment\">// hexo/lib/plugins中，基本都是使用 hexo/lib/extend 中实例的对象来进行注册</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/console&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/filter&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/generator&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/helper&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/injector&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/processor&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/renderer&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../plugins/tag&#x27;</span>)(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load config</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each([</span><br><span class=\"line\">      <span class=\"string\">&#x27;update_package&#x27;</span>, <span class=\"comment\">// Update package.json</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_config&#x27;</span>, <span class=\"comment\">// Load config</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_theme_config&#x27;</span>, <span class=\"comment\">// Load alternate theme config</span></span><br><span class=\"line\">      <span class=\"comment\">// 比如一些 模板渲染插件就是在这里被加载进来的，例 hexo-renderer-ejs</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;load_plugins&#x27;</span> <span class=\"comment\">// Load external plugins &amp; scripts</span></span><br><span class=\"line\">    ], <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">require</span>(<span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>)(<span class=\"built_in\">this</span>)).then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.execFilter(<span class=\"string\">&#x27;after_init&#x27;</span>, <span class=\"literal\">null</span>, &#123;<span class=\"attr\">context</span>: <span class=\"built_in\">this</span>&#125;)).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Ready to go!</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.emit(<span class=\"string\">&#x27;ready&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来看这一段代码，里面的部分逻辑添加上了一些我的理解注释，这一部分就是Hexo内部的启动逻辑。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cku41le880000idp2074z7u24","category_id":"cku6kofvh0002jzp22i950neu","_id":"cku6kofvk0003jzp2dvq728h1"},{"post_id":"cku41le8o000lidp22n3m99zw","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kor2p0004jzp276aaba5p"},{"post_id":"cku41le8x0017idp2afap9ilc","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kp5c20005jzp25a4shidf"},{"post_id":"cku41le8z001eidp2diz99gci","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kp8bv0006jzp2ee69hbhu"},{"post_id":"cku41le91001hidp27ojaax8s","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kpax70007jzp2a7mu41l3"},{"post_id":"cku41le92001jidp2ftma5b5w","category_id":"cku6kph810008jzp29xq4h53r","_id":"cku6kph810009jzp2h9ld4uj2"},{"post_id":"cku41le95001midp2blk54pn3","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kpm1r000ajzp29h4wf2ds"},{"post_id":"cku41le95001oidp25lzmd5a0","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kpob8000bjzp28bzr96lq"},{"post_id":"cku41le96001ridp2ecke48f0","category_id":"cku6kpu5x000cjzp2as3n8jtp","_id":"cku6kpu5y000djzp2ae644dlp"},{"post_id":"cku41le8c0001idp2c6u17gsr","category_id":"cku6kph810008jzp29xq4h53r","_id":"cku6kq17a000ejzp29vmjaeir"},{"post_id":"cku41le8f0003idp2fcff881g","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kq44l000fjzp21z0eexw6"},{"post_id":"cku41le8g0004idp21i1g06i0","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kq7b0000gjzp260nufzod"},{"post_id":"cku41le8h0005idp27xy77zqr","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kqa81000hjzp21ju650gn"},{"post_id":"cku41le8i0008idp24xzuc7t4","category_id":"cku6kofvh0002jzp22i950neu","_id":"cku6kqe24000ijzp24meede3e"},{"post_id":"cku41le8i0009idp2eizw6l4q","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kqh8h000jjzp243wv42c7"},{"post_id":"cku41le8k000cidp23uad4441","category_id":"cku6kofvh0002jzp22i950neu","_id":"cku6kqnvc000kjzp2aw4jeht4"},{"post_id":"cku41le8k000eidp20nu938tt","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kqwsc000ljzp245c4ctr9"},{"post_id":"cku41le8m000hidp2gs7m4ded","category_id":"cku6kr0yw000mjzp244cf5vyg","_id":"cku6kr0yw000njzp27hdch1lg"},{"post_id":"cku41le8n000jidp2cos771ik","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kr6ys000ojzp2ek2bb8jy"},{"post_id":"cku41le8o000nidp2ae7f7g2l","category_id":"cku6krehj000pjzp262a7h87t","_id":"cku6krehj000qjzp2aayk7yrt"},{"post_id":"cku41le8p000pidp2gkl7g67g","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6krh28000rjzp22lhxhbgu"},{"post_id":"cku41le9j002xidp21mck4toj","category_id":"cku6kph810008jzp29xq4h53r","_id":"cku6krkak000sjzp27gdw9d6t"},{"post_id":"cku41le8q000sidp23ldb2o5b","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6krnmc000tjzp25u1sbc7d"},{"post_id":"cku41le8r000uidp2fud7c23w","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6krr8p000ujzp2fxlrcqfd"},{"post_id":"cku41le8s000xidp28xyd357x","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6krzkc000vjzp29htfb951"},{"post_id":"cku41le8t000yidp23au128wu","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6ks28t000wjzp26mt4e8g1"},{"post_id":"cku41le8u0010idp2brzr902l","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6ks4ln000xjzp2g4ta6xxo"},{"post_id":"cku41le8v0012idp2divfhg3l","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6ksffp000yjzp2apl2fele"},{"post_id":"cku41le8w0015idp2d3j108ka","category_id":"cku6klnox0000hsp2dpjvao5h","_id":"cku6kshuu000zjzp215ieatf5"},{"post_id":"cku41le8y001aidp20mdb9uob","category_id":"cku6kr0yw000mjzp244cf5vyg","_id":"cku6ksm4b0010jzp28ixe2b8x"},{"post_id":"cku41le8y001cidp2dpes9lu5","category_id":"cku6kofvh0002jzp22i950neu","_id":"cku6kspvv0011jzp2a2rcd4oo"},{"post_id":"cku6pndd600000gp2cets10d8","category_id":"cku6kofvh0002jzp22i950neu","_id":"cku6pvmjm00020gp2cmtjb333"},{"post_id":"ckum1yyxk00090gp2fo3u7fmh","category_id":"cku6kofvh0002jzp22i950neu","_id":"ckum1yyxm000c0gp2bkct6okl"}],"PostTag":[{"post_id":"cku41le880000idp2074z7u24","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"cku41le8i0007idp23su5dth0"},{"post_id":"cku41le8i0008idp24xzuc7t4","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le8j000bidp2bgvabahq"},{"post_id":"cku41le8i0008idp24xzuc7t4","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"cku41le8k000didp22t4g6u68"},{"post_id":"cku41le8k000cidp23uad4441","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le8m000gidp26jgg94xj"},{"post_id":"cku41le8k000cidp23uad4441","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"cku41le8n000iidp2e3uydl59"},{"post_id":"cku41le8c0001idp2c6u17gsr","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le8o000midp23ixtgd4r"},{"post_id":"cku41le8c0001idp2c6u17gsr","tag_id":"cku41le8j000aidp21t1e8p0h","_id":"cku41le8p000oidp28xajd5jg"},{"post_id":"cku41le8c0001idp2c6u17gsr","tag_id":"cku41le8m000fidp267q9azr6","_id":"cku41le8q000ridp2ek3i5hwa"},{"post_id":"cku41le8p000pidp2gkl7g67g","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le8r000tidp29i08474k"},{"post_id":"cku41le8q000sidp23ldb2o5b","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le8s000widp29lub4mpl"},{"post_id":"cku41le8f0003idp2fcff881g","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le8v0011idp2eeq87a9w"},{"post_id":"cku41le8f0003idp2fcff881g","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le8w0013idp2aov3e1lt"},{"post_id":"cku41le8f0003idp2fcff881g","tag_id":"cku41le8r000vidp2b5aa9q5b","_id":"cku41le8x0016idp2a8t75r5v"},{"post_id":"cku41le8g0004idp21i1g06i0","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le8x0018idp2bg2u8o9s"},{"post_id":"cku41le8h0005idp27xy77zqr","tag_id":"cku41le8w0014idp268wm7ovq","_id":"cku41le8y001bidp229tjfqsx"},{"post_id":"cku41le8x0017idp2afap9ilc","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le8z001didp21xd0g0yj"},{"post_id":"cku41le8y001cidp2dpes9lu5","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"cku41le91001gidp2953f5q7s"},{"post_id":"cku41le8i0009idp2eizw6l4q","tag_id":"cku41le8x0019idp22kl6h5dk","_id":"cku41le92001iidp29uf79qmr"},{"post_id":"cku41le8z001eidp2diz99gci","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le94001lidp2832y54pf"},{"post_id":"cku41le8z001eidp2diz99gci","tag_id":"cku41le8r000vidp2b5aa9q5b","_id":"cku41le95001nidp22rs245du"},{"post_id":"cku41le91001hidp27ojaax8s","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le96001qidp224dsga1s"},{"post_id":"cku41le91001hidp27ojaax8s","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le97001sidp2by6c4do6"},{"post_id":"cku41le8k000eidp20nu938tt","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le97001uidp2bpe0a5vo"},{"post_id":"cku41le92001jidp2ftma5b5w","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le98001vidp2gg110p6m"},{"post_id":"cku41le95001midp2blk54pn3","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le98001xidp288eeebdd"},{"post_id":"cku41le8m000hidp2gs7m4ded","tag_id":"cku41le94001kidp24h7tac19","_id":"cku41le98001yidp24koz4wt5"},{"post_id":"cku41le8n000jidp2cos771ik","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le990020idp2gg3vc8no"},{"post_id":"cku41le8o000lidp22n3m99zw","tag_id":"cku41le8n000kidp26l9v5iv1","_id":"cku41le990021idp21dv709gg"},{"post_id":"cku41le8o000nidp2ae7f7g2l","tag_id":"cku41le98001widp2g9sv42sl","_id":"cku41le9a0023idp21vrghzy0"},{"post_id":"cku41le8o000nidp2ae7f7g2l","tag_id":"cku41le98001zidp26ouj121o","_id":"cku41le9a0024idp20kc07cq6"},{"post_id":"cku41le8r000uidp2fud7c23w","tag_id":"cku41le8q000qidp25f73c877","_id":"cku41le9a0026idp26wn4g8j3"},{"post_id":"cku41le8r000uidp2fud7c23w","tag_id":"cku41le990022idp20mfv8vra","_id":"cku41le9a0027idp29t9029d9"},{"post_id":"cku41le8s000xidp28xyd357x","tag_id":"cku41le9a0025idp2dv3qbr5k","_id":"cku41le9c002bidp2erwzf4hz"},{"post_id":"cku41le8s000xidp28xyd357x","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le9c002cidp2f8s42727"},{"post_id":"cku41le8s000xidp28xyd357x","tag_id":"cku41le9a0028idp23fiu023z","_id":"cku41le9c002eidp27493bdjo"},{"post_id":"cku41le8s000xidp28xyd357x","tag_id":"cku41le9b0029idp26p4afzzi","_id":"cku41le9c002fidp21bl6hdl7"},{"post_id":"cku41le8t000yidp23au128wu","tag_id":"cku41le9b002aidp2d2ghdbg8","_id":"cku41le9d002hidp247sw9pr3"},{"post_id":"cku41le8u0010idp2brzr902l","tag_id":"cku41le9c002didp27kuw1kbe","_id":"cku41le9d002jidp2ejwe58nn"},{"post_id":"cku41le8u0010idp2brzr902l","tag_id":"cku41le9c002gidp24j09apqd","_id":"cku41le9d002kidp23hw03edz"},{"post_id":"cku41le8v0012idp2divfhg3l","tag_id":"cku41le9c002didp27kuw1kbe","_id":"cku41le9e002nidp2cf0z1ddp"},{"post_id":"cku41le8v0012idp2divfhg3l","tag_id":"cku41le9c002gidp24j09apqd","_id":"cku41le9e002oidp27z3wdojc"},{"post_id":"cku41le8w0015idp2d3j108ka","tag_id":"cku41le9e002midp2ab10bio2","_id":"cku41le9f002qidp24ao63hhv"},{"post_id":"cku41le8y001aidp20mdb9uob","tag_id":"cku41le94001kidp24h7tac19","_id":"cku41le9f002sidp2hbhm84kj"},{"post_id":"cku41le95001oidp25lzmd5a0","tag_id":"cku41le9f002ridp22r8wh8fb","_id":"cku41le9g002uidp2a8711u1h"},{"post_id":"cku41le95001oidp25lzmd5a0","tag_id":"cku41le8x0019idp22kl6h5dk","_id":"cku41le9g002vidp2a9b53cmw"},{"post_id":"cku41le96001ridp2ecke48f0","tag_id":"cku41le9g002tidp2g3drdpyg","_id":"cku41le9g002widp2babk1p66"},{"post_id":"cku41le9j002xidp21mck4toj","tag_id":"cku41le9k002yidp2f4orciut","_id":"cku41le9p002zidp2efszc685"},{"post_id":"cku41le9j002xidp21mck4toj","tag_id":"cku41le8h0006idp295on68zi","_id":"cku41le9q0030idp2ah8l1awm"},{"post_id":"cku6pndd600000gp2cets10d8","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"cku6pvmjn00030gp2fu5jdn0e"},{"post_id":"cku6pndd600000gp2cets10d8","tag_id":"cku6pvmjl00010gp25x2y0xyg","_id":"cku6pvmjn00040gp2hd59csrq"},{"post_id":"ckum1yyxk00090gp2fo3u7fmh","tag_id":"cku41le8e0002idp2ac3z3tw8","_id":"ckum1yyxl000a0gp2h7d30n1m"},{"post_id":"ckum1yyxk00090gp2fo3u7fmh","tag_id":"cku6pvmjl00010gp25x2y0xyg","_id":"ckum1yyxl000b0gp2eknk4ose"}],"Tag":[{"name":"hexo","_id":"cku41le8e0002idp2ac3z3tw8"},{"name":"项目","_id":"cku41le8h0006idp295on68zi"},{"name":"Express","_id":"cku41le8j000aidp21t1e8p0h"},{"name":"MySQL","_id":"cku41le8m000fidp267q9azr6"},{"name":"CSS","_id":"cku41le8n000kidp26l9v5iv1"},{"name":"JS","_id":"cku41le8q000qidp25f73c877"},{"name":"jQuery","_id":"cku41le8r000vidp2b5aa9q5b"},{"name":"npm","_id":"cku41le8w0014idp268wm7ovq"},{"name":"gulp","_id":"cku41le8x0019idp22kl6h5dk"},{"name":"总结","_id":"cku41le94001kidp24h7tac19"},{"name":"P5JS","_id":"cku41le98001widp2g9sv42sl"},{"name":"图形学","_id":"cku41le98001zidp26ouj121o"},{"name":"Promise","_id":"cku41le990022idp20mfv8vra"},{"name":"优化","_id":"cku41le9a0025idp2dv3qbr5k"},{"name":"webpack","_id":"cku41le9a0028idp23fiu023z"},{"name":"性能","_id":"cku41le9b0029idp26p4afzzi"},{"name":"Git","_id":"cku41le9b002aidp2d2ghdbg8"},{"name":"vue","_id":"cku41le9c002didp27kuw1kbe"},{"name":"cli","_id":"cku41le9c002gidp24j09apqd"},{"name":"浏览器","_id":"cku41le9e002midp2ab10bio2"},{"name":"ejs","_id":"cku41le9f002ridp22r8wh8fb"},{"name":"PS","_id":"cku41le9g002tidp2g3drdpyg"},{"name":"Vue","_id":"cku41le9k002yidp2f4orciut"},{"name":"源码","_id":"cku6pvmjl00010gp25x2y0xyg"}]}}